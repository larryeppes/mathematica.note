(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1645081,      32572]
NotebookOptionsPosition[   1631031,      32120]
NotebookOutlinePosition[   1631365,      32135]
CellTagsIndexPosition[   1631322,      32132]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\:5355\:5c42\:795e\:7ecf\:7f51\:7edc", "Section",
 CellChangeTimes->{{3.753352407858035*^9, 3.7533524333788013`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"DotPlusLayer", "[", 
    RowBox[{"1", ",", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
     RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.75335225112696*^9, 3.753352255679966*^9}, {
  3.753352294154996*^9, 3.753352324123047*^9}}],

Cell[CellGroupData[{

Cell[BoxData["net"], "Input",
 CellChangeTimes->{{3.753352351701363*^9, 3.753352351979465*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DotPlusLayer",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         TemplateBox[{GraphicsBox[{{
              Opacity[0.3], {{
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
              AbsolutePointSize[5], 
              PointBox[{{0, 0}, {1, 0}}], 
              PointBox[
               NCache[{{
                  Rational[-1, 2], 1}, {
                  Rational[1, 2], 1}, {
                  Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
            ImageSize -> 32, BaseStyle -> GrayLevel[0.65]],StyleBox[
           "\"uninitialized\"", 
            GrayLevel[0.5], FontSize -> 8, StripOnInput -> False]},
          "Labeled",
          DisplayFunction->(GridBox[{{
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}, {
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2}], "]"}]& )], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Size\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["1", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         TemplateBox[{GraphicsBox[{{
              Opacity[0.3], {{
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
              AbsolutePointSize[5], 
              PointBox[{{0, 0}, {1, 0}}], 
              PointBox[
               NCache[{{
                  Rational[-1, 2], 1}, {
                  Rational[1, 2], 1}, {
                  Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
            ImageSize -> 32, BaseStyle -> GrayLevel[0.65]],StyleBox[
           "\"uninitialized\"", 
            GrayLevel[0.5], FontSize -> 8, StripOnInput -> False]},
          "Labeled",
          DisplayFunction->(GridBox[{{
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}, {
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2}], "]"}]& )], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Size\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["1", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            ItemBox[
             StyleBox["\<\"Arrays:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Weights\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"matrix\"","\" \"",
                TemplateBox[{
                 "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                  "\" \"", 
                  
                  TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                   "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                 "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Biases\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"optional\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            ItemBox[
             StyleBox["\<\"Ports:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Input\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"encoded\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Output\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"decoded\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  None,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.753352352971422*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingset", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "1.9"}], ",", 
     RowBox[{"2", "\[Rule]", "4.1"}], ",", 
     RowBox[{"3", "\[Rule]", "6.0"}], ",", 
     RowBox[{"4", "\[Rule]", "8.1"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"net", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "trainingset"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.753352475234776*^9, 3.7533524843831787`*^9}}],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"encoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"decoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.753352487443179*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"net", "[", "x", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "5"}], "}"}]}], "]"}], ",", 
    RowBox[{"ListPlot", "[", 
     RowBox[{
      RowBox[{"trainingset", "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Rule", "[", 
          RowBox[{"x_", ",", "y_"}], "]"}], "\[RuleDelayed]", 
         RowBox[{"{", 
          RowBox[{"x", ",", "y"}], "}"}]}], "}"}]}], ",", 
      RowBox[{"PlotTheme", "->", "\"\<Web\>\""}]}], "]"}]}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.753352495206477*^9, 3.753352519822201*^9}, {
  3.7533526533112087`*^9, 3.753352721028308*^9}}],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwt0HtQVGUYBvBlWRBhRXYx5L5nv2EgVhDpMqWF51Waybg4ECITai4rtxAR
kJ0IMDYUuRi4AiKXYZZL3sYAKWQibVuRIG4buEElNG4s5IgyibTBAkGc9/TH
mXN+8z7fc95zxLKT78dxORxO6PrF3Os+lVn6x2bvXn9UOPkN0906KiSK+oBe
d33h4WF6rUd9hqI+YqxfKBqm6zQlIgvqE8bU2NQwnRwgP7EgKsJ5Wc0IrVtO
rHguqsY531JHbxif9JoV3WCsWZ0YpRv6VWlPRZ2MOVPF43RLa9F48vZ+xtLG
WQOdQI9UP0vXMYajzU/olGlvQ3vLb4wVAWF/0dbis16P3tSjv+54QZfaDUga
pAa07UUjLRs/8L354J/Yf+H6Ip32w1nZSa8Z7KtvW6bbUvkRju/N4j4fn1ul
G7KPz+yIeo7v3zXIgTzVSvjfz+Zwf9e3uMDR6eFu1jz29TSag2dGfOYBiRG/
l+ttAVPGywdtvvsH+8glSwiaTjpdlraI+4yKrGD/lHKbu/sSOqxpI8zclyl+
bF7G/9vCt4HtgjG3wKP/olUVfLCmjTET86vYd4prC+/ORi+QSA4w84elm+HX
rlizaB8zxnpesR3cLuz+kDKiOaW0AOIt5Hqtlot5KU8Ix9Kzb/NrzBlrPO4K
wS9hmzYkhof50FR7+EnoYyPfaYF59atb4E5LXq2PuSXOycwWyDaThA3+jq7X
tr4E1hNZ+1LaNzCWPkpzgOmr4gpVjhXu84fnVqh42YnXGbkR875Pt4KyJr43
hrLGeVKjI0RXHNHyH6Ol/INOsPjOFZNKbYNecHQGw/TezK4CPuZ1WmdoDPB3
GYrZhPubyl2gOV8uSPC1ZQyCEFcoiDwWbG5Eaz7nuMHrEw03CoY2o8O73aDK
u7Z5KNgO81bZ7pCrKakK7vzfe0QQ6hJ5pd9DgO4wo2BPSu8hQRGaijlMgcpV
5jFoRCtuqSnwuH+tcv8hIe6X6SwGpW+X5IEaDacyxBA/zxvpk9hjXjgmBlnb
C6roAhok/gSS8yJWgi6iOfdeISCPaP+FX47WR71GoNAoL1VWsvn8Nwi07DQt
X65jrQ8gYLq3Nnb1JlpaGURA+YBf0t3LzrmxBGqaTiSe62P7q+MINGVoA/cN
oDV+CQQ6HJRLA1o2fySJwES0faJulPU3qQS8DE6BkwbWKacJ7GjPcv9imu2z
yCWwK3/cFPeY7atVEAjxqrv1ZIbdp+8MgfTjlPvcHHveo5hAztufmb6aZ8/f
OU8gf9PkzxlG9nvDSwhUtTadX1xk87lKAo0KXsK3S2zeoYzAzfC4vTkr7Pu+
LCfQTnrcdq+y/zfwEgH1vKdpbY09/7CSwH8pa6wn
       "]]}}, {}, {}}, {{}, {{}, 
     {RGBColor[0.790588, 0.201176, 0.], PointSize[0.012833333333333334`], 
      AbsoluteThickness[3], CapForm["Butt"], 
      PointBox[{{1., 1.9}, {2., 4.1}, {3., 6.}, {4., 
       8.1}}]}, {}}, {}, {}, {{}, {}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 5}, {0., 9.294633865356445}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.753352506830278*^9, 3.753352521362048*^9}, 
   3.753352654230692*^9, {3.753352710151622*^9, 3.753352721791594*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:5355\:56e0\:7d20\:5206\:7c7b\:95ee\:9898", "Section",
 CellChangeTimes->{{3.7533528984955*^9, 3.753352911144925*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DotPlusLayer", "[", "2", "]"}], ",", 
       RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
     RowBox[{"\"\<Output\>\"", "\[Rule]", " ", 
      RowBox[{"NetDecoder", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Class\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"False", ",", "True"}], "}"}]}], "}"}], "]"}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{3.753352784104439*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "False"}], ",", 
      RowBox[{"2", "\[Rule]", "False"}], ",", 
      RowBox[{"3", "\[Rule]", "True"}], ",", 
      RowBox[{"4", "\[Rule]", "True"}]}], "}"}]}], "]"}]}]], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[SoftmaxLayer, {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {2, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {2}]], "Parameters" -> 
             Association["Size" -> 2, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]], "2" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association["Size" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "2", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Class", 
              Association[
              "Parameters" -> 
               Association["Labels" -> {False, True}, "Dimensions" -> 2], 
               "Input" -> NeuralNetworks`TensorT[1, {2}]]], 
             NeuralNetworks`TensorT[1, {2}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{253., {26., 31.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.75335280164748*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"in", "=", 
   RowBox[{"Range", "[", 
    RowBox[{"0", ",", "5"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Thread", "[", 
  RowBox[{"in", "\[Rule]", 
   RowBox[{"net", "[", "in", "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.753352831141079*^9, 3.753352831809579*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"0", "\[Rule]", "False"}], ",", 
   RowBox[{"1", "\[Rule]", "False"}], ",", 
   RowBox[{"2", "\[Rule]", "True"}], ",", 
   RowBox[{"3", "\[Rule]", "True"}], ",", 
   RowBox[{"4", "\[Rule]", "True"}], ",", 
   RowBox[{"5", "\[Rule]", "True"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7533528279608583`*^9, 3.7533528332700167`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"net", "[", 
    RowBox[{"x", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Probability\>\"", ",", "True"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "5"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwl0HtQVHUUB/BFQAKWEq0mk8fFITcQH0w2RaVnFRxJ0DJERsyCRViUN8M2
BlgbDxEc8EIMLNC6AmrjMEA0WGFCKxIoj21kk+Wx4mWX3WV/yQTR5i6gxD33
jzv3fuac8z2/3/URpX0Sv4bH4x1afdi3/CvR2sBTOXtWPxkqUQM9aio8ijoO
q45pOKOBld6ufIo6zZrnm6IBubLU25H6krVUkKmB5N2SlKfexayv7MjVgHop
sXLOuwa9n9aA04ROMOt9gzVz/hcN1PcrMv7y7mBNnXQehZbW4onk7f247+Vb
oyCGBzVPMtVYvxMzBqkGP317yxjOyxzHwcWnQPD4XQY92TEOZesG/Otj9KyV
x+ImQDRx9Df7QSPaz0MLGb8XiNIEBPsVw1poS+dHvPbhLO6jzz2C+pwksjNq
Ds9b9s4k5CmWj/z7ZB6tMEwCT80Ib2cvoPPpx7AlK+HsUX8L5ju8wcC0pfqY
a+d/mFeSw8BBw5lzFRlW1sK3xhg4PE1v9fJaRM/umgJyVyS917yEeYElU7Dd
fcQz+PNnmBdqnAIXsMRqF57j/Qfe18GB2einmyN5QjafqdbBaPcpu+gAO9bU
5Xkd3LzQ8xllQUubQvSQ4ChhVKo1rJUzcj3EZebc5NfasxaK5/SwQ7xVFR7r
gPV04TT8sT7AVRLkiPkhVdPwa0teXYD9WtZXPjVMQ46d/8eDj9DU30EGcNFm
h6a2O2Fe50UDGK77VCpyX0AbRwxQ+eZGh45IZ9Y8T4ER6NqEvljKBeu3040Q
XXlSxTehlW0/G8Eacs2m6HLF84fbm0Bv2He2u4iP89JQEzTsDtw0FOuG/U4V
JmgulLiLt72I9f0PTVAUGRdmb0EzI6/MwNva+htFQy9h/Xj0DMj86pqHwtbh
/IhsBr5WlsrCOtCUdXwGDm2KvNbv644+8LoZ9qb2nXAvRgv1EWZQeIh8By1o
ppc2g+/d76sOn1iP/8f3nhnobd3+w11oxvmZGRIWHB7c99+A/1O/i4Co7R+q
+BKaVy4mkJwXsXywHC1MTyQgiWjX8L/l/NFpAhcskjK6Ck25JRFoCbItVcu5
elEqAdudlZHrTWjmCwkBephf2tPH9e/NJ1DbmJJ4/j63z7OAQGOWKjh0AC21
rvqnV+nFARXn1vMEtNEbEtUPuX6PEgIC/cZgnZ7bN0cT2Nme7XXVwLm/nMB7
hRO2eBPnqxUEwgXyH8yEO09UJYHMJMprfp7L76wmkPvBN7YfF9DKKhmBQjfd
n1kWrj+thoCstfGi1crVfeoINEgdxLcWufnFVTcdid+Xu8zdT/0dgfbNvZ57
nnP9TXICXQtbbCsrXL3gMoH/ATdc4w0=
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.36573049426078796`},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 5}, {0.36573049426078796`, 0.8318501114845276}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.753352850395549*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "\:4e09\:5c42\:7f51\:7edc: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"x", ",", "y"}], ")"}], "\[Rule]", 
    RowBox[{"x", "*", "y"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Section",
 CellChangeTimes->{{3.7533530338960667`*^9, 3.753353101983631*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"32", ",", "Tanh", ",", "1"}], "}"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "2"}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"32"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"32"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {32, 2}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {32}]]], "Parameters" -> 
             Association["Size" -> 32, "$InputSize" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {32}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {32}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {32}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {32}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 32}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {1}]]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 32], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {32}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "3", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
        NeuralNetworks`NetChain`PackagePrivate`part$$ = {"Layers", "1"}, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{279., {33., 38.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.753352938050214*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}], "\[Rule]", 
       RowBox[{"x", "*", "y"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"-", "1"}], ",", "1", ",", ".005"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"y", ",", 
        RowBox[{"-", "1"}], ",", "1", ",", ".005"}], "}"}]}], "]"}], "]"}]}], 
  ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "trainingData", ",", 
    RowBox[{"BatchSize", "\[Rule]", "1024"}]}], "]"}]}]], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"32"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"32"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {32, 2}], "Biases" -> 
               NeuralNetworks`TensorT[1, {32}]], "Parameters" -> 
             Association["Size" -> 32, "$InputSize" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {32}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {32}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {32}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {32}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 32}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 32], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {32}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "3", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{279., {33., 38.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.753352992479122*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ContourPlot", "[", 
  RowBox[{
   RowBox[{"net", "[", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"ColorFunction", "\[Rule]", "\"\<RedGreenSplit\>\""}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", "Automatic"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[
    GraphicsComplexBox[CompressedData["
1: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
8hTTk9YqFjzNjVS7y5Kz4V/K6DcH/5358+1o6XDrNy9X8+jj+e019M6vo5Gi
XQ5Jnnk0rWxkR6/ua+jYG38qLy5Lp61nfbV/Wj6HximXGnVd+pZoWUTdb2e1
j7Y/PkX7UYd0EjwtqdWLCRtpSArNFk/JIzfPfc46IFhPT0ZoPzIczSMqiusG
llZbU8fixxEn6v2Ll9lJ3W/FNlTzZgvzc+ZiovK6u9NJbWf659Xr6WbpUqJz
UPvW6rxtNLIm9dONSgEJ0h/V9phDKrmWH9/B3CSXS/2GmoXZ/yclWiotFp8Y
mksmX6h+4rs7gxo5bG1Z9qiEmPe79Wt6noAMyemcUzezhLyI7dZdxyWVxNG3
O5ykAtKtZw+VecYlZLxV4KiL6fXrZROnbR+sxKSwLnfBidQyojpi2ql7hWV0
/xfF1nvs6/XS5ryuqkkBrSq0CFU+WEHULvm5bHxZRsbwxvg8ny0mxbbeec/z
19LLTjoz+0ulJGidqfXPxI+kYmnlNN/hUs5+naIDV29LkX3HxuS8oqP4iIRk
CzVa6MXI7steD7rQ0y9N/r1FqbTIu6eSlIxpWfsn8Jr8d3iCJ7h2PMWXtXPH
aqqiVqCUyx91NDOy9qGUuJbdOlCnLeXaXTNGcKWrZRWXGn/wTFFTEdCjtsE9
/EdV0dhSaepthXg6ev7SETdVq+iiVTVzTTbGkU4h3dKej6mibT8PnRgsjSO7
A+9EWyyT0E33nCONvvBJ2IRz7VN6VNFWJp/N9SISafpXRZvhO0V02Ldx9J5H
Et0RaZC65Ho5fTF2ndY5YSJxH2l1WdldRH8MyCv4U11IZg5Qe6F6rZz+7bmi
xkNBRFppNKTU9ILB1NF7quif1h1/3lomoH0DH/5d1rmCrkoVe28ZUkgHLlv6
dfrYLLJDtGty9soi2sp44oThWeVk/8phvPHWRfTeme9Kmg5FxOZvevgJ0yzq
8t1oqUmMhOaYLhnfeUQCvd+fzxsfKqIOvxymLrmfRI12tt7Z07ScavSq6nVZ
mEyf6z97cmpsOdE0GWQQ3S+FxhkaPr0XJiJSo3ueKslJ9KvxyWqdUAlpM/d9
Wb5V/Xw5QF3dvHMV1dpbMbqyfTxZyR+gqukioYdzde2il8YTg36mBl5HRNS5
5vPuhz8TSeXGah2FreVk4vTJjt/1kkleq1TfX5skxHt5etDE+vIznJTUjqhW
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
Y9l73+srIkZbjJF9d3B9X/+P8Zay73YZl+RM2Hj7EJf/acZP62VWAhKfovVL
yzRe9r0RVf3uJv3jafq7NkXblavI7U4HxAdd4mj1h9atP7tJid7dzDDlPgLZ
9wmnb5inV84nptknLr7pUEV+F5uleidXUaSQ+0HFkHnO16qo0TrdgR4vq8ik
xpRm/XbxMKuPE54Ocyc915a971W3iTi2rmUVyR3cYVhOnZScCwk0bvVaQtOi
PazLLKTkqKGVxuLRsve+qnX+x4qeS2igsqjP2/QyWqGxdov1NjG93f/63Hb1
fs3izM7WO95V0uV1eqIua+JonzPO09T31NtZu/sTB76Q0gNFfeLnmcfT4ql9
jzz0FZMHJUPab7tbRnSM8+/nvaskjuktvjmJBGSm7evlR37Gkj6OizS/WEkJ
b++GWz9Uy0jQnWKp3thKQpPORI+IEZBtE532XPetJO7al1bE5sj+DsqPmEFp
8wIltMN6A7ujExOox4Z5FQNfScjeg+1FR9cm0AETuwxwqH1Chjr4DrXrupub
1/6+Ejq9f1wZyUt7dOtZ/Tz1DPG00Okhe6e8/9P1A5mHqkj0C7c7m3pL5d7n
fsz7PKt9VL2837nOuGIr+/7FV9u2P01tE2g/60yeRn28uaaWOn6jjey7cjzD
oNgtg+rnHRU9/PTOS2mKYiul3qVCajlkziXjoRVUQX9J1sB4IXfO1PWlf6+T
C4tJ8sAD6bXDhHRqwYsHbseL5e4pTdy9dd6Z+jjbMkZjX3q+kFyosFb5PqCC
Zj+/wrN/I3tv67Zv1IOgWTzS/fZeknpWtq9cc69m/9XzfDr74YLYVStl35NQ
1iyINP4oIT0nvzp8ICSPVscusRy1RvaeFvoYM2K5a+2wPHrlunUrck9MC5eY
7M5eJttvX/dkzGCT0fH09aE/dQeDxcSpKni1cEci1f+YxhuzqJjwTR9c8tMX
Esf7FdEL6/nDugL8mZg8qutQKyBrY20vK6lXkOTbfduWJsnuDSZsWb6r/R0h
uareWSEpTkrC1/oO7L6KT+KOiO9OWs6ntyZbuH+JlpID26XtLYjs+1rWvyU9
LaZz+wuE5118Ql9lBecHNEwu+HfQWUGTOq+zjQuQfWf53P6Tarnl5TT1aMaU
IWsKud8PxJ1OaCcopG23Vz5Uv1BOw3q1sXUwS+LWJ+FLhDOWViaR00PabKw4
VE7dSqa2vvk8mVi/UGlZ/kDInZtqqnz+uUMgu0e2cOmOjH3fC2mJIPT1JtMP
3Pp/6oJLT9oVf6AnSt/8utq6iKtvd93x2ck+RVy5xSq5Kz28P1DZe5Xyp1uq
PnB8/jSKT2xzexPX37A9s2vq5jly+wUuC/1r1JNtufY6K+omWIqtuH0DLf89
774oWHDr/mAXx59Dj2+Svasx6Xd77S0brn+t14vzsjpYc+uGm1evaWR/s+bo
L1Y0ci19ZMf50U1v3p6cf8uVo8+bV5lpsySJO9cMl3R1TziYRF7d8RlSu1jG
563AGfsej8ikraf93RrzuZgMyf+5tyZL9i44131ZG5diId1w7+bF87oVRGHq
rDfbDhRy+S8jltcNOVxADdU1LOaMqCCZa82MHu6U9au0aOeDxSpJZNHOu2/G
nxSRNfZ+eWN9EshX5bVXfKzF5PngO9a5SwVy30sIWH+k28NuElrZv/vuaWl2
tFB0KEy/TEoXDbr4ZLTSCup216ttUZSEClSsnqm8jJN9ly/POaLny3p/ecz4
Zc5CKQ1S7X05fk4CGagVKf60VUwtrAzDDp2qoBMju2XdeCWkx4KE120nV9Dv
Htc7TPtaP780GWFI2xRQH+cTj0b6VlA97UU+/vYFVDrjwh3l/hU05WChxpcO
SZycVZRa39a3TKZRLd/em31RSNNunaWD7Ao5fbZ54jD1TU39fPtF1V3DoApa
POqJvvGGAmK+4H1NVr96rKXc8tsMB25daez0OCrugTUxC1OX0PdlVCU97Ehk
uh2pVdQQ9rrPp4PHqg8cemwTab3ofMUYex4d4fxTYpnnSJ7O84t02sqn31Nd
6jz+q+dvVFvjm6UF9OhrAS9+Xgbt9bHWLi26hEbbrf/xvn8mvazd6ckCSTF1
G7rWJbfvVm4f5d3jUxmj7roSfaVbg7P686hf3cBXq+M2k7q5W157DyqmRuUL
N7x6sY0cUugcfSk2j179bb1px5VtpN2myX29/Ytoj50nPqVkfODa+++8m8Hv
+ZlEz/HB1HEmJXSLv9FfrT2ZZGvEzjH7epbQTNEu7/PrS6j6ZcGZqSqZ1Kb9
0j5TOpTQ/yZ+TbxjmUnXZoouJTzYze1jtdZ9YW7ttIuMzRpp3rJ1Hk2MWqDu
Y7+TJIWO69xjSjbtXRfr0uPvbuIxU+WL1st06tc6tVywZB/xGzZOs7uV7P16
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
Jkn0/wC+VOzL
     "], {{{
        EdgeForm[], 
        RGBColor[1., 1.1812861799853636`*^-16, 1.1812861799853636`*^-16], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1:eJwtUDsOwlAMi4ryViYWNk7Dd2IpCwgKrLDBhRAciEN0AFSkViqCBVvxYNlP
sfOSDIrj/JCZWR/oAF83q8CbZPYBv4E7UOB9gXELfsLTgx5Dtx6eUwpu5Ge9
UX7KDHgF7wz6Ab30qNPHGnvzvxJoLWboimvpl0eWPWrV+L4he80it0+hd+CF
R7+JduEfnGeoeTgXM/RX8tGfI3fWvtybt2B9Df5pd95gpJ15gz9t4TaC
           "]], 
          
          PolygonBox[{{1654, 240, 676, 1655}, {1373, 235, 239, 1530}, {1374, 
           236, 533, 1531}, {1636, 678, 679, 1638}, {1635, 676, 231, 1368}, {
           1609, 533, 240, 1608}, {1632, 239, 678, 1637}}]}]}, {
        EdgeForm[], 
        RGBColor[1., 0.18056565590100287`, 0.18056565590100287`], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1:eJxNVD1MlEEUXD5uvzXc4YGYOyTIj40NP52xtREoIZrYaAyihYVaaQLGGMBT
G6NRY6LGBH8qjDZSKZ0/idJ5l9hIhZjYHLUWOpMZEouXfbv73tu3M7M7OH1+
6lwWQliAtcKaLSHsKYSwo0X2BZt7g8Y1WC/8Ovfgf4CfMs3pD8DfD+uDX8mU
0+v1EVi/bRh2ATlD9hl/O4XwCWvvYghH8hDuY/0oxrNRfTzJ/8tB/McWnc1z
h12fdQ5EnRkwtmGtgbg6ppeQv4r5xVy577G2ErTf5jrXMB6ClWHdsCpsp+9S
NQ4DvsMG/GKmXNa/ifGw84gB434E1eO5XayRq7eI3mYxL2TqoYZxF6wTttvn
s3bwXZi3jPkMem0PypvLdI99UfNvSfmsw7vdyHSfss+uuf4rxG0Rk6iRmBJP
5rPOT6w/h38V/mfX5jnsczxXzQmMtzCeMhcdjiGGrDltflejOCW3k0k8ks/X
SbkPorBkLLFdyKWx+VycDnnvb0F3v5wrh7l98N8axztJHFEzxIdnzhpb6vSK
ddCe6V4NrI9m4ox8jWXCi1g1rXv2s4j5dXMy6ljqgVqo2P9qHInrafS0hPWT
GH9Fnfc9CZsO80IO6G/6TVWsK/LzzPxR17GgdzVvTKaSNLDcKiweJ8U8StJY
l2tSg0+tz6p7pt/mfXJUt+6JA2OXHDNgn7p9k/tdR+Fa8VuuOpY9D7YKX8Z1
W//cmzaO5G7N/wAxfZn0txxEzcmo/BWc01PQetPa6bF/F3vr/IMQ+yeKpxMY
J5JwGLeOtqxhntc0d2W/Zd75GHJeUK+o9zuqz+NRvI6Zd+pi3ZjMmQPyVvJb
rFtLDet8W0+ML1kjRXPbaa5H/A/0Gf+i+1ny+oZjqPV+75cdw71+a+NMLk5m
ct2jZr7vGR/iRJ2xnxHztey3sOjeStbymOfb/xpjNv2GeS/yTT4fJp3R6X74
htp9/398I6ex
           "]], 
          PolygonBox[CompressedData["
1:eJwlkT0sREEUhe97dma2UakIktVISOhEodmGXRR2Q2gIz25LR4KIxH8jUWgQ
ib9qiYZKtpags7VOJEKik9D4bm5xknPeuTNzz3mZZL44F4tIO0iB6yDSBEn4
2OJFep1IY8q+qfeEfo1E1vAv0FlmVuFp0IlXA9/4s+gb/BP8dGR3XKEPQQ3t
0MfwIfxtZjfAAPzR2d314AN+FGw2oDvQg8xswS/BBPoT7OhZ8Acfxt+Fd4Mv
9Dg4j+2MnnXoZnI+o9fRM+AM3g9+nWXQLJk6kQL8B2TRmyDHbJez3TSzZteO
tCvN/IK3gK7GdkbPTqNPY3tD30pAQ2wzi/BWb13tgRFvGTXrMuhDTznLph1p
V5POdtWMmjVHPxV2raDLeHlvu2on2s0KuhTZTD7YjM4egFF921uXupPu9o6f
gi+Be/iYt1ntrAe9H8x74M4q+s5bV/pPb+HFYN3qPy8Ey6BZ9M425kvoN7FO
yvB/fLNI+w==
           "]]}]}, {
        EdgeForm[], 
        RGBColor[1., 0.43076308837683636`, 0.43076308837683636`], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1:eJxNll1olmUYx5/33fvcT6HkSUa1rX3oClzUQXPWsmj0MaOTHHW08mAxwRNH
0EHIsI+tqMMICio6qCizIkY6XZnBzOkWTpu10UFBMN10B3Po2PoQ+/+8/mAH
N/f1XO91X5//67rehu7ezp3lLMvO61TpLFay7IJOi86pXPxSlu0psmxO3+d0
ntf3F/q+WfSkfq/ortI5oLdj5eAXkrkoulr0/Vncc6ZXTKPnesm8pDMleq90
3iT+57prbIt3X+n7Tr27V7YG9N2vM6I33+v7bzn8VhGyNdZZJ94/Osey+H1F
52gp4sHPz7KwOyZ6i/jP6Tyr727dV3ReED2o+56UZe9K9tY83i9Xxdtl6/xU
dINktku+Xvc6nTbxVkn+DtFPiF4jukl2dkhmoBTv/vLbQeuE/tc+HxR9SPy2
UtiqcQ6I/7h09Ii/QfQZ0WvE/13f9Xr3bSXiHq4ETS0+KULmJ/mwJLm1pcj/
d45nVvdm+Tkk3gbRP9vHzfp+R/S86EzndB72ayU7ptMiO+O6Zyshj86ePGS3
GCezrvXxFFjYkUedb3CtqQO4wTY6kMduVyV8I3ZqAh7AX7v0jIp3l/Tsk/1W
nV7xh1LU8FXxy5J/UedwKXzcWxW1hZebD64XjIOZcuQPnCT7Q96oQ51r0ev8
g+XHFdsR3X0psDNu/JAX8gNO/8wDQy0p6kttwdBDkt2l72bXkZxUi35UctO6
H9bdKJmT5ZCbLEc9wNBTKXJLjhtkY7d8qy8CJ9BghdiG7f/uPHh1kunX2xPE
nwf+Lzj2EeN9dRb5gL8ni98WrOfjPDCzMw/8gqEB53DR8med9/tSxEie6AH8
WbDM1/KjVvQvkj1djtiIa2sRtewsItZJ4++c5wN532hbLe7vWvf4tnLUn36Y
9zf02hR4YW4NSe96ye8vAs8/GtPoXjFGl02j80m97dN9W4o5Rp2u9pp0bZLM
aBGYRH936Vq/gRNmBvWg5uCCfgYbb+vNZdE/5MG7bD4YA0NgD7+xBR7IMz4v
la75R19gb8QyyI4ZQ8R9wrkYNx+fmUmNxhx28Qmb2JqwDFg7ZRreSdOvp+C/
lgLv2AUn1KfJPb/LesAzMxk5MEr+lp1PevkZ9zMzKhlX1+WBEeblvhS/7dfd
4xl2zDti2TWaymJm0CfkjNmNDDGN/S+uXvfXgyn6fS4PHX2eaX8UMX/uzsMm
tkatG/6098KUZ0IH/V0JX5kl1J550l4JrLe5r9ud5zdS4PvNFPvgag10r68K
vdSd2TzsOJnhzCDiY6eRR3JYeCdV27cZx0sdkIP/axFzhnkDpvv9tjUPrD+d
op4TnieH88DpAylmPXP3/SJ6rNf7ZZP7rc1+kiPq1Wh5dkWb9yjzeWse+Wu2
Dz32ecK92Ow5QC2wPZ9HnqnDb0Xw14l3qRw+MDuaUvTA7SnmDvPnoxT5Ah/Y
495uusvzDP8+KGKGv1dE7dGPHXbusv8DPJLCB3xhPuEfMbIHetyPM8bAlGPD
DvunzrNuWjrP5/FmXPctnvnUhBjARLP1nPGOoX+ZG6vEPyq5VvZPHnvskvuo
wzlgb7Z4d4EFeqjLMZIn5KkX2OQNOaL/BjzXN3petnkeHfI+PWt/iIv89fj/
A+87vK8XjQHmNnerafA17/oyR7d5lg47hwe9O7qMjSu2ze6jftj4pog6DNof
+pX4iX21Zxz56cyjZw6kyEG37TJ3lvx/gxxcdN6+LOL7Q8k/lkLHjSl+73Cf
lr3/iYX68c3uejnF3HxF93/JsnPE
           "]], 
          PolygonBox[CompressedData["
1:eJwtlE1sjFEUhu988917CWGjRVJtZ7Qk0rDQVjUh8ZOosOmEHRYWTWqhkViI
NEr971DRBLFhUSUsTEuiWOg0WqSi4mdhpyRdkyCknteZxZt533t+vnPPOXdy
+7sKBxPn3E6Qgsbg3GzGuX74Wvg871wrvA3jZOQXOOzPCdoOvwh+Z50rcfYY
3/XEJNgGcGuBV4K96EF8tuGbR3egj+L/Af8N6Ef4es42wldzNobu4Huf8V/u
zXYEtIZyDdgqiL+J7QRnE9hWEVMF3wx60HNBA/Z+cAjfZcTcJ/adN14F7qFH
0L+o7Se4EO0b+pbuUIOtGt2dsRzKVcCniG8Xuhfbe87yqd0ph+4D0/Cv4DJ8
kXpIbTP4V8Afgjri29DD8I/k20P8MD55cp3nbIrYHeiV8NvYK1ProXrp8BmF
XwHN8AOgOWs1tePb6y33X3QfejEx+xKLUexp9Bv4JDgV7A66y2v0Sfg3b7NU
TapNM9PsGsF4sJlpdpuwv4rWc/VeOc8Em9n/2eEzg+8Nzr4nVqNqfQkWptYj
9aoHjCc2w+OapbdY+dwi1zNvd/kDLkWbkWalnXuCrRZ9DD5CTDW6BTQ4++Zd
bEPkrM3aTrVjuxat1yn5r8O9t7urR+rV7mC91Y7vghfx+QGv04zgNdqRjH0z
B2/C53Bib2aptxpUi85kG4oW24muR5ewh9RqKqK/aH7oJjAabSe1m7rDlLc3
pLcknxK2MbAuLdeA/ROoR78l/9lgOZRLPtPYHkR7K7qD7tLJWYQvwX4HfTVa
L1STalsRyrWmlnsg2u5qBwej7Yx2Rzuv3dcb01vTThfg3cH+G+ZT86zq8vYt
zViz1s5od/SfMgfbGrAgsTertzsRbNdU44tgd9Ld9CbOwbdoB53FbA22E9oN
/Yc8Jdc/C1yVxQ==
           "]]}]}, {
        EdgeForm[], 
        RGBColor[1., 0.6630388341985513, 0.6630388341985513], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1: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
/wJ+zADk
           "]], 
          PolygonBox[CompressedData["
1:eJwllWtozmEYxv/v3vf5P0NRbMak7TXMoRy2+bCWQ2FKombKYTlrI1GbnGJj
QyPlMErNfKBk82UmpxVmMuaDtBLzwcyQbKlNodT4Xd0frt77eq77uZ//cx+e
N755d8GuhCAIikEMtLkgaOe3JhoEOT4I+sIgWIW9hrVRaC/h2fBUeDt2Kmtn
CVAGssXBFLT+SBCMwx6BfgZtB8iET4SH2AdAHnwhOIpdCRZj3+DMZD4kBbzG
NwmeQ6wyzhyNnQ4uEf8wPI7di09XxGIsYv8w1krQPoJ6tHvwcei/wX3sufgc
wrcd/gj9g/xjFkOxMtCL0X/CE3U+vAheBfJ1d/zPE3sQtKC/1x2wk/B/h53O
WhTf8awtwy5irRttBViHPR80B5aDBfIHufAB9Dj27dD25sGbsDs5bz3f9wL+
zVnOlDudobPeoq9FrydGmjMf+eqO8/BNA9uwHxBzFb6Vqhd2BriLdjy0szfh
cwK7FvRjD4DL2OXs6cK3GzSwN9lbLW6rvvA78KWcncE33MV+AwpjVqOx6LnE
2Eesh/h/hTd66410fJq81Vi1Vo6T8S1h7R12HJ9ibzVT7TLxaZbmLNf58Ffw
q+z5q97hm3ah1XvrTfVQA/YDb3t34jNVvRbaXX8Q4wj2dPAHezV7poWWI+VK
Ne2EbyXmP7SN+DyB16EnxmxGNCuzWDuFnc3aU+XKmZ0FWuHD4UvQl8M71DvO
YmURPx+e4ax2qrFq/cTb3jHojeoHb7nVHXXXCm+1mEGMfeydqXoH1sPqZeVY
uVZPqDcUQ7E0E/vRulWDiNVItfqOvjJqM74H7Zaz3juI3oNeGlotWuHf4Z/Q
azmvEv7N25ugt0E1O61+8zabFaAc7bGzWVPP1aB1OMv9HPhNb2foLMVsdBZT
sTXzPfBhoCpiM6nZVA6VS830dc13aL2sHBTAs+Cl+A6ip+g+3npNM6BZUM+o
d1SToc56Qr2hHngPzwntLVOOlKsW+IaI9cAW+GcQSbCefqZagXNRexOq0Eqc
1VYzpFnSjGhW9E36trrQZktvZAytz1tuL+r98dbD6mXd+Rr2ZPx/RWzGJunb
WCuMWs1Uu9mh3VU9qF4c6ayX5dMLPxna26sY1djVzt6iIZx5hfMueHvL9Cbp
bdKbqbdTM6/Z3+us126AofA2b7VVDr6gTQjtrdQbprfsubPYmhHNynZntdZ/
xgv0Y87+W5Qz5e4/mK/RTg==
           "]]}]}, {
        EdgeForm[], 
        RGBColor[1., 0.8831337913961667, 0.8831337913961667], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1:eJxFmGuUllUVx995n/c5hzGzCxoILQEzheFuoRkWl4Ci+hAsJz9owRIYYECI
uxI3rQ8loKZoLZmBgUikcIlaS4q0MdbSFpSJiDBQWbJWIrduWg0E9v+5/y4/
nNl7zrPPOfvsy3/v8/a5Ze7EOdVKpXK0rlIpRGv6U2jMEj9ec7tE92hsFN9X
Y5r4tfq+RuNRvmlueyXk7tTcHRobxM8TXS66RqOn+NZKyK2txPwKjX21SqVZ
32ZqdIi/uxJyP60LuRaNxfq2SOOeSnxn3UqNCZLfJrll4s+JDtb4pvjNov01
ZlRi37stv0XyP9So19wHc5x7oeiOFGufzbEefqnoXBlli/gWjc1at0kja02b
6EaNUvwC9tT3ARqbNBo0pmttm2g/jSbuIJn1GnXYRbS1FvZ9QGOdxi85U3OD
NAZqzQaNqzSmav5FzY2WzCiNGyoxN0VjUhHncc/7NXr73Juws9f/Bv/oDuvE
f70IndCvsRI+ZK/z1eC/ir+qYUdsekrnntToa93RF5tMLsK+3Jf73K65Zo2v
FREf3PnmIu5ArMzQnqtF79R4RnZ+Q/8/KNogmWPi67V2K7Gm793FX4Tuotdo
rJdcYo+yUukhOrYSNkDfRus81XONHsiM0+hVF/PYCnvcVxf8rdWw11qNeb4f
NuhaF2eyfoHO3am5NxQPI0S/V43cuEnzLeJvFq3LYYuq6LkU9j2fwp97nAvX
5fDxMNGrc+TSt3WXv0puguZfF307hS8r+n5DGee9JfpSDrtdVIbsXXVxp1bN
HxR93rLo9RWNmbWgnL2+GnyH+P+kiIn/ip5N4af/pcjR7c61jxaRnz8Rf2WO
HL5cdEld+AO7LNF50zW/UvOLAItq5GjS/1M13yVH/rY4vztTxMEZ0aE58GJg
DszYZRxYZEwgP3vmyPNuotdrn+G1iAnuOt73ml0Xc8THk5KdVI054qGv8+V4
ilxYIH07bbN3/K59k9Zs1fdZOTDuYfEzxVfF/yhF/vQ2bpC3/bz3CH1bTh5J
9iMa8yV/sehRjZ9J5vEy1vR3Dp6oRZ41OT6vsg7gFZi4WvzTWnuB+G3ae0iK
3Bsq+qZzZZzjGZ44b5fsSLDVPpltO5AXdzg3atLjFDFC/Er200X4kLlbLd+Q
Igf6i14i+bOa348uZZz9gvhe0vOyWqwhL5Y4BubqWxft+YjWXleEDuiywj7E
7+AlGAbenjGGkGvE2JFaxBlxctixAj1inm/8T0z09domY+BxjWsrYVfsi50X
S59XtGZsGToft969y4jl4Sn2OOF9LndsX5Fj/pR1Q3d0Qn/mz3gNvl3kOH8i
xR2eFL06hQ97lnEGZ10hfqTjhHj5kMZeamaOO3X4XtS70xqrHCedvkunz11r
PO803896Yo/BXkudIKZaHVd76+Jc6vB+6fiS8Rf90POSHHG9zrHNvbgTNqe2
bbG/qKPbXEPXpJDvWkY93OqauKqI9aw9kULXD5ehe6ftNsy4d22OnCf3B+f4
fr9z5Lki8hNcPusaO5fanuOsbdqzQzKHXOdWWNeVjjP0p6/YrT1pWp7S/Q+I
vuw6tKMMPcnRfUXgeavr00bn9cEi4qfN9+S+J1PUts221RFisnivp9hk/YnD
Nuc42LPB+LM7Ry6T08QisUvtptfYZ7+zjnPRZUwReUe+H5YON4I7KezSaf/2
17qJthd4sNqY8AuddaW+7czht3P2HRgH1v1T9Nc55l8tI2/J3zdFuzk2iGUw
CCz6t+gPqnF/7r5bc1907ZmqfZ4X35SjD6p3b4c+ja659FYt9lWr+yP02ei+
aZnra6Nr9nNl4Ds1jb6AfqCb5qfn6F1m5MAgsAfsatc+v6pFv3BLjhiaksO+
Y90zPGH82iH6B+PbwBR14C73BMdy1K/X9L2hFnhIrg1IEYPP5PABvvh5jtpA
jThtfKan4d69UmDS45LpKX6y5nukwFt4dCdX8Tt9KLrQU2KjrinuWpSBo9Qy
atulKfjuoo9Vwz7UvuWOe2L+k+4BsN/DZcQD/QI4AAZQX6mZe82fq8VZnEne
cHf2wZanXBcmi59Ui/UXuje+KEc9pi5fmqOnoN+grxhSBr6Bc4dS9KiHU9RU
auvfRY+WcRb2ftC93/dFx7uO9XDtwS74iu/31iIOoPeYZ2/yhBj7huTniI4s
o0fgO33jbTmwYlwZ9+jp/oacIXfw//wc2Pi5Mnpa+nLeOB32YyNxmEL+GH5M
0dtebBt/qYi8o5/a5z4bPdG7SyXeAg/h60r0xpwBZjLHN3IL/EBP8KOwDDo8
UkR8bzV2oycYT22k7oC3YNxD3od+r9k9H73nQeMYNrne/qbXO2A85I2ywLph
G2xE3RpWhiwxQh/aYbwln0bZ5hfILk3iF0v27WpgDrlBve3lugx+bDEuEPt9
3D/sNEY95Twd7T25OxgBPpBbLX4fXWa8JJf/lsI2zVq7MAe2jynjPvDgLnvw
ppotuYVl1Dl6wFm2BbFxIkedOJkj7uij6GtK68BaetX9tv0R9yfY6R8pvs/O
0f9OK8Kn5DB4B178i55KdE4OnAPv+J+3Ar04+UJObPA7iu9tljmYQp9XRN9K
EdvEOPV+nu1M/7/bOExdpD6+L4f+7AWugvdtxtwfW2aF/fZaEe+0NTne6x/P
8S4kjsD5VTne1h/IkZvtzk9iC/3Bn+/meNP3yPFeXec+nvtSD8AnKO9k7lDv
eXj0po6Q7xty4Np3pOPHvCd7E1fc97z1IlapQ/Se9LH0meT6cMc2sUbMzTU2
ch515/cp5F9IIQ+G1Ps7/kKGOfK2i3Xr4bqA7tRHdIZudt2qs99vd4+UXfuy
3z68gbA9PsCnpf6fIr4m+no14oAYINbL4j1/wRNbxEXNfHsZuP2JHH0Z+9BP
jyiip8ce9N68f6gbD9gfQ9ybZ+tAv0LfQs+C7k3Wv597yRttt3nWh5qHLUfp
/DE5bPN0CkwCm5JrC7gBrvIGYi11pH8R7/l69wBbnBd8R44+Y6BrIf3bQs+z
lvqw0Dy6NbjvJR55H9Kbn3YNZf1Q98Hs12oZYuga2wF7MLfY87xz6fmJe2od
NY+7tPi3BX5j6O74Jw/43m4ZsOpF49tv/eb5XQqMRo66SX485hwBc/jGPPnT
1Tg6jv5M8/eVkTf0xtROMHyd+WmOM7CFNxh9xqEycBF8BAdH2P/sW7V8s7G3
3nFLDpFL+HepcZa4o7d91PmOP7fZp9QU+mfqAm8VdPlUjlrHPtS7l1OcfUB0
Shn+bk/RQ5Ov9MDInrf8n1zjX00RL5Nda07bd6usA7bq7rqLjemn+M2FXn20
zhlkvAK3luaI589r/i8p8OTPyd+LiMnj7rfffbtCqSPfKqMf4jcYagm2/EwZ
tZT7zzSe4Y893o83C/F0PIfM/BT1Fpl3/OV+mL4YnGnwXZbnuN9gyT/LWwKZ
Mu49xHff5TPYnx6C+9Lv887r5/int6Xvp39ZRi+r/79QRo0hv0eUkRv0lcQu
9R0ZMPPLfv/yDsYn5Ds+oiZMd4yRmxNcOybWgidPB7lXJU9v89uP30eZa/ZZ
3HWA78s61vP+eL/vjg36uDfAD/QvvBvpYfjNjDcV+LTd+YkP23PY549lYOpQ
5/i7OdzqGgxGflYy/wc/+sPM
           "]], 
          PolygonBox[CompressedData["
1:eJwtlllsl0UUxb/235nBGtGoQAETJFYUKEujghiVioCiPmBDghEUpCAIloa2
LG6BqA8maAxbNBF5kchSK1sMqKDFJmIsapCWliKLGMUKuIIbAv4Oh4ebnDP3
zp2Z+93l6z2lqnx2fpZly5AC5OeYZfm5LJsJPglenrLsOQya8rKsIWRZG3IK
PBKbSvBG9L3Y2BtpgV8Nr0ZXizwLfxy+C7yUPQ/h72HkDfytRCaAN2HzHrpF
2CwEd0VWw6vQD0T/J1KIbjb3OQ1ux99kzvocmw5sR8HXoi9CvwR+GhnO3rHo
d4O3sOca9HXoH4BXYP/pxfs8Br6StWXgSvb0w/ZXpAD9LOx/AZ9COumt8D/A
vyMR/iT8N/Bq5Dx772etCl/j4a/D65G58MOcMZP7NmE/GN4ZWcx5M9AXY7sT
/SD4WeQT8AzkM3wth7+M/gS8kf1bsf8JXMP+a/N85+Poh7K2Avvt+B8C/pi1
fvD+SAW2u5BWbDewf5X0Og9/pcghdKXYz0G3Dpsj8CPw+9jbiDyKbQt8OPgq
9HvB1dF30Rv11mZsyvG1mPO7Bb9Zb9cbpie/UW9VzhTq/YoHukXYXwaeGJ0L
x5AV4B7IZPBJ7AsUv+DY6I6N2N+UnItjkBfQFWE/Cd0WfI5F1x2ZB34V/0Xg
o9hk+hbIEGxfCo6FclC5OAibV7Cvx2wgeBMyNHNObwYvRKajX8N569lbDH8e
vgqb68A9krHO7An+Ap/DwJ2xbwI3RH+LS7A5p7jjY0m+c3Rc8J10N9XAxuCc
Vm6r5sqia0C1cIa1Lug+5Iy++BmPv3b4CGQb+j2cMSe55lR7evN34BxrA9hb
wVoAf4+/XvByeAf48uRY6ZtcodipZsHTdOfknFZuK2ffBpcF16Jqoiq5plVL
ukMNeI3inXPOHke/Q/XDUgf6j5RLwbWkGqpEf2dwLV2oOfgdwbWnHvQE/C54
VeYesAP+ZnRuRGQluEty7qnndAX/GP22/py/PbknqDeUsLZT3yJerHX0B9BN
DdapZlQ7+mb6drfBvwJ/GY23IePwV5AcS/Uo9Sr1QPXCEUgbtnXwoznHsBDb
fayVgRuQCck1pFrSWiv4oHI+zzX3rfpbtC/l4P7onqreqproCc/Bu6G7XT0Q
f/fA27E/gDwDr1f9468NvgD+FLIfPAk5j24+vFW1jZyF383+r8F7kRp07ypG
efb5NPwdeF/4Pvi8ZBvZTkT+QTeS/c3gFmQuuvWs3ZBnn9Xw0cF30R10lyz5
LjpDZymmiq16THN0jBSrMcih6BxULqoG5+Prb9nkfIbO+jf6LjfC68ADomtF
OVMS3eOVn5pB08D/sfZIzm/S285Fx0IxU+zUQ9RLVMO7o33Kt95Yq/4cnHvr
4KOTe6R65YPID9E1qFrUHf+Cvxjcq9SDb0Y3KjiW+gb6FkuDfWmGaZZtRfoU
eKZothyOjoVyRLnyfnLty+YD8InoWaGZUBuc08pt9Qj1ioPwwQXu+er9xcGz
UDNUs1Q9X71fPVy9XDNTs1MzS7PrwowAT+UOSbMjunfLZ0NyjanWNFOngDeg
L2H/N5r/8HuD8VusrQ2e8Zr1msmbsb0+ufeqp/YBd0o+Sz1LvevW5NmpGTcM
fGlyL9bMXICvfP0P5Hymzj4W/S3U49TrVBOqDdnkJeeoclU5cAb9a9G9STV1
i2KVPEs1E0qTa0y1Ngt/e4JFWDOnO3v/B6W/Kd8=
           "]]}]}, {
        EdgeForm[], 
        RGBColor[0.8934566538346175, 0.9469893787723689, 0.9020796366566431], 
        
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1:eJxNmHvQVlUVxt/3Pe85u0k/gUxGSpxJgWrGvCVippagqTDTh+iUhqJ8TTbe
FTW59IcgYDpT3hoEq9FqQEUE1EQrCWqyiyFGJmKGgoJSI2Vy8ZKXnh/Pw+Qf
5937rHfvtddee61nPft8ou/ScZd0Wq3W1narVak9VO10tTfpeViCXv3ZI1lv
cb9uWq1Feh+h/mFqj6kl19g91V6v93GSD1J7tN4/K3lR+7Dej5L8SP6X7CTp
PU3t9yW7Vc9A9Td3W61fqr9K/YVqH9KjJVsv6OdFzVslPUslO7XtMfM0fpne
z4qtd+q5Aztk32mS76H2TK0zT+OH6unR+636/1rpu1nv++s5W+8bJT9Z49ar
PUPtXMmH6Fkn/XP13Kj+1yS/Xe0wPadI9o70T9DcU/VM1HOuntNl39/UHqb2
qxo/R2MPbHst7GG912r77RS1P9KY+zveE/7AL6P0rJX+p/Wco35vZf38xyG9
LR0/0DNBz6vY0/J89Dyn/sWN+zdI/yK1t+kZL/mTkh8lXX9SO0vt4vhqpHQs
b/n9Lq25QM88zXmv5XPB/5uKz+9B6fx1x2c2MP6f1PUa2IRt+GEfjbtM7cFa
69OaO1vrfVLtCj3vaMx6/f+C5o2Q/AiN+4z6B3U9n3PmfPFjr2QTK+u6NTax
LjHEWd+cmNmk51nJHtF6Y9TOqh1HSxNLzNvS9tzHi/1W1V5nXWLpw+yj8vtV
GnOlZCfU9uWj8e3KjvePnhUdv9NHz9KM4VxWRD6/8phaspekf3R8XWfMUPWv
01qL9b5Ea03R+FuIz5bz7+bE9VD9t0Rtv8bxcazGnaB2ePr4kHy7Rs/IyI7L
mF9xBuovV7ut61gk5peo/xHJv6X+R9Xunf5qtU98IGdoifMXi/X/WLbcp7n9
NeYqyWfqGaD+rJYf9MxuOX/mZi3WGZDxqxrH7Nhi+4h79kQsEJ/s6TeVcWRs
y3sbEfmw9PHbebX9+LvGGECOnhWf4bsZLWMU+IRdmyv7d2bwCFxao7nPNcau
s2TPXxuvc7r6JbH6vMa+1Fh//9rnMyNndHbbviW+sAN7vln7PA9v2w+X6P99
9FxHPMhve1S2j/0Nyh6/obUeI8+Lz5iz/q76l3Vsw/yc67jgzcr8d4jGvlx5
b+zzTcne6Hjs0q7XxYYFbY+fn/w6MxjKPm6Jz8hV8mxg7fgZFd8/0ziWngJX
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
3xvn6M7gw/8AUHTtgg==
           "]], 
          PolygonBox[CompressedData["
1:eJwtlnlslUUUxb/3HjNjsCAF1KJgIlqUBKRqKnUrClUJJhaLcY3RVMVQoS2L
UFtJUBatGoGgbYwSRQXUVI0brhAwGjdacMMFccMoGKsIoqAs/o7HP+7LOd+d
e2fmzl3esbUNNfX5LMsWIT2Q/fxsy2XZz3wsD1n2d8yy3oUsm45uL3gf0gc+
A/4PeAdyGfw4bFaAh2DTBT4T+4vAWcqy/uhnAg+iL+JbNXgc+2xE9wffrkBf
is0T4Nl82wK/CekFXsf60ehqWb8ZHpGp2O/jWwLvkU/WTuPbX+DXkC/QXYi8
Cl7DmuHY6pLD4L8il7J+MPrl4ANIX/jNujv4Sd0B3TBsVmM7Otj3Svh2+Ffw
B9GPh38Mv/7/87yNjxvA9yA7wfciJ4H/xN+VBfuU71a+dcPnKmbg3sl3LUNf
BB6F/054F1IPb49+iwPs0QbuRCrkD74ePJk16+GXI7/DB8Bngcvxd2SyD/lS
jHdFx1ix3gBvQNcPaQTfgb8S9j4G3gxfAh+U/KZ62w/0JlqLbCz4TrvRnY3N
e+D3kbrkmCq2+jYJPhD9K/AK7jAOvDP6rMfzbSX4UGQCusXwYvRzk/f+kTXz
wCXRd/0F/YBoG9kqRlPQnxv8VnpjvfXT8G3oRuJzB3gO37YWHJMS8OO6Y857
FuHrU6RS8WKPT+Q7+W3OYs3g5Dvpbsrx39CfExw7xUCxqAyOjd5Ab1GsfMb3
99iXofsJPh7dBN0JfAhragvOGeVyKTKv4JxR7hSC73oVPvqx/gX4y/AW9LPB
o1izFPw6+lZ4hXIE3pP7PwyeiDyQt3/l5of4OBW8h28fgRdi8xL4KWSSYo/c
B16HtICXIXvBc9jzUdaORZqwP4I9bsVfJ/wN9M8hU1RLSDu4A2lEtyu49lWz
qt3DsJlc8BvoLbqiY60c3gBezppW1r4Jvxr9s/Bn4A3wO+F3Be+lO+vu85FT
cl6zIPnMOvtapBncHGxbj/RFfwF8VuYe1Aw/AVmgfNd5gvfU3vuxfwz7pYo3
fJXeDN2N8MBedcg76E/UGTP7GJrcE9QbFPPp6IcrJ1m7EP3J4LJkfBC5P3lP
7a2aeDG4plXbQ/m2Brw7OHe+5Nsl4B6qucw5E8Cro9euQKrg5wf3VvWwJvh5
wb1MPXomvCq4V6uHz0juueq9qgHVwrLgt67h/D3xPSa41//XU1lbrvU559jp
4DGq8YJjMjG4Z6l36Y37KLeDc2sJcjH+RiT3QsVEsZmKfhD4c87QLc6aVXnn
kHJpBNKY9wzQLPghujfIZlqwjWwXwreiOwreVHBPVW9VDigXdMZFrL89uZeo
J6g39Efac54B3dE1rlpXDQ5JfiO9VRtyGvga5K2Cz6iz3pbcWzqw6cBXPrk2
lGM5zYfoXNKM2wy+Lnk21OoNk3ugeqFq+vngmlXtqmeod2wJnm2KwdrkHFQu
qoYfQjcy+Wx6E71NxKY675xV7j4SXeuqYdWyZoBmgWJ0NHgT36oy97zPwHXR
tbsJuRv8bXSvGov+O/D84FmqmX5Gck2ptjQzWtBVJvcizdx31Xuj76qetx3c
Flw7OmO16jn67RTTa5N7mnqbZs5AzeroWa0Zq1mrma/Zr5orDe6J6o36j6L/
Kt9En1V3+jo655R76mk10TNas1o1dDj2xclvpx5yS3DOK/fVg3rB/wXKtiRj

           "]]}]}, {
        EdgeForm[], 
        RGBColor[0.6662946128973792, 0.8339649493469283, 0.693302736108909], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1: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

           "]], 
          PolygonBox[CompressedData["
1:eJwtlWtoz2EUx5///nt+jzW34YU0SmFzKZeJzNylxIa5LJciicbmVpZbGMY2
DQnZLOb2Dsvd9oLclcgUb+yFy1ghM9NeEZ9vx4tvne855/c85zm3X9/l63LX
Jjjn8kEi2B2cuxRzrjnu3F7km965VuQxOLUi14Jv8K9gP/YK0Ia8AHuXyLnL
2I9xzhd0+7B5dP3gV+Gz4FngBbwSPg75uDfbcPAE363wjJjdUYo9EV0OZyej
q8JWDn8Nz+aMrvAb4Ae+LaAc/87YzzvTHYAfxH4e+RyYDC+Bn0AeAG7jOwB+
x5kuE/sHsJlEdOO+s9iWwO9hmwbe4n8K3Q5sc4hhIbYAL4KPhGciT0E3DN8l
6A7D50Ym/+GOXOQ2dM9jdmcO8lgw3tmZLeLBclOl/MGzwKgEi0Gx6A7dtQn/
auRk5YfvS+EdkU+iS0GejU8H+GMwNG4xrcTWCT4PWx0+vb3VTLVTTP3hH+Az
8c0BG+FJkb11DUhHPoouP2Y1ySaejt7uVoyKdbm3ty5Gl49/JfiOrQVURf9z
ztlpoE4c//v4lsMPcV6xN7kMDILXR+a7k5p8hl+B94IXgi3eaq7aq0fVqw+x
93B25yPkpdhTY9Yzy5Az8DmCPBHMRz4eLNcv8XkAzwkWq954DB5Flmv1sHo5
HXtp3HpevV+OTy72JlCIPUSW+53wJGyn4e3wsfgXeMu5cr8d3pvvf/OuCuwz
wF9sv1Rz5Kn43EdOw2dczO4cqH6OLFb5HELOxiczwXJ4C3mGt1ktAqOx13iL
5S7fL+L7OvgV9Rv3ftIsqkexF8DfBZsxzVoR/H2wGBTLCngj/Ax8krMZ0ayo
JqrNLtAc7AydpRkfge81MFrvRdcU7AydpRjSsBXDm4jtKHy6t52i3aIdol2i
mdXsqqYVqgcYjjyBM56ptvAz8Dz4G/gFeE/umwlvgPcJlmvFkBosRsVaje6p
Zi+YrBqWwYcE6z3tkMHBcqBc6M5KbzlT7sbjXw8vCbbr1JPqzQ3osuM2Q5ol
7SjtKuk+RvaNvlXNfnp7s96unfsDuQGfrLjtFO2WlGC9rhxdhNdEtpvk8wrZ
RdY72nHadau87VLNvGZ/NTgcsxlY7y1HypV66jq8O7w2Zjt3m7caqVbK6VV4
u7dZUY+oV9RD6iX1tHq7MbLdqJyfQ26KbHdoJ6V4q4FqoZ7pBM8LNgvaeQuC
1VC11M7S7toT7N+jHaVd9Q/sg9O2
           "]]}]}, {
        EdgeForm[], 
        RGBColor[
        0.43366051429484276`, 0.7182177062837657, 0.47949663197075654`], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1:eJxFVk1vVVUUvffde86hmNCqfwCcSNDUD2IA4SmUtCTaOiCtpSSa6MQmEEi0
DjFhwkDoI1VUCkmhGiAMLFDwA6sE22cqMZHgSNraYkxHkBgNMCgmslbXSjo4
2fvss+/ZX2vvc1e9vXf7nkqWZb9jFVjt2HTn4LFqZZbdwn5bLjqHdQk6LZDf
Bv8s+JdA/8Kagc6diuQrId+B/XPgH4Cvgs5i/QbZ5lz3XLStS7Y3EKWzOmRZ
B/Y3wV+Fzj/Yj2H/dZBsyvK7cHay1D3rgmzmQefT1rmRy3Yb6D6sF8A3gvaX
OuO39LsL6zr4Bawh3Ps46HuQrYX+ctCjUbFNgE7nipk+Ho6yVQP9O+j+jaBZ
KT/anZOPnK8unP2B47WMMWXZedg6EhTHz1gvQ7+ea0+evpwoFq/LTif5+WZU
vked84FS96/KFCdz/CP4edCd0OkEfRTnj2HNQj6F/fFCvh0IohuT6jRkWw2Q
rQfzTKb4B3x/NenbTaD3CvnMOqyGT1V+F+V/V0V17sX+LPh3ovym/29E1Zvy
BeefsfBsbxS/B/Q69t3gW0HfCtIdi/KXOGC9DibZWgH5COjliur6P/RZhv/g
3zqcnQL/KgS9uTBHbB/Gt/fh+7dBsZBnzplDxkRsMH+PlMrZtaDaD+O7b8CP
4rwDdDAIK39CXoKOGD8NQf2RYP/5oHrcgs54UGx3gzBNbH+YhJMvC+V5EPsK
7NZx/qT1Z5L0qP8Vv4Pu94Xy3h/Uby38DvbeJWZpE/sJ8JfBN7kHWNNfIO8D
H4PySx3G810hDO9z/zOWJzL5xdzRN2Kz7t55Janv2H+TFeWWer863vtBOKDP
rEHNfmbw8Yr9b/RsYbycM5T94LjoA7HCfF6A7FyxlONz9o193mrMs46s3ajn
Q5vjou5563PenPXMYX1ZW/YI8d9jW+xRytgvxFTVuCLe7xknVc+zNuOUOWz1
zOR8mfOsYZ2a3XftnjM5zndUlnqVs+SqZyn7gfuepDwMIWc9Ubl5P6o+V5y3
OfcZZ/LOpBqfhP6aJB/3B/k86T5lr4x5BjeVmguztj9j3+gTfaNfx4ztMgq7
865t3XcQA+s924gr1m7Mvm12zekbe4P38L42x8y6cK5wvrBPRpzjRQx4bvR6
DrQ6P8Q38UMcdTkG+rwsCs/HPf9vevbSJu9n3YnpRuO/Yrx+EKXb4dh5X6d5
zkJignhgP3EmNhtLI8Yh5+6A499QKhfUmzemiKMTUXVhfT5Lqv1R0E+CMP1a
Uh1omzHxbW2ynxN+Sz5N6r3CsfCs0f4Qs6VxS78K8zeMzYt+ixkLr+N7wtg4
T5/CvQfBP510V4PtfhzE7wp6w3v8/etJM6I7qSasIWt5CHrDkG9J8m+5ZwXf
zz7XgP224HxylrGu456pHcZEr+cOv2UP1cqlf4+ae4o556ykDvPO/BM/PyHP
zfChHhV7v7+9Blsv8n0F3Voqv9Tf7ZnI+nC+UYf2eWeL3z7G3exa03a//zdO
uWZnmI+g3ues5VvB95G9/gX2K7D/PKmfyE8bF1PGWKcxzB4c9lu/4Bqd9Ft8
LMr+YBS+mU/O7/Go2csZTJ+JvZXuxw3mGcdW44k16HOvEQcPBK1F36adf2KB
vc3Zsctv6m7Qfx0jY30IJxVJ/A==
           "]], 
          PolygonBox[CompressedData["
1:eJwtlMtvzFEUx+/vce9PI2mqf4HaeIvnohiPWFiYImR0RmLBhqRNK9SyEhsW
o623DolOSYmFV1OhWiKmUl1IxVJDJGInEYIFCz7fHIszc773e+75nXPu996m
A527OmLnXB5Lsd7g3AwL77Ae/GveuaeJc+NYMXMuYi0PN4nFcGPg3+y7DR7H
z7Dl4K7IuVn4wZu/Cr4ZfxSrgVvBDcpFznvkfoBdhNuGDbF/jJhv+IPwM/j1
FHcDv4m1CXCZ+MXgKjYbbi/5Gsk3CW4G1xFzntjrme0twp8CrwPn4a6yP4e/
GRtMrIf98Osz45RTuZey9om9G7Ddqo+1O/BfwP1876G3WgvgMtw0uJG9c7Ah
8B/+S/Ar4FfDLcms9o2sLcI/Ro6t+DFxFfCtzPYWWLuJP+GN+8j+c8T+AE/D
PafeHfgD2DPyrYH/it/mrfcjykl8gs0j9j4xLeS74M3XzDX7FvCwszP5jt9B
/HBsPav3E95q/UV8H/GPvfk/sV7wK2xtajPRbNrZfze2nkr4tWCzmss3XgSr
WbVLY33g+mCz05nqbFvJ8YRc3eA3cN3Yoci+MQXXBR6N7RttwWpQLerhkbTB
2rLEZq7Zv4bfkpom63T+3malb+zJTOPSusRfg3PgInvl/uWnX5qHe8vamWAa
kBakySlvZ6qz1Z4ebxqX1o+CK5oV9hn/PfkK+Jcy+5Y0eBJcIWcaWc0v8TfB
DySmydPw+4JpQWfSiV9mrZpYjGKr4IbIelSvkbdZ6w7oLhwMdjdHsMPBNCQt
jRCzkNg0WK3SiLSygLUP8Dlsp7TEWs7ZG1DK7M7q7kqD873dOd099bjS/z+z
yGpqB2/P7G6rxyvB7qDuomZ6ObM3RW+LNCwta8aatWo4G6wG1aIz19kfD/b2
SBPShnpSb3qT9Db9A8MyleY=
           "]]}]}, {
        EdgeForm[], 
        RGBColor[
        0.1905301655586322, 0.5972476869347922, 0.25604374008163383`], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1:eJxNVc9LVGEU/d6bee9tRrBajTnFG2eGMRmQ/oLUhCiKKBCKIpJoFoa6MKhF
7UxQiX4ssqCRimoW7oQcKlw45Y+F5uRWSaZF/QkFBZ3DPUKLy71zv/vud+49
934TD46cG/adc/chCch04NyA59yxyLkTODgJ+Qm/B1877H2wn0GnIUuwM775
W2FfxbfzsHvw7V/Y3+EbgPZC5/bDHoX2IacRMwR/2TP7MM4uhJb3BvTZwHIX
oW/h9yL8t6GvI/6ob1gO+oaP2P4EZl+BnoXuhzSd1cBapuA/kHSuAv8P/J5L
WB7mmyEm6FOIfR3Z+RfEF3HeqTwPELMDewbnHdBZ3cvzoup/Dokh35zF9EJ2
YV8KDM9v6DbfcPPb8aTdz3524mwL9iPcswH/OiQFuYPfy4i/C70SWb88xF6E
9MH/K7Be0M8ebouXhjPe+nRXHroLkoN8liYf9PGM/DO247/4gvz9spuKP6Lv
86qdftYcq952+VkXa6B/U3NySPGxerirHmbkz6jneznyypPTvZxP4suqxqww
M09B8U3FV1Uj+ayIF94/q5iKOKO/G3pS3HAer2kmY8UQ/wR6fQa5XoKHGupa
SNq8sm9TwnE+sNhSYHi71EPyQk75fUr8En9L0vimj32eVq/X5Wf8q8jiXkS2
TxntGrFynr46myPOE+f4SWTfEe979hxNq2ve7imGM8Df7C3nmvj4DfWO9voj
Zq6Ibz9Av4lsf95Cr0U2k5zNvXlinmXZ7Dnxb4sj3skz3jsUWu4x7bKn+U8L
A8+4A9yFT4H1mTUQP98V4iGvJfV5GLFPI4u5CfudeKnrvSKH7NWk3gr2bCQ0
Ti+H9h4Rbxm6lDBMxDkmnHyHmI95iZH31MQ7ZUH+rHa/od3JqSf0pcQ1e8Be
sEd8a3jPqrhlzKbmk/yS56ryJNQfYiDXfM/m5fcDw8/3lVhqqp2z06L5adNO
N7Sb7EureBkXniXVXw/tXSyLG87jcc0kz+fUI857r2Z+UTtF7A/1TvK9XBNH
3Im0ZrUhHqvCX1B+7shj/R/wnesWV6yX88u+b6mWtPz/AGlGuss=
           "]], 
          PolygonBox[CompressedData["
1:eJwlkb0rhWEYxu/34X3eycKuZDmLksXsq3TKUQZ1fJOijs6ZFIs/gLPI4FAI
+RhsNmQ4JGdTZpPBZqaQ3901XPW77q/3fu63Y6EyVg5m1oma0XdqNkTgCM1G
yfkerbknPwxvohH8Lco1mV3j58kt4y+DYnfwHLF8UM8PvESs1VTjtYnHErMe
fC88TewAPkQz8B+xdvidnl/4ODNrYdEXfAP/iF7pv6FmL1OP97ZRc44vR9X6
zApcQFvwAJqg9ysV+46+6zM9gXlP+Aa8HvV238F3ucg0+4OaM3g16tv7qAif
ECsk2vEU7st0m3Fi1VRv9LdecZ98phv6LbvRJ7kcqrPvG36b3ErUbI+V4I2o
3fyGIdUMn9WF6uRGUTXoH06Rr6FF/1cokJvEDwbVeG0R3x90E7/NQ9Qsv0EN
rmXaxd+0C5dSzfJ/tgP/AxGURoY=
           "]]}]}, {
        EdgeForm[], 
        RGBColor[0., 0.502449, 0.0809339], 
        GraphicsGroupBox[{
          
          PolygonBox[{{1533, 585, 1534}, {245, 241, 237}, {1372, 234, 1615}, {
           238, 242, 1}, {1376, 241, 1528}, {1613, 237, 1375}, {1656, 238, 
           1631}, {238, 246, 234}, {1614, 233, 1369}, {585, 242, 238}, {241, 
           245, 225}, {1518, 237, 1613}, {246, 238, 1}, {249, 241, 225}, {585,
            672, 242}, {1631, 238, 1529}, {1534, 585, 1657}, {1615, 234, 
           1371}, {1532, 241, 1376}, {1370, 233, 1614}, {241, 249, 233}}], 
          
          PolygonBox[{{1657, 585, 238, 1656}, {1375, 237, 241, 1532}, {1528, 
           241, 233, 1370}, {1366, 672, 585, 1533}, {1529, 238, 234, 
           1372}}]}]}}, {{}, 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          
          LineBox[{1366, 1533, 1534, 1657, 1656, 1631, 1529, 1372, 1615, 
           1371}], 
          LineBox[{1369, 1614, 1370, 1528, 1376, 1532, 1375, 1613, 1518}]}, 
         "0.8`"], Annotation[#, 0.8, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          
          LineBox[{1321, 1682, 1476, 1945, 1653, 1625, 1644, 1643, 1652, 1360,
            1320, 1681, 1680, 1944, 1943, 1415, 1954, 1955, 1953, 1481, 1363, 
           1325, 1646, 1647, 1629, 1630, 1958, 1959, 1957, 1487}], 
          
          LineBox[{1419, 1856, 1420, 1857, 1377, 1723, 1724, 1640, 1639, 1648,
            1537, 1282, 1662, 1661, 1993, 1992, 1867, 1688, 1731, 1730, 1866, 
           1335, 1281, 1991, 1427, 1387, 1538, 1432}]}, "0.6`"], 
        Annotation[#, 0.6, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          
          LineBox[{1276, 1535, 1536, 1422, 1858, 1421, 1332, 1275, 1732, 1733,
            1689, 1690, 1870, 1429, 1868, 1428, 1869, 1539, 1540, 1434, 2017, 
           1433, 1337, 1286, 1995, 1435, 1544, 1543, 1289, 1997, 1440, 1882, 
           1695, 1388, 1744, 1879, 1878, 1339, 1519, 1439, 1880, 1438, 1881, 
           1545, 1576}], 
          
          LineBox[{1331, 1365, 1526, 1486, 2016, 1330, 1554, 1952, 1852, 1853,
            1851, 1414, 1942, 1475, 1677, 1678, 1679, 1359, 1524, 1474, 2012, 
           1319, 1552, 1465, 2021, 1466, 1522, 1357, 1463, 1934, 1464, 1935, 
           1409, 1834, 1836, 1835, 1313, 1550, 1931, 1461, 1930, 1462, 1521, 
           1355, 1591}]}, "0.4`"], Annotation[#, 0.4, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          
          LineBox[{1304, 1811, 1403, 1810, 1402, 1928, 1455, 1927, 1454, 1926,
            1925, 1713, 1401, 1809, 1452, 1921, 1353, 1520, 1453, 1922, 1924, 
           1923, 1549, 1309, 1821, 1822, 1820, 1405, 1459, 2020, 1458, 1354, 
           1308, 2006, 1460, 1408, 1831, 1833, 1832, 1933, 1551, 1317, 2011, 
           1473, 1523, 1358, 1318, 1850, 1413, 1720, 1721, 1722, 2022, 2023, 
           1480, 1854, 1417, 1855, 1418, 1645, 1485}], 
          
          LineBox[{1423, 1641, 1378, 1617, 1618, 1619, 1659, 1658, 1424, 1859,
            1382, 1734, 1383, 1735, 1430, 1871, 1541, 1542, 1437, 1875, 1436, 
           1338, 1287, 1745, 1746, 1696, 1697, 1442, 2018, 1441, 1546, 1293, 
           2001, 1445, 1885, 1699, 1756, 1755, 1884, 1340, 1292, 2000, 1444, 
           1548, 1547, 1297, 1764, 1394, 1762, 1393, 2029, 1763, 1296, 1674, 
           1888, 1887, 1649, 1622, 1392, 1642, 1675}]}, "0.2`"], 
        Annotation[#, 0.2, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          LineBox[CompressedData["
1:eJwVzjdOggEYx+HXKOCgqAliYcLCJG3AMli4AjFxd7OBFzBxNXF1dgLlEJYD
uLlaTmBBxdnH4cmf3/sR+PK7rUZzICJ2yCQi3pIR77TZS0Wsu+3bD/1JhwO9
4X5oe/qLK470pnvTfusfrmnpLfdj29e/dLnRdfdbu6SLPOlHPWlLOmuHdIJB
hkmS4sWzO/ts723Z90/sKGlGGGeMU6aZYYocs5wxzwJzFFjknNL/b1KkSoUL
llmhxhqrXDLh/yve5dXnB9tnmyp/IKQnJA==
           "]], 
          LineBox[CompressedData["
1:eJwVz0kugwEYBuCvlB7Apl06hAtQw7IRTSQSSWtYkio6cI66ghgvgAMY01BW
poWhJ6iZx+LJ+73v/y/+v7+4OL6QiIg8mz0RY6ynIvZ7I7pkgjVG7XW5Zw/5
K2tyxF6Vu/oP31T0Yfuq3NG/+GRFz9qX5bb+wTtlfci+JLf0NzqU9EF7W5b1
Sebds8xRYIYiB7x63uaJF56Ztj/IR265544p+7W84ZIWV0zYz+UFJ5xxSs6e
lhmavulY75Z9//+cjBhwb7gbHHFI1jt/tc82Ow==
           "]]}, "0"], 
        Annotation[#, 0, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          
          LineBox[{1278, 1728, 1379, 1727, 1380, 1729, 1425, 1861, 1426, 1862,
            1384, 1691, 1692, 1693, 1284, 1562, 1563, 1493, 1968, 1970, 1969, 
           1567, 1877, 1753, 1754, 1752, 1389, 1496, 1998, 1290, 1572, 1294, 
           2002, 1446, 1391, 1700, 1975, 1976, 1978, 1977, 1577, 1498, 1979, 
           1499, 1579, 1578, 1298, 1771, 1395, 1770, 1396, 1772, 1299, 1676, 
           1896, 1895, 1397, 1623, 1650, 2026, 2028, 2027, 1447}], 
          
          LineBox[{1451, 1802, 1398, 1801, 1399, 1919, 1450, 1918, 1449, 1803,
            1400, 1712, 1985, 1986, 1503, 1987, 1584, 1585, 1504, 2004, 1303, 
           1586, 1307, 1813, 1814, 1812, 1404, 1507, 2024, 1506, 1590, 1456, 
           2019, 1457, 1407, 1714, 1715, 1356, 1312, 1595, 1316, 2010, 1513, 
           1600, 1599, 1940, 1472, 1843, 1411, 1842, 1412, 1844, 1478, 1949, 
           1479, 1950, 1416, 1626, 1627, 1628, 1685}]}, 
         RowBox[{"-", "0.2`"}]], Annotation[#, -0.2, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          
          LineBox[{1295, 1575, 1673, 1672, 1671, 1497, 1574, 1573, 1973, 1974,
            1972, 1971, 1698, 1390, 1443, 1999, 1291, 1571, 1288, 1996, 1495, 
           1570, 1568, 1569, 1494, 1668, 1669, 1670, 1564, 1665, 1664, 1663, 
           1490, 1963, 1385, 1736, 1738, 1737, 1863, 1558, 1961, 1962, 1960, 
           1488, 1557, 1556, 1606}], 
          
          LineBox[{1306, 1587, 1588, 1505, 2005, 1305, 1589, 1310, 1824, 1825,
            1823, 1406, 1990, 1509, 1988, 1508, 1989, 1592, 1593, 1510, 2007, 
           1311, 1594, 1315, 2009, 1512, 1598, 1597, 1470, 1938, 1471, 1939, 
           1410, 1718, 1719, 1362, 1324, 1602, 1327, 2014, 1515, 1604, 1603, 
           1605}]}, 
         RowBox[{"-", "0.4`"}]], Annotation[#, -0.4, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          
          LineBox[{1279, 1660, 1865, 1864, 1381, 1620, 1621, 1334, 1280, 1559,
            1285, 1667, 1666, 1874, 1873, 1386, 1694, 1964, 1336, 1965, 1565, 
           1491, 1966, 1492, 1967, 1431, 1566, 1616}], 
          
          LineBox[{1468, 1936, 1469, 1937, 1467, 1511, 2008, 1314, 1596, 1322,
            1947, 1948, 1946, 1477, 1716, 1717, 1361, 1323, 1601, 1326, 2013, 
           1514, 1482, 1956, 1483, 1683, 1684}]}, 
         RowBox[{"-", "0.6`"}]], Annotation[#, -0.6, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          
          LineBox[{1367, 1610, 1368, 1635, 1634, 1655, 1654, 1527, 1608, 1609,
            1516, 1531, 1374, 1611, 1607}], 
          LineBox[{1517, 1612, 1373, 1530, 1633, 1632, 1637, 1636, 1638}]}, 
         RowBox[{"-", "0.8`"}]], 
        Annotation[#, -0.8, "Tooltip"]& ], {}, {}}}], {
    DisplayFunction -> Identity, AspectRatio -> 1, DisplayFunction :> 
     Identity, Frame -> True, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], Method -> {"DefaultBoundaryStyle" -> Automatic}, 
     PlotRange -> {{-1, 1}, {-1, 1}}, PlotRangeClipping -> True, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{
       FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           GraphicsBox[{{}, {}, 
             
             RasterBox[{{{1., 0., 0.}}, {{1., 0.18056565590100287`, 
              0.18056565590100287`}}, {{1., 0.43076308837683636`, 
              0.43076308837683636`}}, {{1., 0.6630388341985513, 
              0.6630388341985513}}, {{1., 0.8831337913961667, 
              0.8831337913961667}}, {{0.8934566538346175, 0.9469893787723689, 
              0.9020796366566431}}, {{0.6662946128973792, 0.8339649493469283, 
              0.693302736108909}}, {{0.433660514294843, 0.7182177062837658, 
              0.47949663197075676`}}, {{0.19053016555863217`, 
              0.5972476869347922, 0.25604374008163383`}}, {{0., 0.502449, 
              0.0809339}}}, {{
                Rational[-15, 2], 
                Rational[-225, 2]}, {
                Rational[15, 2], 
                Rational[225, 2]}}], {Antialiasing -> False, 
              AbsoluteThickness[0.1], 
              Directive[
               Opacity[0.3], 
               GrayLevel[0]], 
              LineBox[
               NCache[{{
                  Rational[15, 2], 
                  Rational[-225, 2]}, {
                  Rational[-15, 2], 
                  Rational[-225, 2]}, {
                  Rational[-15, 2], 
                  Rational[225, 2]}, {
                  Rational[15, 2], 
                  Rational[225, 2]}, {
                  Rational[15, 2], 
                  Rational[-225, 2]}}, {{7.5, -112.5}, {-7.5, -112.5}, {-7.5, 
                112.5}, {7.5, 112.5}, {7.5, -112.5}}]]}, {
              CapForm[None], {{
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], -90.}, {
                    Rational[15, 2], -90.}}, {{-7.5, -90.}, {7.5, -90.}}]]}, {
               
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], -67.49999999999999}, {
                    Rational[
                    15, 2], -67.49999999999999}}, {{-7.5, \
-67.49999999999999}, {7.5, -67.49999999999999}}]]}, {
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], -44.99999999999999}, {
                    Rational[
                    15, 2], -44.99999999999999}}, {{-7.5, \
-44.99999999999999}, {7.5, -44.99999999999999}}]]}, {
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], -22.499999999999986`}, {
                    Rational[
                    15, 2], -22.499999999999986`}}, {{-7.5, \
-22.499999999999986`}, {7.5, -22.499999999999986`}}]]}, {
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], 1.4654943925052066`*^-14}, {
                    Rational[15, 2], 1.4654943925052066`*^-14}}, {{-7.5, 
                  1.4654943925052066`*^-14}, {7.5, 
                  1.4654943925052066`*^-14}}]]}, {
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], 22.500000000000018`}, {
                    Rational[15, 2], 22.500000000000018`}}, {{-7.5, 
                  22.500000000000018`}, {7.5, 22.500000000000018`}}]]}, {
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], 45.000000000000014`}, {
                    Rational[15, 2], 45.000000000000014`}}, {{-7.5, 
                  45.000000000000014`}, {7.5, 45.000000000000014`}}]]}, {
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], 67.50000000000003}, {
                    Rational[15, 2], 67.50000000000003}}, {{-7.5, 
                  67.50000000000003}, {7.5, 67.50000000000003}}]]}, {
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], 89.99999999999999}, {
                    Rational[15, 2], 89.99999999999999}}, {{-7.5, 
                  89.99999999999999}, {7.5, 89.99999999999999}}]]}}}, {
             Antialiasing -> False, 
              StyleBox[
               
               LineBox[{{7.499999999999999, -112.49999999999999`}, {
                7.499999999999999, 112.49999999999999`}}], 
               Directive[
                AbsoluteThickness[0.2], 
                Opacity[0.3], 
                GrayLevel[0]], StripOnInput -> False], 
              StyleBox[
               StyleBox[{{
                  StyleBox[
                   LineBox[{{{7.499999999999999, -89.99999999999999}, 
                    
                    Offset[{4., 0}, {
                    7.499999999999999, -89.99999999999999}]}, {{
                    7.499999999999999, -67.49999999999999}, 
                    
                    Offset[{4., 0}, {
                    7.499999999999999, -67.49999999999999}]}, {{
                    7.499999999999999, -44.999999999999986`}, 
                    
                    Offset[{4., 0}, {
                    7.499999999999999, -44.999999999999986`}]}, {{
                    7.499999999999999, -22.499999999999986`}, 
                    
                    Offset[{4., 0}, {
                    7.499999999999999, -22.499999999999986`}]}, {{
                    7.499999999999999, 1.4619624301000575`*^-14}, 
                    
                    Offset[{4., 0}, {7.499999999999999, 
                    1.4619624301000575`*^-14}]}, {{7.499999999999999, 
                    22.500000000000014`}, 
                    
                    Offset[{4., 0}, {7.499999999999999, 
                    22.500000000000014`}]}, {{7.499999999999999, 
                    45.000000000000014`}, 
                    
                    Offset[{4., 0}, {7.499999999999999, 
                    45.000000000000014`}]}, {{7.499999999999999, 
                    67.50000000000004}, 
                    
                    Offset[{4., 0}, {7.499999999999999, 
                    67.50000000000004}]}, {{7.499999999999999, 
                    89.99999999999999}, 
                    
                    Offset[{4., 0}, {7.499999999999999, 
                    89.99999999999999}]}}], 
                   Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4]], StripOnInput -> False]}, 
                 StyleBox[
                  StyleBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"-0.8\"", -0.8, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.499999999999999, -89.99999999999999}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"-0.6\"", -0.6, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.499999999999999, -67.49999999999999}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"-0.4\"", -0.4, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    
                    Offset[{7., 0.}, {
                    7.499999999999999, -44.999999999999986`}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"-0.2\"", -0.2, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    
                    Offset[{7., 0.}, {
                    7.499999999999999, -22.499999999999986`}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["0", TraditionalForm], 
                    
                    Offset[{7., 0.}, {7.499999999999999, 
                    1.4619624301000575`*^-14}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.2\"", 0.2, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    
                    Offset[{7., 0.}, {7.499999999999999, 
                    22.500000000000014`}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.4\"", 0.4, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    
                    Offset[{7., 0.}, {7.499999999999999, 
                    45.000000000000014`}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.6\"", 0.6, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.499999999999999, 67.50000000000004}], 
                    
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.8\"", 0.8, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.499999999999999, 89.99999999999999}], 
                    
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}]}, 
                    Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4]], {
                    Directive[
                    Opacity[1]]}, StripOnInput -> False]}, {}}, {
                    Directive[
                    Opacity[1]]}, StripOnInput -> False], "GraphicsLabel", 
                  StripOnInput -> False]}, "GraphicsTicks", StripOnInput -> 
                False], 
               Directive[
                AbsoluteThickness[0.2], 
                Opacity[0.3], 
                GrayLevel[0]], StripOnInput -> False]}}, PlotRangePadding -> 
            Scaled[0.02], PlotRange -> All, Frame -> True, 
            FrameTicks -> {{False, False}, {True, False}}, FrameStyle -> 
            Opacity[0], FrameTicksStyle -> Opacity[0], 
            ImageSize -> {Automatic, 225}, BaseStyle -> {}], Alignment -> 
           Left, AppearanceElements -> None, ImageMargins -> {{5, 5}, {5, 5}},
            ImageSizeAction -> "ResizeToFit"], LineIndent -> 0, StripOnInput -> 
          False], {FontFamily -> "Arial"}, Background -> Automatic, 
         StripOnInput -> False], TraditionalForm]}, "BarLegend", 
      DisplayFunction -> (#& ), 
      InterpretationFunction :> (RowBox[{"BarLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{
                 RowBox[{"Blend", "[", 
                   RowBox[{"\"RedGreenSplit\"", ",", "#1"}], "]"}], "&"}], 
               ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"-", "0.8443385362625122`"}], ",", 
                   "0.8567308783531189`"}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"-", "0.8`"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"-", "0.6`"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"-", "0.4`"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"-", "0.2`"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"0.`", ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"0.2`", ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"0.4`", ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"0.6`", ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"0.8`", ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}]}], "}"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}], ",", 
           RowBox[{"Charting`TickAnnotations", "\[Rule]", "None"}], ",", 
           RowBox[{"Charting`TickSide", "\[Rule]", "Right"}], ",", 
           RowBox[{"ColorFunctionScaling", "\[Rule]", "True"}]}], "]"}]& )], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.7533530066040087`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:7f51\:7edc\:7684\:53ef\:89c6\:5316", "Section",
 CellChangeTimes->{{3.753353227621224*^9, 3.753353233059307*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"net", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{
    RowBox[{"NetGraph", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "3", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", "\[Rule]", 
        RowBox[{"2", "\[Rule]", 
         RowBox[{"3", "\[Rule]", "4"}]}]}], "}"}], ",", 
      RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
      RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "1.9"}], ",", 
      RowBox[{"2", "\[Rule]", "4.1"}], ",", 
      RowBox[{"3", "\[Rule]", "6.0"}], ",", 
      RowBox[{"4", "\[Rule]", "8.1"}]}], "}"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"or", "\[IndentingNewLine]", "net"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"NetTrain", "[", 
       RowBox[{
        RowBox[{"NetGraph", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "3", ",", "3", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", "\[Rule]", 
            RowBox[{"2", "\[Rule]", 
             RowBox[{"3", "\[Rule]", "4"}]}]}], "}"}], ",", 
          RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
          RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}], 
        ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"1.9", ",", "4.1", ",", "6.", ",", "8.1"}], "}"}]}]}], 
       "]"}], "\[IndentingNewLine]", "or", "\[IndentingNewLine]", "net"}], 
     "=", 
     RowBox[{"NetTrain", "[", 
      RowBox[{
       RowBox[{"NetGraph", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "3", ",", "3", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", "\[Rule]", 
           RowBox[{"2", "\[Rule]", 
            RowBox[{"3", "\[Rule]", "4"}]}]}], "}"}], ",", 
         RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
         RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}], 
       ",", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<Input\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], ",", 
         RowBox[{"\"\<Output\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"1.9", ",", "4.1", ",", "6.", ",", "8.1"}], "}"}]}]}], 
        "|>"}]}], "]"}]}]}], "\[IndentingNewLine]", "*)"}]}]}], "Input",
 CellChangeTimes->{{3.7533532428436403`*^9, 3.753353243226961*^9}, {
  3.753353404169623*^9, 3.75335342550253*^9}, {3.7533534813823757`*^9, 
  3.753353498093018*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       TagBox[
        DynamicModuleBox[{NeuralNetworks`NetGraph`PackagePrivate`selection$$ =
          None, NeuralNetworks`NetGraph`PackagePrivate`outIndex$$ = 5, 
         NeuralNetworks`NetGraph`PackagePrivate`inputs$$ = Association[
         "Input" -> NeuralNetworks`EncodedType[
            NetEncoder["Scalar", 
             Association[
             "Parameters" -> Association[], "Output" -> 
              NeuralNetworks`TensorT[1, {1}]]], 
            NeuralNetworks`TensorT[1, {1}]]], 
         NeuralNetworks`NetGraph`PackagePrivate`outputs$$ = Association[
         "Output" -> NeuralNetworks`DecodedType[
            NetDecoder["Scalar", 
             Association[
             "Parameters" -> Association[], "Input" -> 
              NeuralNetworks`TensorT[1, {1}]]], 
            NeuralNetworks`TensorT[1, {1}]]], 
         NeuralNetworks`NetGraph`PackagePrivate`labels$$ = {
         "1", "2", "3", "4", "Input", "Output"}, 
         NeuralNetworks`NetGraph`PackagePrivate`vertices$$ = Association[
         "1" -> Association[
           "Type" -> "DotPlus", "Arrays" -> 
            Association[
             "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
              NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
            Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
            Association["Input" -> NeuralNetworks`TensorT[1, {1}]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`TensorT[1, {1}]]], "2" -> 
          Association[
           "Type" -> "DotPlus", "Arrays" -> 
            Association[
             "Weights" -> NeuralNetworks`TensorT[2, {3, 1}], "Biases" -> 
              NeuralNetworks`TensorT[1, {3}]], "Parameters" -> 
            Association["Size" -> 3, "$InputSize" -> 1], "Inputs" -> 
            Association["Input" -> NeuralNetworks`TensorT[1, {1}]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`TensorT[1, {3}]]], "3" -> 
          Association[
           "Type" -> "DotPlus", "Arrays" -> 
            Association[
             "Weights" -> NeuralNetworks`TensorT[2, {3, 3}], "Biases" -> 
              NeuralNetworks`TensorT[1, {3}]], "Parameters" -> 
            Association["Size" -> 3, "$InputSize" -> 3], "Inputs" -> 
            Association["Input" -> NeuralNetworks`TensorT[1, {3}]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`TensorT[1, {3}]]], "4" -> 
          Association[
           "Type" -> "DotPlus", "Arrays" -> 
            Association[
             "Weights" -> NeuralNetworks`TensorT[2, {1, 3}], "Biases" -> 
              NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
            Association["Size" -> 1, "$InputSize" -> 3], "Inputs" -> 
            Association["Input" -> NeuralNetworks`TensorT[1, {3}]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         NeuralNetworks`NetGraph`PackagePrivate`vports$$ = {
          NetPort["Vertices", "1"], 
          NetPort["Vertices", "2"], 
          NetPort["Vertices", "3"], 
          NetPort["Vertices", "4"], 
          NetPort["Inputs", "Input"], 
          NetPort["Outputs", "Output"]}}, 
         TagBox[GridBox[{
            {
             TemplateBox[{TagBox[
                GraphicsBox[{{
                   GrayLevel[0.7], {
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}}], 
                    
                    LineBox[{{-5., 3.061616997868383*^-16}, {-4., 
                    2.4492935982947064`*^-16}}], 
                    LineBox[{{-1., 6.123233995736766*^-17}, {0., 0.}}]}}, {
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    8.572527594031473*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    2.694222958124177*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-0.4, 
                    2.4492935982947065`*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}]}, {
                   GrayLevel[0], {
                    AbsolutePointSize[5], {{
                    GrayLevel[0.35], 
                    TagBox[
                    PointBox[{-4., 2.4492935982947064`*^-16}], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.35], 
                    TagBox[
                    PointBox[{-3., 1.8369701987210297`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.35], 
                    TagBox[
                    PointBox[{-2., 1.2246467991473532`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.35], 
                    TagBox[
                    PointBox[{-1., 6.123233995736766*^-17}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-5., 3.061616997868383*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{0., 0.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}}}, {{
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{0, -5.5}, {-4., 2.4492935982947064`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{0, -5.5}, {-3., 1.8369701987210297`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{0, -5.5}, {-2., 1.2246467991473532`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-1., 6.123233995736766*^-17}], 
                    Offset[{0, -5.5}, {-1., 6.123233995736766*^-17}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-5., 3.061616997868383*^-16}], 
                    Offset[{0, -5.5}, {-5., 3.061616997868383*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {0., 0.}], 
                    Offset[{0, -5.5}, {0., 0.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, 
                   StyleBox[{
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
                    2.0818995585505003`*^-16}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736765*^-17}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-1.4, 
                    8.572527594031473*^-17}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736766*^-17}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-4.4, 
                    2.694222958124177*^-16}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-0.4, 
                    2.4492935982947065`*^-17}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736766*^-17}]}, FontColor -> 
                    GrayLevel[0.5], FontSize -> 8, FontWeight -> "Thin", 
                    StripOnInput -> False]}, 
                  
                  DynamicModuleBox[{
                   
                   GeneralUtilities`Graphics`PackagePrivate`vpos$164997 = \
{{-4., 2.4492935982947064`*^-16}, {-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}, {-5., 3.061616997868383*^-16}, {
                    0., 0.}}}, 
                   DynamicBox[
                    Typeset`ToBoxes[
                    If[
                    Not[
                    IntegerQ[
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]], {}, {
                    AbsolutePointSize[10], 
                    Opacity[0.2, Black], 
                    Point[
                    Part[
                    GeneralUtilities`Graphics`PackagePrivate`vpos$164997, 
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]]}], 
                    StandardForm, Graphics], 
                    TrackedSymbols :> {
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$}], 
                   DynamicModuleValues :> {}]}, 
                 ImageSize -> {362., 25.68000000000002}, AspectRatio -> Full, 
                 PlotRangePadding -> 0, 
                 ImagePadding -> {{19.5, 22.5}, {15.5, 10.179999999999998`}}, 
                 ImageMargins -> {{0, 0}, {15, 15}}, 
                 BaseStyle -> {TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                
                
                EventHandlerTag[{
                 "MouseClicked" :> (
                   NeuralNetworks`NetGraph`PackagePrivate`selection$$ = None),
                   Method -> "Preemptive", PassEventsDown -> Automatic, 
                  PassEventsUp -> True}]],FormBox[
                TemplateBox[{
                  StyleBox["DotPlusLayer", 
                   GrayLevel[0.35], StripOnInput -> False]}, "PointLegend", 
                 DisplayFunction -> (FormBox[
                   StyleBox[
                    StyleBox[
                    PaneBox[
                    TemplateBox[{"   ", "\"   \"", 
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.35]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.35]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #}, "RowDefault"]}, 
                    "RowWithSeparators"], Alignment -> Left, 
                    AppearanceElements -> None, 
                    ImageMargins -> {{2, 2}, {2, 2}}, ImageSizeAction -> 
                    "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
                    FontFamily -> "Arial"}, Background -> Automatic, 
                    StripOnInput -> False], TraditionalForm]& ), 
                 InterpretationFunction :> (RowBox[{"PointLegend", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.35], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.23333333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "GrayLevel[0.35]"], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.35]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.35], Editable -> False, Selectable -> False], 
                    "]"}], "}"}], ",", 
                    RowBox[{"{", #, "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "12"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", "2"}], ",", 
                    
                    RowBox[{
                    "LegendLayout", "\[Rule]", 
                    "GeneralUtilities`Graphics`PackagePrivate`legendTable"}]}]\
, "]"}]& ), Editable -> True], TraditionalForm]},
              "Legended",
              DisplayFunction->(GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> Automatic, 
                BaselinePosition -> {1, 1}]& ),
              Editable->True,
              InterpretationFunction->(RowBox[{"Legended", "[", 
                 RowBox[{#, ",", 
                   RowBox[{"Placed", "[", 
                    RowBox[{#2, ",", "Below"}], "]"}]}], "]"}]& )]},
            {
             DynamicBox[ToBoxes[
               If[
                IntegerQ[NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                
                Item[
                 NeuralNetworks`NetGraph`PackagePrivate`vportInfo[
                  Part[
                  NeuralNetworks`NetGraph`PackagePrivate`vports$$, 
                   NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                  NeuralNetworks`NetGraph`PackagePrivate`inputs$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`outputs$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`vertices$$], 
                 Alignment -> Center], 
                Item["", ItemSize -> {0, 0}]], StandardForm],
              ImageSizeCache->{0., {0., 6.}},
              
              TrackedSymbols:>{
               NeuralNetworks`NetGraph`PackagePrivate`selection$$}]}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"],
         DynamicModuleValues:>{},
         Initialization:>{NetGraph}],
        Deploy,
        DefaultBaseStyle->"Deploy"],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{{3.7533532363687077`*^9, 3.753353246361452*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"net", "[", "x", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "5"}], "}"}]}], "]"}], ",", 
    RowBox[{"ListPlot", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "1.9"}], ",", 
         RowBox[{"2", "\[Rule]", "4.1"}], ",", 
         RowBox[{"3", "\[Rule]", "6.0"}], ",", 
         RowBox[{"4", "\[Rule]", "8.1"}]}], "}"}], "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Rule", "[", 
          RowBox[{"x_", ",", "y_"}], "]"}], "\[RuleDelayed]", 
         RowBox[{"{", 
          RowBox[{"x", ",", "y"}], "}"}]}], "}"}]}], ",", 
      RowBox[{"PlotTheme", "\[Rule]", "\"\<Minimal\>\""}], ",", 
      RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}]}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.753353248294622*^9, 3.7533533169636173`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwl0HtMU3cUB/BiAQUK4+EQ5NFbeiNSEewMmS6TewAXFZDpoCPDTGmRxxRh
dDRjgFtlIqDiKqK8QlpkSogBh6s6nFAGCMqji9bpDLjdAJUMZQOx2ALSec/9
4+beT87vfM/5XYEs+5PUFRwOZ/fbh3nXfyuzFx8sCH/7ydHUtOt6DURsIvEZ
xbhu8Bedta/ze4L4An3+zU1dfVc53474Bn1KekOXuU1x5DW/DP1V0M86w2JG
5Qy/Bn1a3qxbOTIWOM1vRitPRlENA+qc5/x29OBkO9V6tWwkM2SAsfJc9kMq
nbpf80JuYAzi2zSVZQwa17Y+Ydz1F3+SchQcD/x7C81YE+LyL3XGdVDUkDyO
eU5RLynZSIKOO/QM+/f0mqicO8dl2YFTWN8SZqHavuTFe+2axrznh5aohoLD
U5sSZ3D+jNFKFamX9r56MYt1usIGOAYabufPMU6uFXFhXW5aXoLIxJhemrCF
CVPVp04d84yJO8fsIdp46GhFjhnrYRGrIG5CtcHffwH788wOMNUjU95tWcT9
iQonCHF75Bd14A06J84ZHCmTdHRuGfdfP+0CO6aTXgdIOMDsvz3RFf7sPmiT
FGzDmBjd7AbXS3v3Eya0psnGHdLsFLRev4Ix9NPukCIvuM6r5TKmvds8IDR9
gz5Waov9kqOr4Xf3YCfFVjvGXRNJ78KvrUV1wVx7xslNQZ5QYCPaM/QUDZ0O
a8BxNH9nlnYl5nUY14DxsqBSXbgK589c84LK9d627RIHPP/1WW9Q1ab1SwlH
nCeWroWkys/1vEm0xhDsA+btlyzqTiecN+DgC+PGyLzuEh6ef/XYFy5uE/sM
S52xLr/pBy3FCrf0jS5oYak/lEhSYrgmNNGRwIew0YbmkuF3GCsl3gRUB9W1
DMe44v97piTgu67y6ph2tIaYJWC3j+TSAOmG9//4gAAisvr3uZWhwatPAGpf
GTlkQtMnwwKA7Gm6ELfPHfOq6gNAtbFb9KATnVzFFULanO39eyIP3CdSLgRZ
20ui7Ac0nHgihMyi+KXos6zjR4SgiNc+5p1DJxNPhVBqUpxRXUArb9FCaN1q
WayqR3P+mxSC5Tfro8tX0F2J80JQPeCV9/az54M8SKhtPJJx4h5aM7+ahMZc
fdTOQdY9niTc8FQtDOrZvP1rSRhN8sgw/MHuUyEgIXDcO2psnN1/MZSETdp8
/x+NbP2umIQPikcsqZPsvuc3kxAbWP/TP1Ps/ND3SZAfJvxnZ9F0SjgJhR8e
s1ybY/vFQEKx89jDXBPr5QgSqq82njKb2bzqj0i4qLRNv7XA5qXuIOHK3tTI
wiXW7+0iQRvQ5xe+zN7fGk1C59w6i9XK3mc4loT/AaNDrkY=
       
       "]]}}, {}, {}}, {{}, {{}, 
     {RGBColor[1, 0, 0], PointSize[0.019444444444444445`], AbsoluteThickness[
      1.6], PointBox[{{1., 1.9}, {2., 4.1}, {3., 6.}, {4., 
       8.1}}]}, {}}, {}, {}, {{}, {}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 5}, {-0.10000038146972656`, 10.150001525878906`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.753353265943355*^9, {3.753353296040653*^9, 3.753353317618869*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:5e73\:5747\:7edd\:5bf9\:8bef\:5dee\:5c42", "Section",
 CellChangeTimes->{{3.753353676190208*^9, 3.753353695664111*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"DotPlusLayer", "[", 
    RowBox[{
     RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
     RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "1.9"}], ",", 
     RowBox[{"2", "\[Rule]", "4.1"}], ",", 
     RowBox[{"3", "\[Rule]", "6.0"}], ",", 
     RowBox[{"4", "\[Rule]", "8.1"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"trained", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data"}], "]"}]}]}], "Input"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"encoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"decoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7533537113232117`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "[", 
  RowBox[{"Range", "[", "4", "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.9500058889389038`", ",", "4.000001907348633`", ",", "6.049997806549072`",
    ",", "8.099994659423828`"}], "}"}]], "Output",
 CellChangeTimes->{3.753353718850628*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"loss", "=", 
  RowBox[{"MeanAbsoluteLossLayer", "[", 
   RowBox[{"\"\<Target\>\"", "\[Rule]", "\"\<Scalar\>\""}], "]"}]}]], "Input"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["MeanAbsoluteLossLayer",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{
           {Opacity[
            0.3], {LineBox[
              NCache[{{0, 0}, {Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[1, 2], 1}}, {{0, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[3, 2], 1}}, {{0, 0}, {
                1.5, 1}}]]}, {
             LineBox[NCache[{{1, 0}, {Rational[-1, 2], 1}}, {{1, 
                0}, {-0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[1, 2], 1}}, {{1, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[3, 2], 1}}, {{1, 0}, {
                1.5, 1}}]]}}, 
           {AbsolutePointSize[5], PointBox[{{0, 0}, {1, 0}}], 
            PointBox[
             NCache[{{Rational[-1, 2], 1}, {Rational[1, 2], 1}, {
               Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}},
          ImageSize->32], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox["\<\"none\"\>",
              StripOnInput->False,
              LineColor->GrayLevel[0.5],
              FrontFaceColor->GrayLevel[0.5],
              BackFaceColor->GrayLevel[0.5],
              GraphicsColor->GrayLevel[0.5],
              FontColor->GrayLevel[0.5]],
             "SummaryItem"], ""}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{
           {Opacity[
            0.3], {LineBox[
              NCache[{{0, 0}, {Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[1, 2], 1}}, {{0, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[3, 2], 1}}, {{0, 0}, {
                1.5, 1}}]]}, {
             LineBox[NCache[{{1, 0}, {Rational[-1, 2], 1}}, {{1, 
                0}, {-0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[1, 2], 1}}, {{1, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[3, 2], 1}}, {{1, 0}, {
                1.5, 1}}]]}}, 
           {AbsolutePointSize[5], PointBox[{{0, 0}, {1, 0}}], 
            PointBox[
             NCache[{{Rational[-1, 2], 1}, {Rational[1, 2], 1}, {
               Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}},
          ImageSize->32], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox["\<\"none\"\>",
              StripOnInput->False,
              LineColor->GrayLevel[0.5],
              FrontFaceColor->GrayLevel[0.5],
              BackFaceColor->GrayLevel[0.5],
              GraphicsColor->GrayLevel[0.5],
              FontColor->GrayLevel[0.5]],
             "SummaryItem"], ""},
           {
            ItemBox[
             StyleBox["\<\"Ports:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Input\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"vector\"","\" \"",
                TemplateBox[{
                 "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                  "\" \"", 
                  
                  TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                   "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                 "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Target\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"encoded\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Loss\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["\<\"scalar\"\>", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  None,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.753353726597129*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"loss", "[", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<Input\>\"", "\[Rule]", "5.0"}], ",", 
    RowBox[{"\"\<Target\>\"", "\[Rule]", "3.0"}]}], "|>"}], "]"}]], "Input"],

Cell[BoxData["2.`"], "Output",
 CellChangeTimes->{3.753353735936756*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data", ",", "loss"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.753353769472351*^9, 3.7533537702906933`*^9}}],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"encoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"decoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.75335378149375*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "[", 
  RowBox[{"Range", "[", "5", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.753353886330353*^9, 3.7533538871007833`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.900121808052063`", ",", "3.9667673110961914`", ",", "6.033412933349609`",
    ",", "8.100058555603027`", ",", "10.166704177856445`"}], "}"}]], "Output",\

 CellChangeTimes->{3.753353786308372*^9, 3.753353887376453*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:7528\:4e8e\:6bd4\:8f83\:4e24\:6570\:5927\:5c0f\:7684\:7f51\:7edc", \
"Section",
 CellChangeTimes->{{3.7533539462136097`*^9, 3.753353957200367*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "2"}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"Less", ",", "Greater"}], "}"}]}], "}"}], "]"}]}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[SoftmaxLayer, {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {2, 2}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {2}]]], "Parameters" -> 
             Association["Size" -> 2, "$InputSize" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]], "2" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association["Size" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "2", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Class", 
              Association[
              "Parameters" -> 
               Association["Labels" -> {Less, Greater}, "Dimensions" -> 2], 
               "Input" -> NeuralNetworks`TensorT[1, {2}]]], 
             NeuralNetworks`TensorT[1, {2}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{253., {26., 31.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.753353970872649*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", "Less"}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "3"}], "}"}], "\[Rule]", "Less"}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"4", ",", "2"}], "}"}], "\[Rule]", "Greater"}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", "1"}], "}"}], "\[Rule]", "Greater"}]}], "}"}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[SoftmaxLayer, {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {2, 2}], "Biases" -> 
               NeuralNetworks`TensorT[1, {2}]], "Parameters" -> 
             Association["Size" -> 2, "$InputSize" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]], "2" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association["Size" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "2", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Class", 
              Association[
              "Parameters" -> 
               Association["Labels" -> {Less, Greater}, "Dimensions" -> 2], 
               "Input" -> NeuralNetworks`TensorT[1, {2}]]], 
             NeuralNetworks`TensorT[1, {2}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{253., {26., 31.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.7533539952022123`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", "5"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "3"}], "}"}]}], "}"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Less", ",", "Greater"}], "}"}]], "Output",
 CellChangeTimes->{3.7533540016099052`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"loss", "=", 
  RowBox[{
  "CrossEntropyLossLayer", "[", "\"\<Probabilities\>\"", "]"}]}]], "Input"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["CrossEntropyLossLayer",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{
           {Opacity[
            0.3], {LineBox[
              NCache[{{0, 0}, {Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[1, 2], 1}}, {{0, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[3, 2], 1}}, {{0, 0}, {
                1.5, 1}}]]}, {
             LineBox[NCache[{{1, 0}, {Rational[-1, 2], 1}}, {{1, 
                0}, {-0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[1, 2], 1}}, {{1, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[3, 2], 1}}, {{1, 0}, {
                1.5, 1}}]]}}, 
           {AbsolutePointSize[5], PointBox[{{0, 0}, {1, 0}}], 
            PointBox[
             NCache[{{Rational[-1, 2], 1}, {Rational[1, 2], 1}, {
               Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}},
          ImageSize->32], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"TargetForm\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["\<\"Probabilities\"\>", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{
           {Opacity[
            0.3], {LineBox[
              NCache[{{0, 0}, {Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[1, 2], 1}}, {{0, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[3, 2], 1}}, {{0, 0}, {
                1.5, 1}}]]}, {
             LineBox[NCache[{{1, 0}, {Rational[-1, 2], 1}}, {{1, 
                0}, {-0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[1, 2], 1}}, {{1, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[3, 2], 1}}, {{1, 0}, {
                1.5, 1}}]]}}, 
           {AbsolutePointSize[5], PointBox[{{0, 0}, {1, 0}}], 
            PointBox[
             NCache[{{Rational[-1, 2], 1}, {Rational[1, 2], 1}, {
               Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}},
          ImageSize->32], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"TargetForm\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["\<\"Probabilities\"\>", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            ItemBox[
             StyleBox["\<\"Ports:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Input\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["\<\"vector\"\>", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Target\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["\<\"vector\"\>", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Loss\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["\<\"scalar\"\>", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  None,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.753354011696794*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"1.", ",", "0."}], "}"}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "3"}], "}"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"1.", ",", "0."}], "}"}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"4", ",", "2"}], "}"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"0.", ",", "1."}], "}"}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", "1"}], "}"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"0.", ",", "1."}], "}"}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"0.5", ",", "0.5"}], "}"}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", "3"}], "}"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"0.5", ",", "0.5"}], "}"}]}]}], "}"}], ",", "loss"}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[SoftmaxLayer, {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {2, 2}], "Biases" -> 
               NeuralNetworks`TensorT[1, {2}]], "Parameters" -> 
             Association["Size" -> 2, "$InputSize" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]], "2" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association["Size" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "2", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Class", 
              Association[
              "Parameters" -> 
               Association["Labels" -> {Less, Greater}, "Dimensions" -> 2], 
               "Input" -> NeuralNetworks`TensorT[1, {2}]]], 
             NeuralNetworks`TensorT[1, {2}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{253., {26., 31.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.753354045855691*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", "5"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "3"}], "}"}]}], "}"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Less", ",", "Greater"}], "}"}]], "Output",
 CellChangeTimes->{3.753354053307879*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["", "Section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"DotPlusLayer", "[", 
   RowBox[{
    RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DotPlusLayer",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         TemplateBox[{GraphicsBox[{{
              Opacity[0.3], {{
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
              AbsolutePointSize[5], 
              PointBox[{{0, 0}, {1, 0}}], 
              PointBox[
               NCache[{{
                  Rational[-1, 2], 1}, {
                  Rational[1, 2], 1}, {
                  Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
            ImageSize -> 32, BaseStyle -> GrayLevel[0.65]],StyleBox[
           "\"uninitialized\"", 
            GrayLevel[0.5], FontSize -> 8, StripOnInput -> False]},
          "Labeled",
          DisplayFunction->(GridBox[{{
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}, {
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2}], "]"}]& )], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Size\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["1", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         TemplateBox[{GraphicsBox[{{
              Opacity[0.3], {{
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
              AbsolutePointSize[5], 
              PointBox[{{0, 0}, {1, 0}}], 
              PointBox[
               NCache[{{
                  Rational[-1, 2], 1}, {
                  Rational[1, 2], 1}, {
                  Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
            ImageSize -> 32, BaseStyle -> GrayLevel[0.65]],StyleBox[
           "\"uninitialized\"", 
            GrayLevel[0.5], FontSize -> 8, StripOnInput -> False]},
          "Labeled",
          DisplayFunction->(GridBox[{{
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}, {
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2}], "]"}]& )], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Size\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["1", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            ItemBox[
             StyleBox["\<\"Arrays:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Weights\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"matrix\"","\" \"",
                TemplateBox[{
                 "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                  "\" \"", 
                  
                  TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                   "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                 "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Biases\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"optional\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            ItemBox[
             StyleBox["\<\"Ports:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Input\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"encoded\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Output\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"decoded\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  None,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.753354112179981*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tnet", "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"net", ",", 
      RowBox[{"MeanAbsoluteLossLayer", "[", 
       RowBox[{"\"\<Target\>\"", "\[Rule]", "\"\<Scalar\>\""}], "]"}]}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", "\[Rule]", "2"}], "}"}]}], "]"}]}]], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", "[", 
     PanelBox[
      TagBox[
       DynamicModuleBox[{NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 
        5, NeuralNetworks`NetGraph`PackagePrivate`outIndex$$ = 4, 
        NeuralNetworks`NetGraph`PackagePrivate`inputs$$ = Association[
        "Input" -> NeuralNetworks`EncodedType[
           NetEncoder["Scalar", 
            Association[
            "Parameters" -> Association[], "Output" -> 
             NeuralNetworks`TensorT[1, {1}]]], 
           NeuralNetworks`TensorT[1, {1}]], "Target" -> 
         NeuralNetworks`EncodedType[
           NetEncoder["Scalar", 
            Association[
            "Parameters" -> Association[], "Output" -> 
             NeuralNetworks`TensorT[1, {1}]]], 
           NeuralNetworks`TensorT[1, {1}]]], 
        NeuralNetworks`NetGraph`PackagePrivate`outputs$$ = Association[
        "Loss" -> NeuralNetworks`TensorT[0, {}]], 
        NeuralNetworks`NetGraph`PackagePrivate`labels$$ = {
        "1", "2", "Input", "Target", "Loss"}, 
        NeuralNetworks`NetGraph`PackagePrivate`vertices$$ = Association[
        "1" -> Association[
          "Type" -> "DotPlus", "Arrays" -> 
           Association[
            "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
             NeuralNetworks`Nullable[
               NeuralNetworks`TensorT[1, {1}]]], "Parameters" -> 
           Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
           Association["Input" -> NeuralNetworks`TensorT[1, {1}]], "Outputs" -> 
           Association["Output" -> NeuralNetworks`TensorT[1, {1}]]], "2" -> 
         Association[
          "Type" -> "MeanAbsoluteLoss", "Arrays" -> Association[], 
           "Parameters" -> Association["$Dimensions" -> {1}, "$Rank" -> 1], 
           "Inputs" -> 
           Association[
            "Input" -> NeuralNetworks`TensorT[1, {1}], "Target" -> 
             NeuralNetworks`TensorT[1, {1}]], "Outputs" -> 
           Association["Loss" -> NeuralNetworks`TensorT[0, {}]]]], 
        NeuralNetworks`NetGraph`PackagePrivate`vports$$ = {
         NetPort["Vertices", "1"], 
         NetPort["Vertices", "2"], 
         NetPort["Inputs", "Input"], 
         NetPort["Inputs", "Target"], 
         NetPort["Outputs", "Loss"]}}, 
        TagBox[GridBox[{
           {
            TemplateBox[{TagBox[
               GraphicsBox[{{
                  GrayLevel[0.7], {
                   
                   LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-0.9999999999999999, 1.}}], 
                   
                   LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                   
                   LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999, 
                    1.}}], 
                   
                   LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}}, {
                  InsetBox[
                   GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                   0.6}, {-0.25, 0}, 
                   Offset[8], {1., 0.9999999999999999}], 
                  InsetBox[
                   GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                   1.4695761589768238`*^-16}, {-0.25, 0}, 
                   Offset[8], {1., -6.123233995736765*^-17}], 
                  InsetBox[
                   GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                   1.}, {-0.25, 0}, 
                   Offset[8], {1., -2.220446049250313*^-16}], 
                  InsetBox[
                   GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.3999999999999999, 1.}, {-0.25, 0}, 
                   Offset[8], {1., 0.}]}, {
                  GrayLevel[0], {
                   AbsolutePointSize[5], {{
                    GrayLevel[0.35], 
                    TagBox[
                    PointBox[{-2., 1.2246467991473532`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    RGBColor[1., 0.2, 1.], 
                    TagBox[
                    PointBox[{-0.9999999999999999, 1.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-3., 1.8369701987210297`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-2., 1.0000000000000002`}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{6.123233995736766*^-17, 1.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}}}, {{
                   InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{0, -5.5}, {-2., 1.2246467991473532`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                   InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-0.9999999999999999, 1.}], 
                    Offset[{0, -5.5}, {-0.9999999999999999, 1.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                   InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{0, -5.5}, {-3., 1.8369701987210297`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                   InsetBox[
                    FormBox["\"Target\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-2., 1.0000000000000002`}], 
                    Offset[{0, -5.5}, {-2., 1.0000000000000002`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                   InsetBox[
                    FormBox["\"Loss\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {6.123233995736766*^-17, 1.}], 
                    Offset[{0, -5.5}, {6.123233995736766*^-17, 1.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, 
                  StyleBox[{
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 3.8890872965260117`}, {-1.4, 
                    0.6}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071067811865476,
                     0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736765*^-17}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -2.220446049250313*^-16}], 
                    InsetBox[
                    FormBox["\"scalar\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {1., 0.}]}, 
                   FontColor -> GrayLevel[0.5], FontSize -> 8, FontWeight -> 
                   "Thin", StripOnInput -> False]}, 
                 
                 DynamicModuleBox[{
                  GeneralUtilities`Graphics`PackagePrivate`vpos$165860 = \
{{-2., 1.2246467991473532`*^-16}, {-0.9999999999999999, 1.}, {-3., 
                    1.8369701987210297`*^-16}, {-2., 1.0000000000000002`}, {
                    6.123233995736766*^-17, 1.}}}, 
                  DynamicBox[
                   Typeset`ToBoxes[
                    If[
                    Not[
                    IntegerQ[
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]], {}, {
                    AbsolutePointSize[10], 
                    Opacity[0.2, Black], 
                    Point[
                    Part[
                    GeneralUtilities`Graphics`PackagePrivate`vpos$165860, 
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]]}], 
                    StandardForm, Graphics], 
                   TrackedSymbols :> {
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$}], 
                  DynamicModuleValues :> {}]}, 
                ImageSize -> {228., 89.67999999999999}, AspectRatio -> Full, 
                PlotRangePadding -> 0, 
                ImagePadding -> {{19.5, 16.5}, {15.5, 10.179999999999993`}}, 
                ImageMargins -> {{0, 0}, {15, 15}}, 
                BaseStyle -> {TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
               
               EventHandlerTag[{
                "MouseClicked" :> (
                  NeuralNetworks`NetGraph`PackagePrivate`selection$$ = None), 
                 Method -> "Preemptive", PassEventsDown -> Automatic, 
                 PassEventsUp -> True}]],FormBox[
               TemplateBox[{
                 StyleBox["DotPlusLayer", 
                  GrayLevel[0.35], StripOnInput -> False], 
                 StyleBox["MeanAbsoluteLossLayer", 
                  GrayLevel[0.35], StripOnInput -> False]}, "PointLegend", 
                DisplayFunction -> (FormBox[
                  StyleBox[
                   StyleBox[
                    PaneBox[
                    TemplateBox[{"   ", "\"   \"", 
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.35]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.35]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #}, "RowDefault"], 
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1., 0.2, 1.]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1., 0.2, 1.]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #2}, "RowDefault"]}, 
                    "RowWithSeparators"], Alignment -> Left, 
                    AppearanceElements -> None, 
                    ImageMargins -> {{2, 2}, {2, 2}}, ImageSizeAction -> 
                    "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
                   FontFamily -> "Arial"}, Background -> Automatic, 
                   StripOnInput -> False], TraditionalForm]& ), 
                InterpretationFunction :> (RowBox[{"PointLegend", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.35], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.23333333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "GrayLevel[0.35]"], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.35]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.35], Editable -> False, Selectable -> False], 
                    "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1., 0.2, 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.6666666666666667, 0.13333333333333336`, 
                    0.6666666666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1., 0.2, 1.]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1., 0.2, 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1., 0.2, 1.], Editable -> False, Selectable -> 
                    False], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "12"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", "2"}], ",", 
                    
                    RowBox[{
                    "LegendLayout", "\[Rule]", 
                    "GeneralUtilities`Graphics`PackagePrivate`legendTable"}]}]\
, "]"}]& ), Editable -> True], TraditionalForm]},
             "Legended",
             DisplayFunction->(GridBox[{{
                 TagBox[
                  ItemBox[
                   PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                  "SkipImageSizeLevel"]}, {
                 ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
               False, GridBoxItemSize -> Automatic, 
               BaselinePosition -> {1, 1}]& ),
             Editable->True,
             InterpretationFunction->(RowBox[{"Legended", "[", 
                RowBox[{#, ",", 
                  RowBox[{"Placed", "[", 
                    RowBox[{#2, ",", "Below"}], "]"}]}], "]"}]& )]},
           {
            DynamicBox[ToBoxes[
              If[
               IntegerQ[NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
               Item[
                NeuralNetworks`NetGraph`PackagePrivate`vportInfo[
                 Part[
                 NeuralNetworks`NetGraph`PackagePrivate`vports$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                 NeuralNetworks`NetGraph`PackagePrivate`inputs$$, 
                 NeuralNetworks`NetGraph`PackagePrivate`outputs$$, 
                 NeuralNetworks`NetGraph`PackagePrivate`vertices$$], 
                Alignment -> Center], 
               Item["", ItemSize -> {0, 0}]], StandardForm],
             ImageSizeCache->{110., {24., 30.}},
             
             TrackedSymbols:>{
              NeuralNetworks`NetGraph`PackagePrivate`selection$$}]}
          },
          AutoDelete->False,
          GridBoxAlignment->{"Columns" -> {{Left}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"],
        DynamicModuleValues:>{},
        Initialization:>{NetGraph}],
       Deploy,
       DefaultBaseStyle->"Deploy"],
      BaselinePosition->(Top -> Scaled[3])], "]"}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.753354123261445*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "1.9"}], ",", 
     RowBox[{"2", "\[Rule]", "4.1"}], ",", 
     RowBox[{"3", "\[Rule]", "6.0"}], ",", 
     RowBox[{"4", "\[Rule]", "8.1"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"tnet", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"tnet", ",", "data"}], "]"}]}]}], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", "[", 
     PanelBox[
      TagBox[
       DynamicModuleBox[{NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 
        None, NeuralNetworks`NetGraph`PackagePrivate`outIndex$$ = 4, 
        NeuralNetworks`NetGraph`PackagePrivate`inputs$$ = Association[
        "Input" -> NeuralNetworks`EncodedType[
           NetEncoder["Scalar", 
            Association[
            "Parameters" -> Association[], "Output" -> 
             NeuralNetworks`TensorT[1, {1}]]], 
           NeuralNetworks`TensorT[1, {1}]], "Target" -> 
         NeuralNetworks`EncodedType[
           NetEncoder["Scalar", 
            Association[
            "Parameters" -> Association[], "Output" -> 
             NeuralNetworks`TensorT[1, {1}]]], 
           NeuralNetworks`TensorT[1, {1}]]], 
        NeuralNetworks`NetGraph`PackagePrivate`outputs$$ = Association[
        "Loss" -> NeuralNetworks`TensorT[0, {}]], 
        NeuralNetworks`NetGraph`PackagePrivate`labels$$ = {
        "1", "2", "Input", "Target", "Loss"}, 
        NeuralNetworks`NetGraph`PackagePrivate`vertices$$ = Association[
        "1" -> Association[
          "Type" -> "DotPlus", "Arrays" -> 
           Association[
            "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
             NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
           Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
           Association["Input" -> NeuralNetworks`TensorT[1, {1}]], "Outputs" -> 
           Association["Output" -> NeuralNetworks`TensorT[1, {1}]]], "2" -> 
         Association[
          "Type" -> "MeanAbsoluteLoss", "Arrays" -> Association[], 
           "Parameters" -> Association["$Dimensions" -> {1}, "$Rank" -> 1], 
           "Inputs" -> 
           Association[
            "Input" -> NeuralNetworks`TensorT[1, {1}], "Target" -> 
             NeuralNetworks`TensorT[1, {1}]], "Outputs" -> 
           Association["Loss" -> NeuralNetworks`TensorT[0, {}]]]], 
        NeuralNetworks`NetGraph`PackagePrivate`vports$$ = {
         NetPort["Vertices", "1"], 
         NetPort["Vertices", "2"], 
         NetPort["Inputs", "Input"], 
         NetPort["Inputs", "Target"], 
         NetPort["Outputs", "Loss"]}}, 
        TagBox[GridBox[{
           {
            TemplateBox[{TagBox[
               GraphicsBox[{{
                  GrayLevel[0.7], {
                   
                   LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-0.9999999999999999, 1.}}], 
                   
                   LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                   
                   LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999, 
                    1.}}], 
                   
                   LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}}, {
                  InsetBox[
                   GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                   0.6}, {-0.25, 0}, 
                   Offset[8], {1., 0.9999999999999999}], 
                  InsetBox[
                   GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                   1.4695761589768238`*^-16}, {-0.25, 0}, 
                   Offset[8], {1., -6.123233995736765*^-17}], 
                  InsetBox[
                   GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                   1.}, {-0.25, 0}, 
                   Offset[8], {1., -2.220446049250313*^-16}], 
                  InsetBox[
                   GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.3999999999999999, 1.}, {-0.25, 0}, 
                   Offset[8], {1., 0.}]}, {
                  GrayLevel[0], {
                   AbsolutePointSize[5], {{
                    GrayLevel[0.35], 
                    TagBox[
                    PointBox[{-2., 1.2246467991473532`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    RGBColor[1., 0.2, 1.], 
                    TagBox[
                    PointBox[{-0.9999999999999999, 1.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-3., 1.8369701987210297`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-2., 1.0000000000000002`}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{6.123233995736766*^-17, 1.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}}}, {{
                   InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{0, -5.5}, {-2., 1.2246467991473532`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                   InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-0.9999999999999999, 1.}], 
                    Offset[{0, -5.5}, {-0.9999999999999999, 1.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                   InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{0, -5.5}, {-3., 1.8369701987210297`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                   InsetBox[
                    FormBox["\"Target\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-2., 1.0000000000000002`}], 
                    Offset[{0, -5.5}, {-2., 1.0000000000000002`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                   InsetBox[
                    FormBox["\"Loss\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {6.123233995736766*^-17, 1.}], 
                    Offset[{0, -5.5}, {6.123233995736766*^-17, 1.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, 
                  StyleBox[{
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 3.8890872965260117`}, {-1.4, 
                    0.6}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071067811865476,
                     0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736765*^-17}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -2.220446049250313*^-16}], 
                    InsetBox[
                    FormBox["\"scalar\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {1., 0.}]}, 
                   FontColor -> GrayLevel[0.5], FontSize -> 8, FontWeight -> 
                   "Thin", StripOnInput -> False]}, 
                 
                 DynamicModuleBox[{
                  GeneralUtilities`Graphics`PackagePrivate`vpos$166004 = \
{{-2., 1.2246467991473532`*^-16}, {-0.9999999999999999, 1.}, {-3., 
                    1.8369701987210297`*^-16}, {-2., 1.0000000000000002`}, {
                    6.123233995736766*^-17, 1.}}}, 
                  DynamicBox[
                   Typeset`ToBoxes[
                    If[
                    Not[
                    IntegerQ[
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]], {}, {
                    AbsolutePointSize[10], 
                    Opacity[0.2, Black], 
                    Point[
                    Part[
                    GeneralUtilities`Graphics`PackagePrivate`vpos$166004, 
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]]}], 
                    StandardForm, Graphics], 
                   TrackedSymbols :> {
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$}], 
                  DynamicModuleValues :> {}]}, 
                ImageSize -> {228., 89.67999999999999}, AspectRatio -> Full, 
                PlotRangePadding -> 0, 
                ImagePadding -> {{19.5, 16.5}, {15.5, 10.179999999999993`}}, 
                ImageMargins -> {{0, 0}, {15, 15}}, 
                BaseStyle -> {TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
               
               EventHandlerTag[{
                "MouseClicked" :> (
                  NeuralNetworks`NetGraph`PackagePrivate`selection$$ = None), 
                 Method -> "Preemptive", PassEventsDown -> Automatic, 
                 PassEventsUp -> True}]],FormBox[
               TemplateBox[{
                 StyleBox["DotPlusLayer", 
                  GrayLevel[0.35], StripOnInput -> False], 
                 StyleBox["MeanAbsoluteLossLayer", 
                  GrayLevel[0.35], StripOnInput -> False]}, "PointLegend", 
                DisplayFunction -> (FormBox[
                  StyleBox[
                   StyleBox[
                    PaneBox[
                    TemplateBox[{"   ", "\"   \"", 
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.35]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.35]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #}, "RowDefault"], 
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1., 0.2, 1.]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1., 0.2, 1.]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #2}, "RowDefault"]}, 
                    "RowWithSeparators"], Alignment -> Left, 
                    AppearanceElements -> None, 
                    ImageMargins -> {{2, 2}, {2, 2}}, ImageSizeAction -> 
                    "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
                   FontFamily -> "Arial"}, Background -> Automatic, 
                   StripOnInput -> False], TraditionalForm]& ), 
                InterpretationFunction :> (RowBox[{"PointLegend", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.35], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.23333333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "GrayLevel[0.35]"], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.35]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.35], Editable -> False, Selectable -> False], 
                    "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1., 0.2, 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.6666666666666667, 0.13333333333333336`, 
                    0.6666666666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1., 0.2, 1.]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1., 0.2, 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1., 0.2, 1.], Editable -> False, Selectable -> 
                    False], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "12"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", "2"}], ",", 
                    
                    RowBox[{
                    "LegendLayout", "\[Rule]", 
                    "GeneralUtilities`Graphics`PackagePrivate`legendTable"}]}]\
, "]"}]& ), Editable -> True], TraditionalForm]},
             "Legended",
             DisplayFunction->(GridBox[{{
                 TagBox[
                  ItemBox[
                   PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                  "SkipImageSizeLevel"]}, {
                 ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
               False, GridBoxItemSize -> Automatic, 
               BaselinePosition -> {1, 1}]& ),
             Editable->True,
             InterpretationFunction->(RowBox[{"Legended", "[", 
                RowBox[{#, ",", 
                  RowBox[{"Placed", "[", 
                    RowBox[{#2, ",", "Below"}], "]"}]}], "]"}]& )]},
           {
            DynamicBox[ToBoxes[
              If[
               IntegerQ[NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
               Item[
                NeuralNetworks`NetGraph`PackagePrivate`vportInfo[
                 Part[
                 NeuralNetworks`NetGraph`PackagePrivate`vports$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                 NeuralNetworks`NetGraph`PackagePrivate`inputs$$, 
                 NeuralNetworks`NetGraph`PackagePrivate`outputs$$, 
                 NeuralNetworks`NetGraph`PackagePrivate`vertices$$], 
                Alignment -> Center], 
               Item["", ItemSize -> {0, 0}]], StandardForm],
             ImageSizeCache->{0., {0., 6.}},
             
             TrackedSymbols:>{
              NeuralNetworks`NetGraph`PackagePrivate`selection$$}]}
          },
          AutoDelete->False,
          GridBoxAlignment->{"Columns" -> {{Left}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"],
        DynamicModuleValues:>{},
        Initialization:>{NetGraph}],
       Deploy,
       DefaultBaseStyle->"Deploy"],
      BaselinePosition->(Top -> Scaled[3])], "]"}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.753354205900569*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "=", 
  RowBox[{"NetExtract", "[", 
   RowBox[{"tnet", ",", "1"}], "]"}]}]], "Input"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.753354213107473*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "[", 
  RowBox[{"Range", "[", "5", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.75335428564913*^9, 3.7533542909550447`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1.8999210596084595`", "}"}], ",", 
   RowBox[{"{", "3.966587543487549`", "}"}], ",", 
   RowBox[{"{", "6.0332536697387695`", "}"}], ",", 
   RowBox[{"{", "8.099920272827148`", "}"}], ",", 
   RowBox[{"{", "10.166586875915527`", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.753354291742288*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["", "Section"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tnet", "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", "Tanh", ",", "1", ",", 
      RowBox[{"MeanAbsoluteLossLayer", "[", 
       RowBox[{"\"\<Target\>\"", "\[Rule]", "\"\<Scalar\>\""}], "]"}], ",", 
      RowBox[{"MeanSquaredLossLayer", "[", 
       RowBox[{"\"\<Target\>\"", "\[Rule]", "\"\<Scalar\>\""}], "]"}]}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", 
       RowBox[{"2", "\[Rule]", 
        RowBox[{"3", "\[Rule]", "4"}]}]}], ",", 
      RowBox[{"3", "\[Rule]", "5"}], ",", 
      RowBox[{"3", "\[Rule]", 
       RowBox[{"NetPort", "[", "\"\<Output\>\"", "]"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       TagBox[
        DynamicModuleBox[{NeuralNetworks`NetGraph`PackagePrivate`selection$$ =
          3, NeuralNetworks`NetGraph`PackagePrivate`outIndex$$ = 7, 
         NeuralNetworks`NetGraph`PackagePrivate`inputs$$ = Association[
         "Input" -> NeuralNetworks`EncodedType[
            NetEncoder["Scalar", 
             Association[
             "Parameters" -> Association[], "Output" -> 
              NeuralNetworks`TensorT[1, {1}]]], 
            NeuralNetworks`TensorT[1, {1}]], "Target" -> 
          NeuralNetworks`EncodedType[
            NetEncoder["Scalar", 
             Association[
             "Parameters" -> Association[], "Output" -> 
              NeuralNetworks`TensorT[1, {1}]]], 
            NeuralNetworks`TensorT[1, {1}]]], 
         NeuralNetworks`NetGraph`PackagePrivate`outputs$$ = Association[
         "Output" -> NeuralNetworks`DecodedType[
            NetDecoder["Scalar", 
             Association[
             "Parameters" -> Association[], "Input" -> 
              NeuralNetworks`TensorT[1, {1}]]], 
            NeuralNetworks`TensorT[1, {1}]], "Loss1" -> 
          NeuralNetworks`TensorT[0, {}], "Loss2" -> 
          NeuralNetworks`TensorT[0, {}]], 
         NeuralNetworks`NetGraph`PackagePrivate`labels$$ = {
         "1", "2", "3", "4", "5", "Output", "Input", "Target", "Loss1", 
          "Loss2"}, NeuralNetworks`NetGraph`PackagePrivate`vertices$$ = 
         Association[
         "1" -> Association[
           "Type" -> "DotPlus", "Arrays" -> 
            Association[
             "Weights" -> NeuralNetworks`TensorT[2, {3, 1}], "Biases" -> 
              NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[1, {3}]]], "Parameters" -> 
            Association["Size" -> 3, "$InputSize" -> 1], "Inputs" -> 
            Association["Input" -> NeuralNetworks`TensorT[1, {1}]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`TensorT[1, {3}]]], "2" -> 
          Association[
           "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
            Association[
             "Function" -> Tanh, "$Dimensions" -> {3}, "$Rank" -> 1], 
            "Inputs" -> 
            Association["Input" -> NeuralNetworks`TensorT[1, {3}]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`TensorT[1, {3}]]], "3" -> 
          Association[
           "Type" -> "DotPlus", "Arrays" -> 
            Association[
             "Weights" -> NeuralNetworks`TensorT[2, {1, 3}], "Biases" -> 
              NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[1, {1}]]], "Parameters" -> 
            Association["Size" -> 1, "$InputSize" -> 3], "Inputs" -> 
            Association["Input" -> NeuralNetworks`TensorT[1, {3}]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`TensorT[1, {1}]]], "5" -> 
          Association[
           "Type" -> "MeanSquaredLoss", "Arrays" -> Association[], 
            "Parameters" -> Association["$Dimensions" -> {1}, "$Rank" -> 1], 
            "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[1, {1}], "Target" -> 
              NeuralNetworks`TensorT[1, {1}]], "Outputs" -> 
            Association["Loss" -> NeuralNetworks`TensorT[0, {}]]], "4" -> 
          Association[
           "Type" -> "MeanAbsoluteLoss", "Arrays" -> Association[], 
            "Parameters" -> Association["$Dimensions" -> {1}, "$Rank" -> 1], 
            "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[1, {1}], "Target" -> 
              NeuralNetworks`TensorT[1, {1}]], "Outputs" -> 
            Association["Loss" -> NeuralNetworks`TensorT[0, {}]]]], 
         NeuralNetworks`NetGraph`PackagePrivate`vports$$ = {
          NetPort["Vertices", "1"], 
          NetPort["Vertices", "2"], 
          NetPort["Vertices", "3"], 
          NetPort["Vertices", "4"], 
          NetPort["Vertices", "5"], 
          NetPort["Outputs", "Output"], 
          NetPort["Inputs", "Input"], 
          NetPort["Inputs", "Target"], 
          NetPort["Outputs", "Loss1"], 
          NetPort["Outputs", "Loss2"]}}, 
         TagBox[GridBox[{
            {
             TemplateBox[{TagBox[
                GraphicsBox[{{
                   GrayLevel[0.7], {
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}}], 
                    
                    LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-0.9999999999999999, 1.}}], 
                    
                    LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-1., -0.9999999999999999}}], 
                    
                    LineBox[{{-5., 3.061616997868383*^-16}, {-4., 
                    2.4492935982947064`*^-16}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-1., 
                    6.123233995736766*^-17}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999,
                     1.}}], 
                    LineBox[{{-1., 6.123233995736766*^-17}, {0., 0.}}], 
                    
                    LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}}, {
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    8.572527594031473*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    0.6}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999999}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.4, -0.5999999999999999}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    2.694222958124177*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    0.4000000000000002}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000000002`}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-0.4, 
                    2.4492935982947065`*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.3999999999999999, 1.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                   GrayLevel[0], {
                    AbsolutePointSize[5], {{
                    GrayLevel[0.35], 
                    TagBox[
                    PointBox[{-4., 2.4492935982947064`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    RGBColor[0.29, 0.29, 0.83], 
                    TagBox[
                    PointBox[{-3., 1.8369701987210297`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.35], 
                    TagBox[
                    PointBox[{-2., 1.2246467991473532`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    RGBColor[1., 0.2, 1.], 
                    TagBox[
                    PointBox[{-1., 6.123233995736766*^-17}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    RGBColor[1., 0.4, 1.], 
                    TagBox[
                    PointBox[{-0.9999999999999999, 1.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-1., -0.9999999999999999}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-5., 3.061616997868383*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-2., 1.0000000000000002`}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{0., 0.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{6.123233995736766*^-17, 1.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}}}, {{
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{0, -5.5}, {-4., 2.4492935982947064`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{0, -5.5}, {-3., 1.8369701987210297`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{0, -5.5}, {-2., 1.2246467991473532`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-1., 6.123233995736766*^-17}], 
                    Offset[{0, -5.5}, {-1., 6.123233995736766*^-17}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"5\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-0.9999999999999999, 1.}], 
                    Offset[{0, -5.5}, {-0.9999999999999999, 1.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-1., -0.9999999999999999}], 
                    Offset[{0, -5.5}, {-1., -0.9999999999999999}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-5., 3.061616997868383*^-16}], 
                    Offset[{0, -5.5}, {-5., 3.061616997868383*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Target\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-2., 1.0000000000000002`}], 
                    Offset[{0, -5.5}, {-2., 1.0000000000000002`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {0., 0.}], 
                    Offset[{0, -5.5}, {0., 0.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {6.123233995736766*^-17, 1.}], 
                    Offset[{0, -5.5}, {6.123233995736766*^-17, 1.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, 
                   StyleBox[{
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
                    2.0818995585505003`*^-16}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736765*^-17}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-1.4, 
                    8.572527594031473*^-17}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736766*^-17}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 3.8890872965260117`}, {-1.4, 
                    0.6}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071067811865476,
                     0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-1.4, -0.5999999999999999}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-4.4, 
                    2.694222958124177*^-16}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{3.8890872965260117`, 3.889087296526011}, {-1.4, 
                    0.4000000000000002}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067811865475, -0.7071067811865476}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -2.220446049250313*^-16}], 
                    InsetBox[
                    FormBox["\"scalar\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-0.4, 
                    2.4492935982947065`*^-17}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736766*^-17}], 
                    InsetBox[
                    FormBox["\"scalar\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {1., 0.}]}, 
                    FontColor -> GrayLevel[0.5], FontSize -> 8, FontWeight -> 
                    "Thin", StripOnInput -> False]}, 
                  
                  DynamicModuleBox[{
                   GeneralUtilities`Graphics`PackagePrivate`vpos$166113 = \
{{-4., 2.4492935982947064`*^-16}, {-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}, {-0.9999999999999999, 
                    1.}, {-1., -0.9999999999999999}, {-5., 
                    3.061616997868383*^-16}, {-2., 1.0000000000000002`}, {0., 
                    0.}, {6.123233995736766*^-17, 1.}}}, 
                   DynamicBox[
                    Typeset`ToBoxes[
                    If[
                    Not[
                    IntegerQ[
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]], {}, {
                    AbsolutePointSize[10], 
                    Opacity[0.2, Black], 
                    Point[
                    Part[
                    GeneralUtilities`Graphics`PackagePrivate`vpos$166113, 
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]]}], 
                    StandardForm, Graphics], 
                    TrackedSymbols :> {
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$}], 
                   DynamicModuleValues :> {}]}, ImageSize -> {359., 153.68}, 
                 AspectRatio -> Full, PlotRangePadding -> 0, 
                 ImagePadding -> {{19.5, 19.5}, {15.500000000000007`, 
                  10.179999999999993`}}, ImageMargins -> {{0, 0}, {15, 15}}, 
                 BaseStyle -> {TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                
                
                EventHandlerTag[{
                 "MouseClicked" :> (
                   NeuralNetworks`NetGraph`PackagePrivate`selection$$ = None),
                   Method -> "Preemptive", PassEventsDown -> Automatic, 
                  PassEventsUp -> True}]],FormBox[
                TemplateBox[{
                  StyleBox["DotPlusLayer", 
                   GrayLevel[0.35], StripOnInput -> False], 
                  StyleBox["ElementwiseLayer", 
                   GrayLevel[0.35], StripOnInput -> False], 
                  StyleBox["MeanAbsoluteLossLayer", 
                   GrayLevel[0.35], StripOnInput -> False], 
                  StyleBox["MeanSquaredLossLayer", 
                   GrayLevel[0.35], StripOnInput -> False]}, "PointLegend", 
                 DisplayFunction -> (FormBox[
                   StyleBox[
                    StyleBox[
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.35]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.35]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #}, "RowDefault"], 
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1., 0.2, 1.]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1., 0.2, 1.]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #3}, "RowDefault"]}, {
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.29, 0.29, 0.83]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.29, 0.29, 0.83]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #2}, "RowDefault"], 
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1., 0.4, 1.]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1., 0.4, 1.]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #4}, "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], Alignment -> Left, AppearanceElements -> None, 
                    ImageMargins -> {{2, 2}, {2, 2}}, ImageSizeAction -> 
                    "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
                    FontFamily -> "Arial"}, Background -> Automatic, 
                    StripOnInput -> False], TraditionalForm]& ), 
                 InterpretationFunction :> (RowBox[{"PointLegend", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.35], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.23333333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "GrayLevel[0.35]"], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.35]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.35], Editable -> False, Selectable -> False], 
                    "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.29, 0.29, 0.83], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.19333333333333333`, 0.19333333333333333`, 
                    0.5533333333333333], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.29, 0.29, 0.83]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.29, 0.29, 0.83]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.29, 0.29, 0.83], Editable -> False, Selectable -> 
                    False], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1., 0.2, 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.6666666666666667, 0.13333333333333336`, 
                    0.6666666666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1., 0.2, 1.]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1., 0.2, 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1., 0.2, 1.], Editable -> False, Selectable -> 
                    False], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1., 0.4, 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.6666666666666667, 0.2666666666666667, 
                    0.6666666666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1., 0.4, 1.]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1., 0.4, 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1., 0.4, 1.], Editable -> False, Selectable -> 
                    False], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "12"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", "2"}], ",", 
                    
                    RowBox[{
                    "LegendLayout", "\[Rule]", 
                    "GeneralUtilities`Graphics`PackagePrivate`legendTable"}]}]\
, "]"}]& ), Editable -> True], TraditionalForm]},
              "Legended",
              DisplayFunction->(GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> Automatic, 
                BaselinePosition -> {1, 1}]& ),
              Editable->True,
              InterpretationFunction->(RowBox[{"Legended", "[", 
                 RowBox[{#, ",", 
                   RowBox[{"Placed", "[", 
                    RowBox[{#2, ",", "Below"}], "]"}]}], "]"}]& )]},
            {
             DynamicBox[ToBoxes[
               If[
                IntegerQ[NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                
                Item[
                 NeuralNetworks`NetGraph`PackagePrivate`vportInfo[
                  Part[
                  NeuralNetworks`NetGraph`PackagePrivate`vports$$, 
                   NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                  NeuralNetworks`NetGraph`PackagePrivate`inputs$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`outputs$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`vertices$$], 
                 Alignment -> Center], 
                Item["", ItemSize -> {0, 0}]], StandardForm],
              ImageSizeCache->{253., {81., 87.}},
              
              TrackedSymbols:>{
               NeuralNetworks`NetGraph`PackagePrivate`selection$$}]}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"],
         DynamicModuleValues:>{},
         Initialization:>{NetGraph}],
        Deploy,
        DefaultBaseStyle->"Deploy"],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.753354416911714*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"NetInitialize", "[", "tnet", "]"}], "[", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<Input\>\"", "\[Rule]", "5"}], ",", 
    RowBox[{"\"\<Target\>\"", "\[Rule]", "3"}]}], "|>"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Output\"\>", "\[Rule]", "1.4048025608062744`"}], ",", 
   RowBox[{"\<\"Loss1\"\>", "\[Rule]", "1.5951974391937256`"}], ",", 
   RowBox[{"\<\"Loss2\"\>", "\[Rule]", "2.5446548461914062`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.753354559844407*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:6307\:5b9a\:5355\:4e2a\:635f\:5931\:51fd\:6570", "Subsection",
 CellChangeTimes->{{3.753354683245194*^9, 3.753354705877707*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"tnet", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "1.9"}], ",", 
      RowBox[{"2", "\[Rule]", "4.1"}], ",", 
      RowBox[{"3", "\[Rule]", "6.0"}], ",", 
      RowBox[{"4", "\[Rule]", "8.1"}]}], "}"}], ",", "\"\<Loss1\>\""}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       TagBox[
        DynamicModuleBox[{NeuralNetworks`NetGraph`PackagePrivate`selection$$ =
          None, NeuralNetworks`NetGraph`PackagePrivate`outIndex$$ = 7, 
         NeuralNetworks`NetGraph`PackagePrivate`inputs$$ = Association[
         "Input" -> NeuralNetworks`EncodedType[
            NetEncoder["Scalar", 
             Association[
             "Parameters" -> Association[], "Output" -> 
              NeuralNetworks`TensorT[1, {1}]]], 
            NeuralNetworks`TensorT[1, {1}]], "Target" -> 
          NeuralNetworks`EncodedType[
            NetEncoder["Scalar", 
             Association[
             "Parameters" -> Association[], "Output" -> 
              NeuralNetworks`TensorT[1, {1}]]], 
            NeuralNetworks`TensorT[1, {1}]]], 
         NeuralNetworks`NetGraph`PackagePrivate`outputs$$ = Association[
         "Output" -> NeuralNetworks`DecodedType[
            NetDecoder["Scalar", 
             Association[
             "Parameters" -> Association[], "Input" -> 
              NeuralNetworks`TensorT[1, {1}]]], 
            NeuralNetworks`TensorT[1, {1}]], "Loss1" -> 
          NeuralNetworks`TensorT[0, {}], "Loss2" -> 
          NeuralNetworks`TensorT[0, {}]], 
         NeuralNetworks`NetGraph`PackagePrivate`labels$$ = {
         "1", "2", "3", "4", "5", "Output", "Input", "Target", "Loss1", 
          "Loss2"}, NeuralNetworks`NetGraph`PackagePrivate`vertices$$ = 
         Association[
         "1" -> Association[
           "Type" -> "DotPlus", "Arrays" -> 
            Association[
             "Weights" -> NeuralNetworks`TensorT[2, {3, 1}], "Biases" -> 
              NeuralNetworks`TensorT[1, {3}]], "Parameters" -> 
            Association["Size" -> 3, "$InputSize" -> 1], "Inputs" -> 
            Association["Input" -> NeuralNetworks`TensorT[1, {1}]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`TensorT[1, {3}]]], "2" -> 
          Association[
           "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
            Association[
             "Function" -> Tanh, "$Dimensions" -> {3}, "$Rank" -> 1], 
            "Inputs" -> 
            Association["Input" -> NeuralNetworks`TensorT[1, {3}]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`TensorT[1, {3}]]], "3" -> 
          Association[
           "Type" -> "DotPlus", "Arrays" -> 
            Association[
             "Weights" -> NeuralNetworks`TensorT[2, {1, 3}], "Biases" -> 
              NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
            Association["Size" -> 1, "$InputSize" -> 3], "Inputs" -> 
            Association["Input" -> NeuralNetworks`TensorT[1, {3}]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`TensorT[1, {1}]]], "5" -> 
          Association[
           "Type" -> "MeanSquaredLoss", "Arrays" -> Association[], 
            "Parameters" -> Association["$Dimensions" -> {1}, "$Rank" -> 1], 
            "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[1, {1}], "Target" -> 
              NeuralNetworks`TensorT[1, {1}]], "Outputs" -> 
            Association["Loss" -> NeuralNetworks`TensorT[0, {}]]], "4" -> 
          Association[
           "Type" -> "MeanAbsoluteLoss", "Arrays" -> Association[], 
            "Parameters" -> Association["$Dimensions" -> {1}, "$Rank" -> 1], 
            "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[1, {1}], "Target" -> 
              NeuralNetworks`TensorT[1, {1}]], "Outputs" -> 
            Association["Loss" -> NeuralNetworks`TensorT[0, {}]]]], 
         NeuralNetworks`NetGraph`PackagePrivate`vports$$ = {
          NetPort["Vertices", "1"], 
          NetPort["Vertices", "2"], 
          NetPort["Vertices", "3"], 
          NetPort["Vertices", "4"], 
          NetPort["Vertices", "5"], 
          NetPort["Outputs", "Output"], 
          NetPort["Inputs", "Input"], 
          NetPort["Inputs", "Target"], 
          NetPort["Outputs", "Loss1"], 
          NetPort["Outputs", "Loss2"]}}, 
         TagBox[GridBox[{
            {
             TemplateBox[{TagBox[
                GraphicsBox[{{
                   GrayLevel[0.7], {
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}}], 
                    
                    LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-0.9999999999999999, 1.}}], 
                    
                    LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-1., -0.9999999999999999}}], 
                    
                    LineBox[{{-5., 3.061616997868383*^-16}, {-4., 
                    2.4492935982947064`*^-16}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-1., 
                    6.123233995736766*^-17}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999,
                     1.}}], 
                    LineBox[{{-1., 6.123233995736766*^-17}, {0., 0.}}], 
                    
                    LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}}, {
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    8.572527594031473*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    0.6}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999999}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.4, -0.5999999999999999}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    2.694222958124177*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    0.4000000000000002}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000000002`}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-0.4, 
                    2.4492935982947065`*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.3999999999999999, 1.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                   GrayLevel[0], {
                    AbsolutePointSize[5], {{
                    GrayLevel[0.35], 
                    TagBox[
                    PointBox[{-4., 2.4492935982947064`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    RGBColor[0.29, 0.29, 0.83], 
                    TagBox[
                    PointBox[{-3., 1.8369701987210297`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.35], 
                    TagBox[
                    PointBox[{-2., 1.2246467991473532`*^-16}], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    RGBColor[1., 0.2, 1.], 
                    TagBox[
                    PointBox[{-1., 6.123233995736766*^-17}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    RGBColor[1., 0.4, 1.], 
                    TagBox[
                    PointBox[{-0.9999999999999999, 1.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-1., -0.9999999999999999}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-5., 3.061616997868383*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-2., 1.0000000000000002`}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{0., 0.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{6.123233995736766*^-17, 1.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}}}, {{
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{0, -5.5}, {-4., 2.4492935982947064`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{0, -5.5}, {-3., 1.8369701987210297`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{0, -5.5}, {-2., 1.2246467991473532`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-1., 6.123233995736766*^-17}], 
                    Offset[{0, -5.5}, {-1., 6.123233995736766*^-17}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"5\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-0.9999999999999999, 1.}], 
                    Offset[{0, -5.5}, {-0.9999999999999999, 1.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-1., -0.9999999999999999}], 
                    Offset[{0, -5.5}, {-1., -0.9999999999999999}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-5., 3.061616997868383*^-16}], 
                    Offset[{0, -5.5}, {-5., 3.061616997868383*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Target\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-2., 1.0000000000000002`}], 
                    Offset[{0, -5.5}, {-2., 1.0000000000000002`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {0., 0.}], 
                    Offset[{0, -5.5}, {0., 0.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {6.123233995736766*^-17, 1.}], 
                    Offset[{0, -5.5}, {6.123233995736766*^-17, 1.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, 
                   StyleBox[{
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
                    2.0818995585505003`*^-16}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736765*^-17}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-1.4, 
                    8.572527594031473*^-17}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736766*^-17}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 3.8890872965260117`}, {-1.4, 
                    0.6}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071067811865476,
                     0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-1.4, -0.5999999999999999}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-4.4, 
                    2.694222958124177*^-16}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{3.8890872965260117`, 3.889087296526011}, {-1.4, 
                    0.4000000000000002}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067811865475, -0.7071067811865476}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -2.220446049250313*^-16}], 
                    InsetBox[
                    FormBox["\"scalar\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-0.4, 
                    2.4492935982947065`*^-17}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736766*^-17}], 
                    InsetBox[
                    FormBox["\"scalar\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {1., 0.}]}, 
                    FontColor -> GrayLevel[0.5], FontSize -> 8, FontWeight -> 
                    "Thin", StripOnInput -> False]}, 
                  
                  DynamicModuleBox[{
                   GeneralUtilities`Graphics`PackagePrivate`vpos$166458 = \
{{-4., 2.4492935982947064`*^-16}, {-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}, {-0.9999999999999999, 
                    1.}, {-1., -0.9999999999999999}, {-5., 
                    3.061616997868383*^-16}, {-2., 1.0000000000000002`}, {0., 
                    0.}, {6.123233995736766*^-17, 1.}}}, 
                   DynamicBox[
                    Typeset`ToBoxes[
                    If[
                    Not[
                    IntegerQ[
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]], {}, {
                    AbsolutePointSize[10], 
                    Opacity[0.2, Black], 
                    Point[
                    Part[
                    GeneralUtilities`Graphics`PackagePrivate`vpos$166458, 
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]]}], 
                    StandardForm, Graphics], 
                    TrackedSymbols :> {
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$}], 
                   DynamicModuleValues :> {}]}, ImageSize -> {359., 153.68}, 
                 AspectRatio -> Full, PlotRangePadding -> 0, 
                 ImagePadding -> {{19.5, 19.5}, {15.500000000000007`, 
                  10.179999999999993`}}, ImageMargins -> {{0, 0}, {15, 15}}, 
                 BaseStyle -> {TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                
                
                EventHandlerTag[{
                 "MouseClicked" :> (
                   NeuralNetworks`NetGraph`PackagePrivate`selection$$ = None),
                   Method -> "Preemptive", PassEventsDown -> Automatic, 
                  PassEventsUp -> True}]],FormBox[
                TemplateBox[{
                  StyleBox["DotPlusLayer", 
                   GrayLevel[0.35], StripOnInput -> False], 
                  StyleBox["ElementwiseLayer", 
                   GrayLevel[0.35], StripOnInput -> False], 
                  StyleBox["MeanAbsoluteLossLayer", 
                   GrayLevel[0.35], StripOnInput -> False], 
                  StyleBox["MeanSquaredLossLayer", 
                   GrayLevel[0.35], StripOnInput -> False]}, "PointLegend", 
                 DisplayFunction -> (FormBox[
                   StyleBox[
                    StyleBox[
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.35]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.35]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #}, "RowDefault"], 
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1., 0.2, 1.]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1., 0.2, 1.]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #3}, "RowDefault"]}, {
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.29, 0.29, 0.83]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.29, 0.29, 0.83]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #2}, "RowDefault"], 
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1., 0.4, 1.]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1., 0.4, 1.]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #4}, "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], Alignment -> Left, AppearanceElements -> None, 
                    ImageMargins -> {{2, 2}, {2, 2}}, ImageSizeAction -> 
                    "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
                    FontFamily -> "Arial"}, Background -> Automatic, 
                    StripOnInput -> False], TraditionalForm]& ), 
                 InterpretationFunction :> (RowBox[{"PointLegend", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.35], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.23333333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "GrayLevel[0.35]"], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.35]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.35], Editable -> False, Selectable -> False], 
                    "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.29, 0.29, 0.83], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.19333333333333333`, 0.19333333333333333`, 
                    0.5533333333333333], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.29, 0.29, 0.83]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.29, 0.29, 0.83]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.29, 0.29, 0.83], Editable -> False, Selectable -> 
                    False], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1., 0.2, 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.6666666666666667, 0.13333333333333336`, 
                    0.6666666666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1., 0.2, 1.]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1., 0.2, 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1., 0.2, 1.], Editable -> False, Selectable -> 
                    False], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1., 0.4, 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.6666666666666667, 0.2666666666666667, 
                    0.6666666666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1., 0.4, 1.]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1., 0.4, 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1., 0.4, 1.], Editable -> False, Selectable -> 
                    False], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "12"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", "2"}], ",", 
                    
                    RowBox[{
                    "LegendLayout", "\[Rule]", 
                    "GeneralUtilities`Graphics`PackagePrivate`legendTable"}]}]\
, "]"}]& ), Editable -> True], TraditionalForm]},
              "Legended",
              DisplayFunction->(GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> Automatic, 
                BaselinePosition -> {1, 1}]& ),
              Editable->True,
              InterpretationFunction->(RowBox[{"Legended", "[", 
                 RowBox[{#, ",", 
                   RowBox[{"Placed", "[", 
                    RowBox[{#2, ",", "Below"}], "]"}]}], "]"}]& )]},
            {
             DynamicBox[ToBoxes[
               If[
                IntegerQ[NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                
                Item[
                 NeuralNetworks`NetGraph`PackagePrivate`vportInfo[
                  Part[
                  NeuralNetworks`NetGraph`PackagePrivate`vports$$, 
                   NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                  NeuralNetworks`NetGraph`PackagePrivate`inputs$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`outputs$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`vertices$$], 
                 Alignment -> Center], 
                Item["", ItemSize -> {0, 0}]], StandardForm],
              ImageSizeCache->{0., {0., 6.}},
              TrackedSymbols:>{
               NeuralNetworks`NetGraph`PackagePrivate`selection$$}]}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"],
         DynamicModuleValues:>{},
         Initialization:>{NetGraph}],
        Deploy,
        DefaultBaseStyle->"Deploy"],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.753354666836926*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:6307\:5b9a\:591a\:4e2a\:635f\:5931\:51fd\:6570", "Subsection",
 CellChangeTimes->{{3.753354711526122*^9, 3.753354717760612*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"tnet", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "1.9"}], ",", 
      RowBox[{"2", "\[Rule]", "4.1"}], ",", 
      RowBox[{"3", "\[Rule]", "6.0"}], ",", 
      RowBox[{"4", "\[Rule]", "8.1"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<Loss1\>\"", ",", "\"\<Loss2\>\""}], "}"}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       TagBox[
        DynamicModuleBox[{NeuralNetworks`NetGraph`PackagePrivate`selection$$ =
          None, NeuralNetworks`NetGraph`PackagePrivate`outIndex$$ = 7, 
         NeuralNetworks`NetGraph`PackagePrivate`inputs$$ = Association[
         "Input" -> NeuralNetworks`EncodedType[
            NetEncoder["Scalar", 
             Association[
             "Parameters" -> Association[], "Output" -> 
              NeuralNetworks`TensorT[1, {1}]]], 
            NeuralNetworks`TensorT[1, {1}]], "Target" -> 
          NeuralNetworks`EncodedType[
            NetEncoder["Scalar", 
             Association[
             "Parameters" -> Association[], "Output" -> 
              NeuralNetworks`TensorT[1, {1}]]], 
            NeuralNetworks`TensorT[1, {1}]]], 
         NeuralNetworks`NetGraph`PackagePrivate`outputs$$ = Association[
         "Output" -> NeuralNetworks`DecodedType[
            NetDecoder["Scalar", 
             Association[
             "Parameters" -> Association[], "Input" -> 
              NeuralNetworks`TensorT[1, {1}]]], 
            NeuralNetworks`TensorT[1, {1}]], "Loss1" -> 
          NeuralNetworks`TensorT[0, {}], "Loss2" -> 
          NeuralNetworks`TensorT[0, {}]], 
         NeuralNetworks`NetGraph`PackagePrivate`labels$$ = {
         "1", "2", "3", "4", "5", "Output", "Input", "Target", "Loss1", 
          "Loss2"}, NeuralNetworks`NetGraph`PackagePrivate`vertices$$ = 
         Association[
         "1" -> Association[
           "Type" -> "DotPlus", "Arrays" -> 
            Association[
             "Weights" -> NeuralNetworks`TensorT[2, {3, 1}], "Biases" -> 
              NeuralNetworks`TensorT[1, {3}]], "Parameters" -> 
            Association["Size" -> 3, "$InputSize" -> 1], "Inputs" -> 
            Association["Input" -> NeuralNetworks`TensorT[1, {1}]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`TensorT[1, {3}]]], "2" -> 
          Association[
           "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
            Association[
             "Function" -> Tanh, "$Dimensions" -> {3}, "$Rank" -> 1], 
            "Inputs" -> 
            Association["Input" -> NeuralNetworks`TensorT[1, {3}]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`TensorT[1, {3}]]], "3" -> 
          Association[
           "Type" -> "DotPlus", "Arrays" -> 
            Association[
             "Weights" -> NeuralNetworks`TensorT[2, {1, 3}], "Biases" -> 
              NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
            Association["Size" -> 1, "$InputSize" -> 3], "Inputs" -> 
            Association["Input" -> NeuralNetworks`TensorT[1, {3}]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`TensorT[1, {1}]]], "5" -> 
          Association[
           "Type" -> "MeanSquaredLoss", "Arrays" -> Association[], 
            "Parameters" -> Association["$Dimensions" -> {1}, "$Rank" -> 1], 
            "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[1, {1}], "Target" -> 
              NeuralNetworks`TensorT[1, {1}]], "Outputs" -> 
            Association["Loss" -> NeuralNetworks`TensorT[0, {}]]], "4" -> 
          Association[
           "Type" -> "MeanAbsoluteLoss", "Arrays" -> Association[], 
            "Parameters" -> Association["$Dimensions" -> {1}, "$Rank" -> 1], 
            "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[1, {1}], "Target" -> 
              NeuralNetworks`TensorT[1, {1}]], "Outputs" -> 
            Association["Loss" -> NeuralNetworks`TensorT[0, {}]]]], 
         NeuralNetworks`NetGraph`PackagePrivate`vports$$ = {
          NetPort["Vertices", "1"], 
          NetPort["Vertices", "2"], 
          NetPort["Vertices", "3"], 
          NetPort["Vertices", "4"], 
          NetPort["Vertices", "5"], 
          NetPort["Outputs", "Output"], 
          NetPort["Inputs", "Input"], 
          NetPort["Inputs", "Target"], 
          NetPort["Outputs", "Loss1"], 
          NetPort["Outputs", "Loss2"]}}, 
         TagBox[GridBox[{
            {
             TemplateBox[{TagBox[
                GraphicsBox[{{
                   GrayLevel[0.7], {
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}}], 
                    
                    LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-0.9999999999999999, 1.}}], 
                    
                    LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-1., -0.9999999999999999}}], 
                    
                    LineBox[{{-5., 3.061616997868383*^-16}, {-4., 
                    2.4492935982947064`*^-16}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-1., 
                    6.123233995736766*^-17}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999,
                     1.}}], 
                    LineBox[{{-1., 6.123233995736766*^-17}, {0., 0.}}], 
                    
                    LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}}, {
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    8.572527594031473*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    0.6}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999999}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.4, -0.5999999999999999}, {-0.25, 0}, 
                    Offset[8], {1., -1.}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
                    2.694222958124177*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    0.4000000000000002}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000000002`}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-0.4, 
                    2.4492935982947065`*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.3999999999999999, 1.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                   GrayLevel[0], {
                    AbsolutePointSize[5], {{
                    GrayLevel[0.35], 
                    TagBox[
                    PointBox[{-4., 2.4492935982947064`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    RGBColor[0.29, 0.29, 0.83], 
                    TagBox[
                    PointBox[{-3., 1.8369701987210297`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.35], 
                    TagBox[
                    PointBox[{-2., 1.2246467991473532`*^-16}], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    RGBColor[1., 0.2, 1.], 
                    TagBox[
                    PointBox[{-1., 6.123233995736766*^-17}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    RGBColor[1., 0.4, 1.], 
                    TagBox[
                    PointBox[{-0.9999999999999999, 1.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-1., -0.9999999999999999}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-5., 3.061616997868383*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-2., 1.0000000000000002`}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{0., 0.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{6.123233995736766*^-17, 1.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}}}, {{
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{0, -5.5}, {-4., 2.4492935982947064`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{0, -5.5}, {-3., 1.8369701987210297`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{0, -5.5}, {-2., 1.2246467991473532`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-1., 6.123233995736766*^-17}], 
                    Offset[{0, -5.5}, {-1., 6.123233995736766*^-17}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"5\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-0.9999999999999999, 1.}], 
                    Offset[{0, -5.5}, {-0.9999999999999999, 1.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-1., -0.9999999999999999}], 
                    Offset[{0, -5.5}, {-1., -0.9999999999999999}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-5., 3.061616997868383*^-16}], 
                    Offset[{0, -5.5}, {-5., 3.061616997868383*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Target\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-2., 1.0000000000000002`}], 
                    Offset[{0, -5.5}, {-2., 1.0000000000000002`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {0., 0.}], 
                    Offset[{0, -5.5}, {0., 0.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {6.123233995736766*^-17, 1.}], 
                    Offset[{0, -5.5}, {6.123233995736766*^-17, 1.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, 
                   StyleBox[{
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
                    2.0818995585505003`*^-16}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736765*^-17}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-1.4, 
                    8.572527594031473*^-17}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736766*^-17}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 3.8890872965260117`}, {-1.4, 
                    0.6}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071067811865476,
                     0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-1.4, -0.5999999999999999}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-4.4, 
                    2.694222958124177*^-16}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{3.8890872965260117`, 3.889087296526011}, {-1.4, 
                    0.4000000000000002}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067811865475, -0.7071067811865476}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -2.220446049250313*^-16}], 
                    InsetBox[
                    FormBox["\"scalar\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-0.4, 
                    2.4492935982947065`*^-17}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736766*^-17}], 
                    InsetBox[
                    FormBox["\"scalar\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {1., 0.}]}, 
                    FontColor -> GrayLevel[0.5], FontSize -> 8, FontWeight -> 
                    "Thin", StripOnInput -> False]}, 
                  
                  DynamicModuleBox[{
                   GeneralUtilities`Graphics`PackagePrivate`vpos$166625 = \
{{-4., 2.4492935982947064`*^-16}, {-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}, {-0.9999999999999999, 
                    1.}, {-1., -0.9999999999999999}, {-5., 
                    3.061616997868383*^-16}, {-2., 1.0000000000000002`}, {0., 
                    0.}, {6.123233995736766*^-17, 1.}}}, 
                   DynamicBox[
                    Typeset`ToBoxes[
                    If[
                    Not[
                    IntegerQ[
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]], {}, {
                    AbsolutePointSize[10], 
                    Opacity[0.2, Black], 
                    Point[
                    Part[
                    GeneralUtilities`Graphics`PackagePrivate`vpos$166625, 
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]]}], 
                    StandardForm, Graphics], 
                    TrackedSymbols :> {
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$}], 
                   DynamicModuleValues :> {}]}, ImageSize -> {359., 153.68}, 
                 AspectRatio -> Full, PlotRangePadding -> 0, 
                 ImagePadding -> {{19.5, 19.5}, {15.500000000000007`, 
                  10.179999999999993`}}, ImageMargins -> {{0, 0}, {15, 15}}, 
                 BaseStyle -> {TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                
                
                EventHandlerTag[{
                 "MouseClicked" :> (
                   NeuralNetworks`NetGraph`PackagePrivate`selection$$ = None),
                   Method -> "Preemptive", PassEventsDown -> Automatic, 
                  PassEventsUp -> True}]],FormBox[
                TemplateBox[{
                  StyleBox["DotPlusLayer", 
                   GrayLevel[0.35], StripOnInput -> False], 
                  StyleBox["ElementwiseLayer", 
                   GrayLevel[0.35], StripOnInput -> False], 
                  StyleBox["MeanAbsoluteLossLayer", 
                   GrayLevel[0.35], StripOnInput -> False], 
                  StyleBox["MeanSquaredLossLayer", 
                   GrayLevel[0.35], StripOnInput -> False]}, "PointLegend", 
                 DisplayFunction -> (FormBox[
                   StyleBox[
                    StyleBox[
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.35]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.35]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #}, "RowDefault"], 
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1., 0.2, 1.]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1., 0.2, 1.]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #3}, "RowDefault"]}, {
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.29, 0.29, 0.83]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.29, 0.29, 0.83]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #2}, "RowDefault"], 
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1., 0.4, 1.]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1., 0.4, 1.]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #4}, "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], Alignment -> Left, AppearanceElements -> None, 
                    ImageMargins -> {{2, 2}, {2, 2}}, ImageSizeAction -> 
                    "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
                    FontFamily -> "Arial"}, Background -> Automatic, 
                    StripOnInput -> False], TraditionalForm]& ), 
                 InterpretationFunction :> (RowBox[{"PointLegend", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.35], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.23333333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "GrayLevel[0.35]"], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.35]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.35], Editable -> False, Selectable -> False], 
                    "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.29, 0.29, 0.83], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.19333333333333333`, 0.19333333333333333`, 
                    0.5533333333333333], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.29, 0.29, 0.83]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.29, 0.29, 0.83]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.29, 0.29, 0.83], Editable -> False, Selectable -> 
                    False], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1., 0.2, 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.6666666666666667, 0.13333333333333336`, 
                    0.6666666666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1., 0.2, 1.]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1., 0.2, 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1., 0.2, 1.], Editable -> False, Selectable -> 
                    False], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1., 0.4, 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.6666666666666667, 0.2666666666666667, 
                    0.6666666666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1., 0.4, 1.]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1., 0.4, 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1., 0.4, 1.], Editable -> False, Selectable -> 
                    False], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "12"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", "2"}], ",", 
                    
                    RowBox[{
                    "LegendLayout", "\[Rule]", 
                    "GeneralUtilities`Graphics`PackagePrivate`legendTable"}]}]\
, "]"}]& ), Editable -> True], TraditionalForm]},
              "Legended",
              DisplayFunction->(GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> Automatic, 
                BaselinePosition -> {1, 1}]& ),
              Editable->True,
              InterpretationFunction->(RowBox[{"Legended", "[", 
                 RowBox[{#, ",", 
                   RowBox[{"Placed", "[", 
                    RowBox[{#2, ",", "Below"}], "]"}]}], "]"}]& )]},
            {
             DynamicBox[ToBoxes[
               If[
                IntegerQ[NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                
                Item[
                 NeuralNetworks`NetGraph`PackagePrivate`vportInfo[
                  Part[
                  NeuralNetworks`NetGraph`PackagePrivate`vports$$, 
                   NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                  NeuralNetworks`NetGraph`PackagePrivate`inputs$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`outputs$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`vertices$$], 
                 Alignment -> Center], 
                Item["", ItemSize -> {0, 0}]], StandardForm],
              ImageSizeCache->{0., {0., 6.}},
              TrackedSymbols:>{
               NeuralNetworks`NetGraph`PackagePrivate`selection$$}]}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"],
         DynamicModuleValues:>{},
         Initialization:>{NetGraph}],
        Deploy,
        DefaultBaseStyle->"Deploy"],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.753354735487398*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "=", 
  RowBox[{"Take", "[", 
   RowBox[{"trained", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], ",", 
      RowBox[{"NetPort", "[", "\"\<Output\>\"", "]"}]}], "}"}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", "[", 
     PanelBox[
      TagBox[
       DynamicModuleBox[{NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 
        None, NeuralNetworks`NetGraph`PackagePrivate`outIndex$$ = 4, 
        NeuralNetworks`NetGraph`PackagePrivate`inputs$$ = Association[
        "Input" -> NeuralNetworks`EncodedType[
           NetEncoder["Scalar", 
            Association[
            "Parameters" -> Association[], "Output" -> 
             NeuralNetworks`TensorT[1, {1}]]], 
           NeuralNetworks`TensorT[1, {1}]]], 
        NeuralNetworks`NetGraph`PackagePrivate`outputs$$ = Association[
        "Output" -> NeuralNetworks`DecodedType[
           NetDecoder["Scalar", 
            Association[
            "Parameters" -> Association[], "Input" -> 
             NeuralNetworks`TensorT[1, {1}]]], 
           NeuralNetworks`TensorT[1, {1}]]], 
        NeuralNetworks`NetGraph`PackagePrivate`labels$$ = {
        "1", "2", "3", "Output", "Input"}, 
        NeuralNetworks`NetGraph`PackagePrivate`vertices$$ = Association[
        "1" -> Association[
          "Type" -> "DotPlus", "Arrays" -> 
           Association[
            "Weights" -> NeuralNetworks`TensorT[2, {3, 1}], "Biases" -> 
             NeuralNetworks`TensorT[1, {3}]], "Parameters" -> 
           Association["Size" -> 3, "$InputSize" -> 1], "Inputs" -> 
           Association["Input" -> NeuralNetworks`TensorT[1, {1}]], "Outputs" -> 
           Association["Output" -> NeuralNetworks`TensorT[1, {3}]]], "2" -> 
         Association[
          "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
           Association[
            "Function" -> Tanh, "$Dimensions" -> {3}, "$Rank" -> 1], "Inputs" -> 
           Association["Input" -> NeuralNetworks`TensorT[1, {3}]], "Outputs" -> 
           Association["Output" -> NeuralNetworks`TensorT[1, {3}]]], "3" -> 
         Association[
          "Type" -> "DotPlus", "Arrays" -> 
           Association[
            "Weights" -> NeuralNetworks`TensorT[2, {1, 3}], "Biases" -> 
             NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
           Association["Size" -> 1, "$InputSize" -> 3], "Inputs" -> 
           Association["Input" -> NeuralNetworks`TensorT[1, {3}]], "Outputs" -> 
           Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetGraph`PackagePrivate`vports$$ = {
         NetPort["Vertices", "1"], 
         NetPort["Vertices", "2"], 
         NetPort["Vertices", "3"], 
         NetPort["Outputs", "Output"], 
         NetPort["Inputs", "Input"]}}, 
        TagBox[GridBox[{
           {
            TemplateBox[{TagBox[
               GraphicsBox[{{
                  GrayLevel[0.7], {
                   
                   LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                   
                   LineBox[{{-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}}], 
                   LineBox[{{-1., 6.123233995736766*^-17}, {0., 0.}}], 
                   
                   LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}]}}, {
                  InsetBox[
                   GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                   1.4695761589768238`*^-16}, {-0.25, 0}, 
                   Offset[8], {1., -6.123233995736765*^-17}], 
                  InsetBox[
                   GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                   8.572527594031473*^-17}, {-0.25, 0}, 
                   Offset[8], {1., -6.123233995736766*^-17}], 
                  InsetBox[
                   GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-0.4, 
                   2.4492935982947065`*^-17}, {-0.25, 0}, 
                   Offset[8], {1., -6.123233995736766*^-17}], 
                  InsetBox[
                   GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                   2.0818995585505003`*^-16}, {-0.25, 0}, 
                   Offset[8], {1., -6.123233995736767*^-17}]}, {
                  GrayLevel[0], {
                   AbsolutePointSize[5], {{
                    GrayLevel[0.35], 
                    TagBox[
                    PointBox[{-3., 1.8369701987210297`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    RGBColor[0.29, 0.29, 0.83], 
                    TagBox[
                    PointBox[{-2., 1.2246467991473532`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.35], 
                    TagBox[
                    PointBox[{-1., 6.123233995736766*^-17}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{0., 0.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-4., 2.4492935982947064`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}}}, {{
                   InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{0, -5.5}, {-3., 1.8369701987210297`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                   InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{0, -5.5}, {-2., 1.2246467991473532`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                   InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-1., 6.123233995736766*^-17}], 
                    Offset[{0, -5.5}, {-1., 6.123233995736766*^-17}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                   InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {0., 0.}], 
                    Offset[{0, -5.5}, {0., 0.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                   InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{0, -5.5}, {-4., 2.4492935982947064`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, 
                  StyleBox[{
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736765*^-17}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-1.4, 
                    8.572527594031473*^-17}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736766*^-17}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-0.4, 
                    2.4492935982947065`*^-17}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736766*^-17}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
                    2.0818995585505003`*^-16}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736767*^-17}]}, FontColor -> 
                   GrayLevel[0.5], FontSize -> 8, FontWeight -> "Thin", 
                   StripOnInput -> False]}, 
                 
                 DynamicModuleBox[{
                  GeneralUtilities`Graphics`PackagePrivate`vpos$166688 = \
{{-3., 1.8369701987210297`*^-16}, {-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}, {0., 0.}, {-4., 
                    2.4492935982947064`*^-16}}}, 
                  DynamicBox[
                   Typeset`ToBoxes[
                    If[
                    Not[
                    IntegerQ[
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]], {}, {
                    AbsolutePointSize[10], 
                    Opacity[0.2, Black], 
                    Point[
                    Part[
                    GeneralUtilities`Graphics`PackagePrivate`vpos$166688, 
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]]}], 
                    StandardForm, Graphics], 
                   TrackedSymbols :> {
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$}], 
                  DynamicModuleValues :> {}]}, 
                ImageSize -> {298., 25.680000000000014`}, AspectRatio -> Full,
                 PlotRangePadding -> 0, 
                ImagePadding -> {{19.5, 22.5}, {15.5, 10.179999999999998`}}, 
                ImageMargins -> {{0, 0}, {15, 15}}, 
                BaseStyle -> {TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
               
               EventHandlerTag[{
                "MouseClicked" :> (
                  NeuralNetworks`NetGraph`PackagePrivate`selection$$ = None), 
                 Method -> "Preemptive", PassEventsDown -> Automatic, 
                 PassEventsUp -> True}]],FormBox[
               TemplateBox[{
                 StyleBox["DotPlusLayer", 
                  GrayLevel[0.35], StripOnInput -> False], 
                 StyleBox["ElementwiseLayer", 
                  GrayLevel[0.35], StripOnInput -> False]}, "PointLegend", 
                DisplayFunction -> (FormBox[
                  StyleBox[
                   StyleBox[
                    PaneBox[
                    TemplateBox[{"   ", "\"   \"", 
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.35]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.35]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #}, "RowDefault"], 
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.29, 0.29, 0.83]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.29, 0.29, 0.83]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #2}, "RowDefault"]}, 
                    "RowWithSeparators"], Alignment -> Left, 
                    AppearanceElements -> None, 
                    ImageMargins -> {{2, 2}, {2, 2}}, ImageSizeAction -> 
                    "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
                   FontFamily -> "Arial"}, Background -> Automatic, 
                   StripOnInput -> False], TraditionalForm]& ), 
                InterpretationFunction :> (RowBox[{"PointLegend", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.35], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.23333333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "GrayLevel[0.35]"], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.35]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.35], Editable -> False, Selectable -> False], 
                    "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.29, 0.29, 0.83], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.19333333333333333`, 0.19333333333333333`, 
                    0.5533333333333333], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.29, 0.29, 0.83]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.29, 0.29, 0.83]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.29, 0.29, 0.83], Editable -> False, Selectable -> 
                    False], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "12"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", "2"}], ",", 
                    
                    RowBox[{
                    "LegendLayout", "\[Rule]", 
                    "GeneralUtilities`Graphics`PackagePrivate`legendTable"}]}]\
, "]"}]& ), Editable -> True], TraditionalForm]},
             "Legended",
             DisplayFunction->(GridBox[{{
                 TagBox[
                  ItemBox[
                   PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                  "SkipImageSizeLevel"]}, {
                 ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
               False, GridBoxItemSize -> Automatic, 
               BaselinePosition -> {1, 1}]& ),
             Editable->True,
             InterpretationFunction->(RowBox[{"Legended", "[", 
                RowBox[{#, ",", 
                  RowBox[{"Placed", "[", 
                    RowBox[{#2, ",", "Below"}], "]"}]}], "]"}]& )]},
           {
            DynamicBox[ToBoxes[
              If[
               IntegerQ[NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
               Item[
                NeuralNetworks`NetGraph`PackagePrivate`vportInfo[
                 Part[
                 NeuralNetworks`NetGraph`PackagePrivate`vports$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                 NeuralNetworks`NetGraph`PackagePrivate`inputs$$, 
                 NeuralNetworks`NetGraph`PackagePrivate`outputs$$, 
                 NeuralNetworks`NetGraph`PackagePrivate`vertices$$], 
                Alignment -> Center], 
               Item["", ItemSize -> {0, 0}]], StandardForm],
             ImageSizeCache->{0., {0., 6.}},
             
             TrackedSymbols:>{
              NeuralNetworks`NetGraph`PackagePrivate`selection$$}]}
          },
          AutoDelete->False,
          GridBoxAlignment->{"Columns" -> {{Left}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"],
        DynamicModuleValues:>{},
        Initialization:>{NetGraph}],
       Deploy,
       DefaultBaseStyle->"Deploy"],
      BaselinePosition->(Top -> Scaled[3])], "]"}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.753354753476881*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "[", 
  RowBox[{"Range", "[", "5", "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.8987880945205688`", ",", "4.098975658416748`", ",", "5.997086524963379`",
    ",", "8.098493576049805`", ",", "9.854778289794922`"}], "}"}]], "Output",
 CellChangeTimes->{3.7533547629982986`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:589e\:52a0\:8bad\:7ec3\:6279\:6b21, \:63d0\:5347\:8bad\:7ec3\:901f\
\:5ea6", "Section",
 CellChangeTimes->{{3.753354793989436*^9, 3.753354810135133*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{
    RowBox[{"RandomReal", "[", 
     RowBox[{"1", ",", 
      RowBox[{"{", 
       RowBox[{"10000", ",", "4"}], "}"}]}], "]"}], "\[Rule]", 
    RowBox[{"RandomReal", "[", 
     RowBox[{"1", ",", 
      RowBox[{"{", 
       RowBox[{"10000", ",", "4"}], "}"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DotPlusLayer", "[", "8", "]"}], ",", 
       RowBox[{"DotPlusLayer", "[", "4", "]"}]}], "}"}], ",", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", "4"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"NetTrain", "[", 
  RowBox[{"net", ",", "trainingData", ",", 
   RowBox[{"BatchSize", "\[Rule]", "512"}], ",", 
   RowBox[{"MaxTrainingRounds", "\[Rule]", "20"}]}], "]"}]}], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"4"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"8"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"4"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"4"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Outputs", "Output"}, "Mouse"], 
            "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {8, 4}], "Biases" -> 
               NeuralNetworks`TensorT[1, {8}]], "Parameters" -> 
             Association["Size" -> 8, "$InputSize" -> 4], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {4}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {8}]]], "2" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {4, 8}], "Biases" -> 
               NeuralNetworks`TensorT[1, {4}]], "Parameters" -> 
             Association["Size" -> 4, "$InputSize" -> 8], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {8}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {4}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "2", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {4}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`TensorT[1, {4}]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{193., {26., 31.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.7533548378635273`*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\:5bf9\:6bcf\:4e2a\:8bad\:7ec3\:6570\:636e\:6307\:5b9a\:8bad\:7ec3\:6b21\
\:6570", "Section",
 CellChangeTimes->{{3.753354904048617*^9, 3.753354917514551*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{
    RowBox[{"RandomReal", "[", 
     RowBox[{"1", ",", 
      RowBox[{"{", 
       RowBox[{"10000", ",", "4"}], "}"}]}], "]"}], "\[Rule]", 
    RowBox[{"RandomReal", "[", 
     RowBox[{"1", ",", 
      RowBox[{"{", 
       RowBox[{"10000", ",", "4"}], "}"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"8", ",", "4"}], "}"}], ",", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", "4"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"NetTrain", "[", 
  RowBox[{"net", ",", "trainingData", ",", 
   RowBox[{"MaxTrainingRounds", "\[Rule]", "1"}]}], "]"}]}], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"4"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"8"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"4"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"4"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Outputs", "Output"}, "Mouse"], 
            "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {8, 4}], "Biases" -> 
               NeuralNetworks`TensorT[1, {8}]], "Parameters" -> 
             Association["Size" -> 8, "$InputSize" -> 4], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {4}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {8}]]], "2" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {4, 8}], "Biases" -> 
               NeuralNetworks`TensorT[1, {4}]], "Parameters" -> 
             Association["Size" -> 4, "$InputSize" -> 8], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {8}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {4}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "2", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {4}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`TensorT[1, {4}]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{193., {26., 31.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.753354924665127*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\:6307\:660e\:68af\:5ea6\:4e0b\:964d\:6cd5\:4f5c\:4e3a\:8bad\:7ec3\:65b9\
\:6cd5", "Section",
 CellChangeTimes->{{3.753354992120253*^9, 3.753355002553912*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dotPlus", "=", 
  RowBox[{"DotPlusLayer", "[", 
   RowBox[{"1", ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DotPlusLayer",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         TemplateBox[{GraphicsBox[{{
              Opacity[0.3], {{
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
              AbsolutePointSize[5], 
              PointBox[{{0, 0}, {1, 0}}], 
              PointBox[
               NCache[{{
                  Rational[-1, 2], 1}, {
                  Rational[1, 2], 1}, {
                  Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
            ImageSize -> 32, BaseStyle -> GrayLevel[0.65]],StyleBox[
           "\"uninitialized\"", 
            GrayLevel[0.5], FontSize -> 8, StripOnInput -> False]},
          "Labeled",
          DisplayFunction->(GridBox[{{
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}, {
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2}], "]"}]& )], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Size\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["1", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         TemplateBox[{GraphicsBox[{{
              Opacity[0.3], {{
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
              AbsolutePointSize[5], 
              PointBox[{{0, 0}, {1, 0}}], 
              PointBox[
               NCache[{{
                  Rational[-1, 2], 1}, {
                  Rational[1, 2], 1}, {
                  Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
            ImageSize -> 32, BaseStyle -> GrayLevel[0.65]],StyleBox[
           "\"uninitialized\"", 
            GrayLevel[0.5], FontSize -> 8, StripOnInput -> False]},
          "Labeled",
          DisplayFunction->(GridBox[{{
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}, {
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2}], "]"}]& )], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Size\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["1", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            ItemBox[
             StyleBox["\<\"Arrays:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Weights\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"matrix\"","\" \"",
                TemplateBox[{
                 "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                  "\" \"", 
                  
                  TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                   "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                 "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Biases\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"optional\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            ItemBox[
             StyleBox["\<\"Ports:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Input\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"encoded\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Output\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"decoded\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  None,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.753355005173408*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "2.2"}], ",", 
     RowBox[{"2", "\[Rule]", "3.8"}], ",", 
     RowBox[{"3", "\[Rule]", "6.4"}], ",", 
     RowBox[{"4", "\[Rule]", "9.1"}]}], "}"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"dotPlus", ",", "data", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<StochasticGradientDescent\>\""}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"encoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"decoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.753355022106592*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:6307\:5b9a\:5b66\:4e60\:901f\:7387", "Subsection",
 CellChangeTimes->{{3.7533550398456087`*^9, 3.75335504772753*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"dotPlus", ",", "data", ",", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<StochasticGradientDescent\>\"", ",", 
       RowBox[{"\"\<InitialLearningRate\>\"", "\[Rule]", "0.1"}]}], "}"}]}]}],
    "]"}]}]], "Input"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"encoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"decoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.753355058505438*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:52a8\:6001\:5b66\:4e60\:901f\:7387", "Subsection",
 CellChangeTimes->{{3.753355075131701*^9, 3.7533550787763577`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"schedule", "[", 
    RowBox[{"b_", ",", "bmax_", ",", "rate_"}], "]"}], ":=", 
   RowBox[{"rate", "/", 
    RowBox[{"(", 
     RowBox[{"2", "-", 
      RowBox[{"b", "/", "bmax"}]}], ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"net", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"dotPlus", ",", "data", ",", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<StochasticGradientDescent\>\"", ",", 
       RowBox[{"\"\<LearningRateSchedule\>\"", "\[Rule]", "schedule"}]}], 
      "}"}]}]}], "]"}]}]}], "Input"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"encoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"decoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.75335510522996*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:6b63\:5219\:5316\:6743\:91cd, \:9884\:9632\:8fc7\:62df\:5408. ", \
"Section",
 CellChangeTimes->{{3.7533551506550198`*^9, 3.7533551677913647`*^9}, {
  3.753355411660728*^9, 3.753355419394266*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      RowBox[{
       RowBox[{"Exp", "[", 
        RowBox[{"-", 
         RowBox[{"x", "^", "2"}]}], "]"}], "+", 
       RowBox[{"RandomVariate", "[", 
        RowBox[{"NormalDistribution", "[", 
         RowBox[{"0", ",", ".15"}], "]"}], "]"}]}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "3"}], ",", "3", ",", ".2"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"plot", "=", 
  RowBox[{"ListPlot", "[", 
   RowBox[{
    RowBox[{"List", "@@@", "data"}], ",", 
    RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.753355253816637*^9, 3.753355261023942*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[1, 0, 0], PointSize[0.012833333333333334`], AbsoluteThickness[
     1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQB2IQDQEcB1hvXiywz7+6Pw0M2A7op6qG1c3abX/2DAiw
HGhccn12aNyO/cZgwHzA8vvx/Q7dR/bPmgkCjAeOlV/d/2H65v1QAw8Uzbhp
u3rLCnuw9jN/9gssXb7D4NFee7DymT/3s1t/lPjGehlq37f9DB/mT10SkGQP
Mf/z/kv/187bd+iCPcS4D/v3hm0PPnH+lv0MsP6X+6cFnxWzvvLS3gCs/vH+
j0FHYzzbn0Plb+6fETjx0dbVj+0ngPkn9+82sFWZUP3RHubjDW/CE2UM3tov
gMjbyx8R73jC/BHKv2nve/7q6zeTP9qbQMy3N5ESmd8184b9HIj99rlZDCEM
Uo9g7rPn2u7MJi52Cqr+s71XbKnz8yXX7DMg/rO/qjJNvq/jCFT/T/uf6kIp
mjbX7S9Awsde6fQkAVblZpj7HDKkrNYd4VwOC1+HbKnL5VUnNkPNZ3bYycX9
v2Ddjv3nIPHjMEc3eO3fHcf2Q+xjc7DJsN9+ob4dah6Hw3PvrOfGApP3AwDa
puZ+
      "]]}, {}}, {}, {}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-3., 3.}, {-0.33491502778578336`, 1.0986146175682336`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.753355262545002*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"150", ",", "Tanh", ",", "150", ",", "Tanh", ",", "1"}], "}"}], 
     ",", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
     RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"net1", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"net", ",", "data", ",", 
     RowBox[{"Method", "\[Rule]", "\"\<ADAM\>\""}]}], "]"}]}], 
  ";"}]}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"net1", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "]"}], ",", "plot"}], 
  "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       
       "]]}}, {}, {}}, {{}, {{}, 
     {RGBColor[1, 0, 0], PointSize[0.012833333333333334`], AbsoluteThickness[
      1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQB2IQDQEcB1hvXiywz7+6Pw0M2A7op6qG1c3abX/2DAiw
HGhccn12aNyO/cZgwHzA8vvx/Q7dR/bPmgkCjAeOlV/d/2H65v1QAw8Uzbhp
u3rLCnuw9jN/9gssXb7D4NFee7DymT/3s1t/lPjGehlq37f9DB/mT10SkGQP
Mf/z/kv/187bd+iCPcS4D/v3hm0PPnH+lv0MsP6X+6cFnxWzvvLS3gCs/vH+
j0FHYzzbn0Plb+6fETjx0dbVj+0ngPkn9+82sFWZUP3RHubjDW/CE2UM3tov
gMjbyx8R73jC/BHKv2nve/7q6zeTP9qbQMy3N5ESmd8184b9HIj99rlZDCEM
Uo9g7rPn2u7MJi52Cqr+s71XbKnz8yXX7DMg/rO/qjJNvq/jCFT/T/uf6kIp
mjbX7S9Awsde6fQkAVblZpj7HDKkrNYd4VwOC1+HbKnL5VUnNkPNZ3bYycX9
v2Ddjv3nIPHjMEc3eO3fHcf2Q+xjc7DJsN9+ob4dah6Hw3PvrOfGApP3AwDa
puZ+
       "]]}, {}}, {}, {}, {{}, {}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-3, 3}, {-0.3932225704193115, 1.1840429306030273`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7533553015163527`*^9, 3.753355386258956*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net2", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data", ",", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<ADAM\>\"", ",", 
       RowBox[{"\"\<L2Regularization\>\"", "\[Rule]", "5"}]}], "}"}]}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"150"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                BaseStyle -> GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"150"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                BaseStyle -> GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"150"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                BaseStyle -> GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["4", 
              GrayLevel[0.5]], {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "4"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"150"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                BaseStyle -> GrayLevel[0.5]]}], {"Layers", "4"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["5", 
              GrayLevel[0.5]], {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "5"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {150, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {150}]], "Parameters" -> 
             Association["Size" -> 150, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {150}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {150}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {150}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {150}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {150, 150}], "Biases" -> 
               NeuralNetworks`TensorT[1, {150}]], "Parameters" -> 
             Association["Size" -> 150, "$InputSize" -> 150], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {150}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {150}]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {150}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {150}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {150}]]], "5" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 150}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 150], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {150}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Layers", "4", "Inputs", "Input"] -> 
           NetPort["Layers", "3", "Outputs", "Output"], 
           NetPort["Layers", "5", "Inputs", "Input"] -> 
           NetPort["Layers", "4", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "5", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{279., {48., 53.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.7533553513196373`*^9, 3.753355414897827*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"net2", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "]"}], ",", "plot"}], 
  "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwt2Hk81Nv/B/CJZKnrVuSiW0RSKu1dhd6SLpUWKlFkIqVFaNOe+tplK0ly
M8hEZBtNZTsj6opKJEuiyZZt5uNKiNJvvM/vL56P1/u8zzLn8xkPs5zcrV2k
WCzWuXEs1thP54xw5tcvWYHkV2HBXwKiPKI+x/AHmp29XEBK/k6yPz2ENrm/
REDmND192dOLFkTMF5CuSS2J9Z/RrIMaAuJxeIUtrxitqSIrIJd0PggO+NN+
sg8Jibmjff21IvWy7kIS9ynA3Up+AtYHWhQQlbfbt86bJjNmTmtRHindtt2s
XGc8ri8NconFPJ2T2lrSWB8U8YSsTrfnViySQj/u4JOH7ycvfjQfzTH4zCea
P0uexuiihTn1fDLBcuFrFw1an1TGJ1WdP7+OKFLbp/HJYZ24tXPF49Ca7nwS
E/v5o3caWsj/7xEZDjqgtHQezQM6cki6j/tzPR2aywlziNOlM17as2juW5tD
yjyDGpTVqA+9yCExtumJg3JodntiDlk1Z2BZQQcLneCQQ84U+e6wSEYLk8p5
ZEFe6IS199Ac02c8Isy59WQVh7rmCY9YJKf8OT+a1n9J4pE/wl63/hZAc85l
HuHbTzv17iDNHZfwyLfBezf36lIfCckmuwMe34rVpvUB/8smAtWy2x806Hpi
zmaTa6uYf2xUaR7vkk20zq/ibpGn41cYZxPOjztuF2t+kbF6x64ssktenGG8
F605ySiLaOkp5Ty1QXMKFmcR8UaDJyu20txJJ4v4XLsqWGhCx19VzCLZv/9R
OUOL5rOFmURRxaTvZ9vomIXPvDNJidb15YVuaIGxWwbZUhPSdcuFOmVbBqkL
DOR4OlD3LMsgPb3ek3Q2o00GvqcTJeLeGryAerpPOnHasznSrvsn1huGPySs
SLn+fle0SZ9PKgkyH//gDZvmwU6pkufjl2OyLc3/g1Qy12mwfI8FzZWHH5Ct
i9sTn+nSvPjIA3L3VfH28PYf6M1mKcRQ5jJv/n7q9S+4ZG57iHy4PVrw7S6X
qPwb69i/g/qQF5f0BuROLFhPfV2XS7iTBpy36FKLfJLIVGU3Zc+uEexnvuwe
6dDac4rvQV20O57USB8uVz+EFjzSiyfFrWdmXd5HbTfMIXe5Ua/Nran50Ryy
Xa9Kp34ZmmOaGEcKl2yoGRkYRm8/GEsiTf76a+1FanPXm0T6BdNYforauj+S
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
kv8DetESlA==
       "]]}}, {}, {}}, {{}, {{}, 
     {RGBColor[1, 0, 0], PointSize[0.012833333333333334`], AbsoluteThickness[
      1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQB2IQDQEcB1hvXiywz7+6Pw0M2A7op6qG1c3abX/2DAiw
HGhccn12aNyO/cZgwHzA8vvx/Q7dR/bPmgkCjAeOlV/d/2H65v1QAw8Uzbhp
u3rLCnuw9jN/9gssXb7D4NFee7DymT/3s1t/lPjGehlq37f9DB/mT10SkGQP
Mf/z/kv/187bd+iCPcS4D/v3hm0PPnH+lv0MsP6X+6cFnxWzvvLS3gCs/vH+
j0FHYzzbn0Plb+6fETjx0dbVj+0ngPkn9+82sFWZUP3RHubjDW/CE2UM3tov
gMjbyx8R73jC/BHKv2nve/7q6zeTP9qbQMy3N5ESmd8184b9HIj99rlZDCEM
Uo9g7rPn2u7MJi52Cqr+s71XbKnz8yXX7DMg/rO/qjJNvq/jCFT/T/uf6kIp
mjbX7S9Awsde6fQkAVblZpj7HDKkrNYd4VwOC1+HbKnL5VUnNkPNZ3bYycX9
v2Ddjv3nIPHjMEc3eO3fHcf2Q+xjc7DJsN9+ob4dah6Hw3PvrOfGApP3AwDa
puZ+
       "]]}, {}}, {}, {}, {{}, {}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-3, 3}, {-0.12670110166072845`, 0.9785192608833313}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.753355353893133*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["GPU\:8bad\:7ec3\:7f51\:7edc(\:6ca1\:6709GPU\:9a71\:52a8...)", "Section",
 CellChangeTimes->{{3.753355468997778*^9, 3.753355474323682*^9}, {
  3.75335560081073*^9, 3.753355613023415*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{
    RowBox[{"RandomReal", "[", 
     RowBox[{"1", ",", 
      RowBox[{"{", 
       RowBox[{"10000", ",", "4"}], "}"}]}], "]"}], "\[Rule]", 
    RowBox[{"RandomReal", "[", 
     RowBox[{"1", ",", 
      RowBox[{"{", 
       RowBox[{"10000", ",", "4"}], "}"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"8", ",", "4"}], "}"}], ",", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", "4"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"NetTrain", "[", 
  RowBox[{"net", ",", "trainingData", ",", 
   RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}]}], "]"}]}], "Input"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         FrameBox[
          StyleBox["\<\"\[WarningSign]\"\>", "Message",
           StripOnInput->False,
           FontSize->35],
          ContentPadding->False,
          FrameMargins->{{0, 0}, {0, 0}},
          FrameStyle->None,
          StripOnInput->False], GridBox[{
           {
            TagBox[GridBox[{
               {
                TagBox["\<\"Message: \"\>",
                 "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                
                TagBox["\<\"TargetDevice -> \
\\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{\\\"\\\\\\\"GPU\\\\\\\"\\\", \\\",\
\\\", \\\"0\\\"}], \\\"}\\\"}], Function[Short[Slot[1], 5]]]\\) could not be \
used, please ensure that you have a compatible graphics card and have \
installed CUDA drivers.\"\>",
                 "SummaryItem"]}
              },
              GridBoxAlignment->{"Columns" -> {{Left}}},
              GridBoxItemSize->{"Columns" -> {6.5, All}},
              GridBoxSpacings->{"Columns" -> {{0}}}],
             "SummaryItem"]},
           {
            TagBox[GridBox[{
               {
                TagBox["\<\"Tag: \"\>",
                 "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                TagBox["NetTrain",
                 "SummaryItem"]}
              },
              GridBoxAlignment->{"Columns" -> {{Left}}},
              GridBoxItemSize->{"Columns" -> {6.5, All}},
              GridBoxSpacings->{"Columns" -> {{0}}}],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         FrameBox[
          StyleBox["\<\"\[WarningSign]\"\>", "Message",
           StripOnInput->False,
           FontSize->35],
          ContentPadding->False,
          FrameMargins->{{0, 0}, {0, 0}},
          FrameStyle->None,
          StripOnInput->False], GridBox[{
           {
            TagBox[GridBox[{
               {
                TagBox["\<\"Message: \"\>",
                 "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                
                TagBox["\<\"TargetDevice -> \
\\!\\(\\*TagBox[RowBox[{\\\"{\\\", RowBox[{\\\"\\\\\\\"GPU\\\\\\\"\\\", \\\",\
\\\", \\\"0\\\"}], \\\"}\\\"}], Function[Short[Slot[1], 5]]]\\) could not be \
used, please ensure that you have a compatible graphics card and have \
installed CUDA drivers.\"\>",
                 "SummaryItem"]}
              },
              GridBoxAlignment->{"Columns" -> {{Left}}},
              GridBoxItemSize->{"Columns" -> {6.5, All}},
              GridBoxSpacings->{"Columns" -> {{0}}}],
             "SummaryItem"]},
           {
            TagBox[GridBox[{
               {
                TagBox["\<\"Tag: \"\>",
                 "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                TagBox["NetTrain",
                 "SummaryItem"]}
              },
              GridBoxAlignment->{"Columns" -> {{Left}}},
              GridBoxItemSize->{"Columns" -> {6.5, All}},
              GridBoxSpacings->{"Columns" -> {{0}}}],
             "SummaryItem"]}
          },
          AutoDelete->False,
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  Failure[NetTrain, 
   Association[
   "MessageTemplate" :> MessageName[NetTrain, "invtd"], 
    "MessageParameters" :> {{"GPU", 0}}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.753355478479257*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:4ea4\:53c9\:9a8c\:8bc1, \:9632\:6b62\:8fc7\:62df\:5408", "Section",
 CellChangeTimes->{{3.753355629681164*^9, 3.753355630993297*^9}, {
  3.753355893237702*^9, 3.753355898223011*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      RowBox[{
       RowBox[{"Exp", "[", 
        RowBox[{"-", 
         RowBox[{"x", "^", "2"}]}], "]"}], "+", 
       RowBox[{"RandomVariate", "[", 
        RowBox[{"NormalDistribution", "[", 
         RowBox[{"0", ",", ".15"}], "]"}], "]"}]}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "3"}], ",", "3", ",", ".2"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"plot", "=", 
  RowBox[{"ListPlot", "[", 
   RowBox[{
    RowBox[{"List", "@@@", "data"}], ",", 
    RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.753355643291095*^9, 3.753355649161775*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[1, 0, 0], PointSize[0.012833333333333334`], AbsoluteThickness[
     1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQB2IQDQEcB/Ti7zIeSThpnwYGbAcYYufExPAf2H/2DAiw
HGDmO7PYRu6IvTEYMB+YJp9ybG388f2zZoIA44Gmg7q1x01n20MNPFBSbbZ/
/8pCe7D2M3/2x/k9LBJ/vnk/WPnMn/uPV+V828S1CWrft/0FQce3hH1esx9i
/uf9F7QueGRtb9wPMe7D/gmL5p4y5b9lPwOs/+V+1rdeD+avvGNvAFb/eH9I
c8gZGY23UPmb+xccUZf9sv+d/QQw/+T+GSZ6MvHbH8Dcx7BgnuL6uVPe2i+A
yNsrvuV6KBn2Ccq/ad/F6bzXdPprexOI+fadU4sry549sp8Dsd9+3g/xwFOa
j6DmfbB/I/V7H/fk+1D1n+03fN+wmtXxuH0GxH/2IcLLLVpPHoXq/2l/q/jU
avG2nfsvQMLHnnPWA8v1uVdh7nO4Z2l+pu7qTFj4Olxb4/iTf/PJ/RDzmR1i
/771MPI9a38OEj8O7lzeM1jim6D2sTns+T75XNaR2dDw43A4eOTm1+OTF9gD
AL3r6ZE=
      "]]}, {}}, {}, {}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-3., 3.}, {-0.20077705069284119`, 1.1460207739572257`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.753355650104888*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"150", ",", "Tanh", ",", "150", ",", "Tanh", ",", "1"}], "}"}], 
     ",", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
     RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"net1", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"net", ",", "data", ",", 
     RowBox[{"Method", "\[Rule]", "\"\<ADAM\>\""}]}], "]"}]}], 
  ";"}]}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"net1", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "]"}], ",", "plot"}], 
  "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
/OJ2LvrrJj5s3u/X9oWL/ruBD8JOpzSnteN6oMcHu+/CZcHjmmjeyzxHaiMF
Ct2zqM0tgQ9tC1/YrFSmZrWt4YPZtWWTcwzQ81bzYUbwiPkkU+z/psmH4q95
7/afxvzJKj5snH9sW+t9nLd+BfPcbFPzXeqH9SoafEi2G2q7EolWXM4H1dwn
rhJfsR/U+dDyw7xsVy360FI+BMxRUXzRjfVuanyYdj4zffGkZjpfZAkfCn0e
TbZhoXer8sEtw/Rwiho1O1yF+fura1GUyDpq3iTGw9P7hw12om8oM8/PurRt
Tw9Ts34t5sMFKw/f6vPYf4Wx8lPjdgUntCjjpk+KWmc8sd9HiQ/sll7XhABc
X5Ox8WRSNhyD5i1inh9td8VN6Tj/IeMCi322D75hvpmx64P5GWX1mIsxXv++
ezKrD9f7upAPQ/wPh0+ItND6V4wTxrtGRUlTs20Zn1uxZ+S3fAt+PzBWMmcZ
rtPAfAXjhrsdvnc3YD6PsV9sUnvRXswnMd5f7awlY4key3jy2J13j9hhvQjj
fLU55WEuaFHGLsatij+80OMZ6zjH264Owf7pjAcibmbcSkQvYBxXtm1Kfjbu
X5vxmVEyR6TLW/D7hPHCxU1RJi047xxj/p6YkcDf6AeMfW/cMOwUa6WOYWwU
qv9SYya6jPGk4mkd1xehRxjnDvK1sjSp2YuY67l2u325kTH6FmOF/rdTLr9A
6zH3a0bmTrm3YdS884wlnvxSq3nfitebsWCprqFeOdb/Ylwv1GpyqRktxzwP
pV89rML60fqMU05zXSdNbaP2YvxO2/GZrjw1K4lxwDjFYLtl1OZljJ9y8+Le
rMf6Xsaub86nV+2k5kkwz6f95enFEw9jvyzjM5s+8tafw3plxoenHe22dUCv
YLynUWw41APnr2a8KS5yfNVL7P/fWrf2zJoYgbk6Y5VdA4vWp6DlGbPmsVfZ
5uH6koynCDZsCuViv4DZ3xjSvreyFevzGP++/+iY5B+sf8G43WTlxXVi7bT+
GOOaxdU3baaj/79ehQNOD0MUqdklzPVM/7zwFVcD8+uME54XREzYQM2bzvjN
cZsUnT1YH8LcP98VMnkXj2KuxPiBKKci+AL6//fDqcSipeIm1v//vNq+Hvdr
/COcb7KADycuRIvqsKnNXyvy4eC6fdIX32F/uQIfDCf9lQv+hPV/5fmwrjZg
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
9frEUpz/qDmDrD+hIKlag+dtHs4g8T+u+hk0Yb2ddCZZ6FCoatWFucLCTOIr
oUju9mPepJlJJnrZbw8dxv292pJJnOYV1WaNGaTzl+7LJP3hiucaJalZN45k
kpOrrgmJTKfmHbLKJFXpRQ/l5g7i83Y+k+zYvmDeugXYr26bSdK516IPLcH6
VMYrLIvX3ViJ82ZezCRhPQuKfQHzfutMMuf69SMfNuG8cUczyUOxb70V2zEX
3ZtJRj9ZeOv3Ppx/Z30msZt7Y8p0c7Tc4kzSFvbttcYJ9HHJTGK6YtHyPefQ
X9szSGHqjYwLl3He17QMoretZM8jx3/788wgieWLGt+54v6EDmYQpWMOtgUP
Mc+SySB+3SWinc8x31iUTqTslbzG+WP+knkenMc4Kiq9QRfJppPfj74nbI7G
9atj04jVnMWbjr/HPGh1GqkJdSy7nYoejEslu5aXHg/8jPX+sqkkkyz+nVaE
1rvEIau23nStq6DmzLInJLy0dIYQHy3N+0jmHlF+I9uGzpVJIZ6dNzXX9KJ1
FiaTMVfKPh8cQJeJJpErIirGV4WH6PtWxrz/5rPKryZORrdaRJFvwSrjSmWG
8POlPIxsVL/1ok8OzTkXSFS2qKYsXUbt6Cl+l7BLbhnsWE0t5CV/AqTNK6rO
6FJztE4/hgE7579vd1Obx+19CxLfszrhIK7nOSYGZJaJ13w7gvWPnRNAs/v+
p8HzmLOKCFw+/sxh60PsL772GVwzK87WPsP9xFblwfP5s80vvkInLiuAxFq2
zotI3A+YFkHWmnq1JQnUvOMXiqH0hcK89I843/v6N+jfFzaqPR/7n1z4DmMS
OnpulOB+xA6WwjTpJfzJVXjeihVloHjhfHFwPc4vEy0HjcLYNK12nN+ZXQ56
qv0xBb2Ya16vgD33Vr0+MoD7r1Hggs3mj7fcxP/S+W93VYJz8MhFWSlqXkhZ
JTwRWX8sZga1TuTOKgg84rxnI4taaHtqFcRysvS4CzCXXlANabLiGmeWULOf
36qG4mtbFYRXYn6qrBr43PtTvdZSm8vMr4HeVYWiShtxPY3jNSD8bHL/x204
3yCwBib/3NO0cy/6O7cG5HY/K200wf3uGlcLS6Mrsq4cw3krV9SCzsTZiROs
qVk9B2thx2mzEP+LmNdfqwXzPPYzDXv0We9aOLeo/s5nJ5zXHF0LjncULpu6
Yc7OqoWHjcdP9DyidqwuqwW2btj+297/5jXWwjv/js0z/XF/nYJa+DSiqhkR
iudf8qcWCkzPL1oXheerGq6Fmg+xM78noiVH8aBrZr/4SYLz7zEevrRqYCgL
+38J8UCy9GrbwwLMPzH9sss/cuVL8Xx+zHwVz5HcpGq8vq97a0FbsO6DQSPm
da21YGDo/JbXgfu1qK0Fk/CsFzZ9eF6tb7VgLSF+T2wI55/MrIVrJ7Ze8x09
jOvH18K9rPvWauPQzYG14CtfaJIxmVpH07MWwp0mb9svQy3Ufr0WUnh71nTM
o2YNHK+F/LXPVBwXUTua7aiF9oFZkqGrqM1FZzP7zbpjUKOD82KHasDj0Q83
6S3UHPXKGqg1OfRZfyfWX0isAbWFeWNvHsD1Dj6qAacfKzYmHsa88EQNfPsU
4Nx5EvOkNTVgt/fqKOOrOM+0thqyWU3w0AnzyrfVMKNj540sNzwf2FbDB6dF
g+ovcD9yw1Uw3vCp5snXuH+Dj1VgNnPU5Vdv8Xzxl6tAKKq8b1wKNe9WfSXs
stdbtj4D13P2rITXG6POX87HecPalbCx+k5XQxXa9RYXnoX+UJ7ViPNU5nKh
5eIhq52daJv4CnCXWNny8S/On1lUDlXfAxT7REfoeScZlYOqv6SFkiQ1r7qk
DApXNtV5yWK+gZSC3OhdrC+K1I4eSqVwseCj2egl6AkPvsM0i6eVZ4GavUK3
BI6rjZIJ3oQ58fwGSYPW+6u2U+uoVRbDQU+975vN0VVGRcAmPwrm3cT1qn7l
Qa/boQn77+J+Fijlgq5R3laPR5izd+RAU0dAzoA/evBaBiyW2ZX2LY2a86I8
Ca41fhSSyEM/iYqDgqhFoPMN1/N1jIJzm0alhNdjf4QCGw5qlXPXCwvp/L//
UWeZ36ssyQHTMWjtd29IuKjezCsS1Drn2qPIcOG7fe8mo7c1JhH28Tsls+ZT
87p+phMx+xN58xegV0RnknMeW9IWL0aLmGcTiB8XtXoZ+qRXLgnO6QjWXUlt
vmNOPpGs+vJy62r0Ja8vpEb4oftBXWqhq0sKycZp552ObqLmzC8rJJGLdl2x
2oo591IRub5D+rj9bmrH2MBi0nD0p+mtfZiLL/1GDC6V7nE/iHl+wjcy2+/5
+hdH8TwL35UQ5+grmq+PY7203HfSkWGs9tYK15N48J18aJ8t++Ei1ufsKyVy
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
       
       "]]}}, {}, {}}, {{}, {{}, 
     {RGBColor[1, 0, 0], PointSize[0.012833333333333334`], AbsoluteThickness[
      1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQB2IQDQEcB/Ti7zIeSThpnwYGbAcYYufExPAf2H/2DAiw
HGDmO7PYRu6IvTEYMB+YJp9ybG388f2zZoIA44Gmg7q1x01n20MNPFBSbbZ/
/8pCe7D2M3/2x/k9LBJ/vnk/WPnMn/uPV+V828S1CWrft/0FQce3hH1esx9i
/uf9F7QueGRtb9wPMe7D/gmL5p4y5b9lPwOs/+V+1rdeD+avvGNvAFb/eH9I
c8gZGY23UPmb+xccUZf9sv+d/QQw/+T+GSZ6MvHbH8Dcx7BgnuL6uVPe2i+A
yNsrvuV6KBn2Ccq/ad/F6bzXdPprexOI+fadU4sry549sp8Dsd9+3g/xwFOa
j6DmfbB/I/V7H/fk+1D1n+03fN+wmtXxuH0GxH/2IcLLLVpPHoXq/2l/q/jU
avG2nfsvQMLHnnPWA8v1uVdh7nO4Z2l+pu7qTFj4Olxb4/iTf/PJ/RDzmR1i
/771MPI9a38OEj8O7lzeM1jim6D2sTns+T75XNaR2dDw43A4eOTm1+OTF9gD
AL3r6ZE=
       "]]}, {}}, {}, {}, {{}, {}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-3, 3}, {-0.4148489832878113, 1.1498609781265259`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.753355759759056*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"RandomSample", "[", "data", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"train", ",", "test"}], "}"}], "=", 
   RowBox[{"TakeDrop", "[", 
    RowBox[{"data", ",", "24"}], "]"}]}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net2", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"net", ",", "train", ",", 
     RowBox[{"ValidationSet", "\[Rule]", "test"}]}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{3.7533557920673933`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"net2", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "]"}], ",", "plot"}], 
  "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       
       "]]}}, {}, {}}, {{}, {{}, 
     {RGBColor[1, 0, 0], PointSize[0.012833333333333334`], AbsoluteThickness[
      1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQB2IQDQEcB/Ti7zIeSThpnwYGbAcYYufExPAf2H/2DAiw
HGDmO7PYRu6IvTEYMB+YJp9ybG388f2zZoIA44Gmg7q1x01n20MNPFBSbbZ/
/8pCe7D2M3/2x/k9LBJ/vnk/WPnMn/uPV+V828S1CWrft/0FQce3hH1esx9i
/uf9F7QueGRtb9wPMe7D/gmL5p4y5b9lPwOs/+V+1rdeD+avvGNvAFb/eH9I
c8gZGY23UPmb+xccUZf9sv+d/QQw/+T+GSZ6MvHbH8Dcx7BgnuL6uVPe2i+A
yNsrvuV6KBn2Ccq/ad/F6bzXdPprexOI+fadU4sry549sp8Dsd9+3g/xwFOa
j6DmfbB/I/V7H/fk+1D1n+03fN+wmtXxuH0GxH/2IcLLLVpPHoXq/2l/q/jU
avG2nfsvQMLHnnPWA8v1uVdh7nO4Z2l+pu7qTFj4Olxb4/iTf/PJ/RDzmR1i
/771MPI9a38OEj8O7lzeM1jim6D2sTns+T75XNaR2dDw43A4eOTm1+OTF9gD
AL3r6ZE=
       "]]}, {}}, {}, {}, {{}, {}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-3, 3}, {-0.22728028893470764`, 0.7954378128051758}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7533558201351337`*^9, 3.75335586574498*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:805a\:7c7b", "Section",
 CellChangeTimes->{3.75335591513103*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"sampledata", "[", "center_", "]"}], ":=", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"MultinormalDistribution", "[", 
      RowBox[{"center", ",", 
       RowBox[{"IdentityMatrix", "[", "2", "]"}]}], "]"}], ",", "200"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"clusters", " ", "=", " ", 
   RowBox[{"sampledata", "/@", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1.5", ",", "1"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1.5"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"-", "3"}]}], "}"}]}], "}"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.753355922325407*^9, 3.753355931100131*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"clusters", ",", " ", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"Darker", "@", 
     RowBox[{"{", 
      RowBox[{"Yellow", ",", "Blue", ",", "Green"}], "}"}]}]}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[
      NCache[
       Rational[2, 3], 0.6666666666666666], 
      NCache[
       Rational[2, 3], 0.6666666666666666], 0], PointSize[
     0.0055000000000000005`], AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
vgewPhy6l1YScBMnigSV2yd25Qjgf7mJMFY=
      "]]}, 
    {RGBColor[0, 0, 
      NCache[
       Rational[2, 3], 0.6666666666666666]], PointSize[
     0.0055000000000000005`], AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
D/8DfaSLvA==
      "]]}, 
    {RGBColor[0, 
      NCache[
       Rational[2, 3], 0.6666666666666666], 0], PointSize[
     0.0055000000000000005`], AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwVlvc/Ffofx89xzHOMc6iUkaRQSsaVFR+KUjIybrqhwRWVSCQyykhpklnc
bCIK2dXnLbKzMk+UrI7tHOPIyLfvD6/H6/H6B56vp/R5N4t/OQgEQt2f/L8H
79/U8SkZQhsuzj+lWxKB/Uo0XU15Cfmfag5wjSSBVz5h0lv8BxreKNCZIUAG
qSO0m/uG6/Ad/Yogs05+6ExbfwhuE9i4YGijWO5vrCdgktgiwcbi569eqndb
x37y9dquHSy0J/zkg31eNKCkzbycPbuO4pj1b2jG/KAcKm9/PLgf09dLyn4V
CIF18Y+oealJ5Ht1KPFMAi/8yhvjPGDyG+2o0BT/msoPV8VuSPvR3+H8j7JD
o2YL2HXex0XUZQipfKk5dsaUDO+8lY152+dwiq6C2eNhHvBgO2U4zbThsfsO
F7uvUEH0oX9q/Ew7In6OkBe/yQtR6V1nWnorcWm117xFMRnuyY2ULtfWIsUK
go1injBUm+l5pl8bQwphaacd3Nl4wImjaf9FNnLfaqp0OoEAg6LXlKkfR1FX
78ldwWxu4E904SwnMdCa2g+nDXRuEOlf2tY+9xMrSH6GHmke8CmRLVcYGcfR
5Wbh9SZU6Hnmz/osOos+2oZxaG4lQNk8syleJwfdPT3OeWoDP5Tix7u7laZQ
61FaH7aiAp/p/llDi3EkYWr6w31ZGGLcWw5ZblLBldn1rbsH2NinuawhUoSJ
jqpYBHQeFYE4V+qsVXkV+mfkXy4DW25ICi6UJE30YHJsRB3NUhBycsmkg5Ej
6GZldqynFxc0FtPCd5WzsD9tvVDbQQBusArEBIOmcakoxSVZhQbr4pOHeOfa
ke1ffCYkB274kdf+MqCMjelOhOgwriVMZos5Ky0T9GJLM8tXts7hJavhZbZJ
PxKTns1/1LqGC3cevHLT8xM6Tngvom8lCDJuYkXBrSPot+WJrbohBNhhq5WY
qT+BowyXs9cFqCA8rD2WeaUTGdGtNw2EU+Ct2xsDZxYPDGU37Q/JEoCtFpSh
Ic5+zBmdcW0bUwB2ZA2klqNF7FxqlSOrSYGDSep3pdTHke/n4BAlCg0Uu4s1
q7UnUK6dI/HKayoIDqp6R6QtIekBhu/GUmHw+6cpKRtN4uafT94Gha3hdfO9
iecSfuBvzO1Ch5WJwBPJ+s81vxdlthmKD5VzgqxlZXhO1wx+OmolSeyjwcC2
kAsZR1nY9UNrTlI3CQJjp4ZauxYwOSjgpcgcDWrZrFzr7FGcNiYX/Ps8J1Q6
soM5whYxoy7ha/QFEZCwMzWnBzFQJteDuKEwHthYddW/Vvsj8r5zPpmqToFw
8pE7WosD2FPeLTSZxAtqfKuqVPdFxEB9l5LtxzDmCXL/dm8VRdR+PpbCXMEd
1c+nan8t4YPvGxOV9clQsquPXrcwhyWG2M9pZ4iw/zhvxQGvURy0PfbWjllB
yIh0FFHLaMItV55qMhIW8ci07ma77z+xhpHUpZHPJIj5R+zBoMEo1mTppuMJ
Xlhf86bLpAMyNwyuqBHnhfG4L7du6xajFrg8o9xJgUFrxad+14tRNcT7iqty
wik2Q1qKVojk2Q6HL08KgQn3YQ+cOYDF13f55t0QAum1MCfppT7EvPyMIC4l
AoGNnDq3777AvCvx1/Z48kP1UMZdNdHfyO853/u9EfxQrrrnfFz6JD4mIjsX
WkiE8OSlxYXXXciZL1Ar5AgRvC2G6Tp+v1D8Kmm1sXANz73rpvx94Cd26623
LTXiBVHaAcGH9l/wSDjjU2mXAJCaXjNa7eZx/fP25KJeMsSpvVbvE0vDNsaO
wHNrFNFCnALz3ObwB2rd5qgXCzi64Gnm6YQ5HJcrrjS1RIXGWOrJF43zWFer
SEa+kQpqR34qria0I+NtKPRZARdofVJq5HefR/PvHHtjFEiw07hn6QJlEklF
QOlckgB8rFpjZJXNIIlvcT2v7wpCpElpwWlvNr5yI/OKwCUiRCuo+L+Sq8P0
ay6PNOwJUEl99hz94Y24YeJGzZ0keHHKe/g8DxP51SqItE0QQerxyXTjlseY
esGw/QGJCg5ny6psxpfRf1Wv7G6qcsCjtsMvJBoW8bIuU1ollx8OFcTIHbMt
wkfD2vO5w9dww6vcwLdPhlF2VDyPKUMQAnJatFh4Ad3SC3+7VYMKTZ+Om3V+
r0Z+6p4TN9xZOKh6WH/kayaSkskgf/vDe3n3nbvCCgfwdq3x7r3NPMC1eSlM
dPsInjDTP3vuNhsXZice0tCoxx/qnrzbMsYF2Y6GyxJynHr2Klxp1mK8MJd4
P73txH00QOw+p5rCA5u6DPaZJ7ehO3RXYYcsHtgW+50QYt2MWObbOZ2TaOBb
VCm76eoCXn3kGaOlKgApyR/8jhiMYLqj0EmqFAfM+aXLt/XN4rxdylnN+hww
ZHpasXwHA88bWynZiQmAU4mDVFRvP+6d2XfEZYobyrrU7MOuLyNbXUXVqxEk
+Hohy02j/QuiW3QUOg7QoI0i8vhFxSOkOseQnHMmQ6OF0CZTd6Ke6Xffuiwp
EjSwD0/3CM1js6mvoTaNFDC03Opu9+wPF22v8j3/PIaXh+PTXKKKsOPq+He5
KhJQU5aTvlTkodRY48hMYRLoByWblDLnkZMPU+X4ZhoQzycs1F4dxJbXeanR
iAo/90V5CE1NYIlOBb+8Wh54vGLnFn/3O7IYfXaHPUGGbr6/D4XwdSLB9Kmg
aRYnZFfVu97v6cbFom9kf74SAMUUW22GXzOq8/qg3mnECbRTDYklChygn92q
adBGA/1171REYOI9l6T9HW2pkPi+QygzewEf8Fhp8dlNAKPs642OOsXI+ewL
x8gkYWjO5E3ddKQIbwth7NtKJIKmPG/Wl49fcejesg2JtjyQNXShgWkShm3O
DhqRbPrwmX5S86GEDhzY0PipwpEIsU+4tMnENuyQWkh5ai4AB9VLja9fH8TD
3za7eX8SADdpa5uHJh9wTW73IxUjYWip/VYuss7EM9wc8lX+VKiWu6+125mF
vvcdYKT+2azTXBHpVwaRM1fBXdE/f2JssdvH/2wBMsuUlelsJUOwaH+o120y
7GXzRZBuEiFdrSSPkNCIbsV4JjwJJ0Mxb3KvTGAf2m7kWTdZwwd/MYomjbew
UbGy5JruNB+U3g6klAr8wMY69sVPkyngQZWZn6+ZwpKl1JeFQAFuto76pC0L
X9TQmdiyJgKhgdEvx/YPYm/tGc/OSV5QOtlzpn//KnabUu1O/72Eh7RrHqTa
lyHdjSyrY2cEYfhX/8y3D3VIsftBoY0DH1Q7jEl3LrSjizvfen7wWMNNC02V
JOtl9LC4jahcsIzXFBi1zA3reLjecj/tHi/YPOD+RpJkI7OPhVu+OJLBcjez
IyCHja6zdqir0oiQEMzn2WHIRDEXXjBlQwmw70RMTj5xFD9RmxvUJRDAasce
z6U1Js7oLg46tpcTVvcEscTcFpCfxTVVa28qJJxQTo0W60N/h6rq/RvABX95
drBvFnUi0h63Q7f3CcG8p/17cs9v7Ke/OGUwR4RM6w4fSjkDr5573vtQhQQa
UyurBnlTqCQLDDrMWfjc1RRd38E2fCSl1eWXyywmUaPpbxuIejt6ftm9L6bC
ARWnxY6Xs/iM7LZAvS08oPhOkc1V1I/ylPStjjlzQVVP+9QW4VFk45F6myuA
H5zN6V2fCul4w2tlR5VNAuA+UisZPcrCBlGDJ+70ccFlGt86VW0W17YnTzcS
uGHD9v2+HgHReNObtnF7aypwhU+YXGpcQDnTq8fT9gnDl1euOflZy+il6Zu9
e5kkkFFjhnCvcIB2hsEPOQoFelZ0Vd9OT+DMiq93vjusYT+fc4kxKnkoXl3O
4FUvG//rVX2y81wVfursLrNxlQ98C58Y528YQ0ZDLxW9bpPAiLOtxvfwEBoI
Nd/yyJofPBP+6xSMnER+DWGe90S44XooYeeh2RncsnMr8WAcFZaNGLv0JJeQ
x9nzKaoav7Bio47bG0yAW6nt4mjhN5Z44yTwOO0Jrnv9Ufmvj3yQc6l6sJRK
xzXELp4azg3g1aMQVpf0HcUEqbx/UMADLsXhrBunWdj4Lkel0B9/OXFAr2ky
aRm940n1ijklBE7NKxLNS/O4xOKkUssiEc6macbN6dNxuPa0gSQ3GZY431As
MzqQjPio10ZdMuTv/CQmJvEGGSZVbZ784+M/74RMc1+exWEzC9v0c1fx/wCx
d3Jt
      "]]}, {}}, {}, {}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-4.712971716074991, 4.469703276552085}, {-5.004661676823565, 
   3.720444853289239}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.753355938621892*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"30", ",", "Ramp", ",", "3", ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"{", "2", "}"}]}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\""}], "}"}]}], 
       "}"}], "]"}]}]}], "]"}]}]], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"30"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"30"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"3"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["4", 
              GrayLevel[0.5]], {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[SoftmaxLayer, {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"3"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "4"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"3"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {30, 2}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {30}]]], "Parameters" -> 
             Association["Size" -> 30, "$InputSize" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {30}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Ramp, "$Dimensions" -> {30}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {30}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {30}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {3, 30}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {3}]]], "Parameters" -> 
             Association["Size" -> 3, "$InputSize" -> 30], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {30}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {3}]]], "4" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association["Size" -> 3], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {3}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {3}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Layers", "4", "Inputs", "Input"] -> 
           NetPort["Layers", "3", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "4", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Class", 
              Association[
              "Parameters" -> 
               Association["Labels" -> {"a", "b", "c"}, "Dimensions" -> 3], 
               "Input" -> NeuralNetworks`TensorT[1, {3}]]], 
             NeuralNetworks`TensorT[1, {3}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{279., {41., 46.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.753355954123851*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"Thread", "[", 
      RowBox[{
       RowBox[{"clusters", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "->", "\"\<a\>\""}], "]"}], ",", 
     RowBox[{"Thread", "[", 
      RowBox[{
       RowBox[{"clusters", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "->", "\"\<b\>\""}], "]"}], ",", 
     RowBox[{"Thread", "[", 
      RowBox[{
       RowBox[{"clusters", "[", 
        RowBox[{"[", "3", "]"}], "]"}], "->", "\"\<c\>\""}], "]"}]}], "]"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{"RandomSample", "[", 
  RowBox[{"trainingData", ",", "10"}], "]"}]}], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.16308084842743964`", ",", 
      RowBox[{"-", "1.152459068052365`"}]}], "}"}], "\[Rule]", "\<\"c\"\>"}], 
   ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.6874115769461064`", ",", "2.554618878454522`"}], "}"}], 
    "\[Rule]", "\<\"a\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.7504549108679455`", ",", 
      RowBox[{"-", "2.8564842259863767`"}]}], "}"}], "\[Rule]", "\<\"c\"\>"}],
    ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "2.600887565052057`"}], ",", "2.932116073252602`"}], "}"}],
     "\[Rule]", "\<\"b\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1.7154479305163772`", ",", "1.313015697007164`"}], "}"}], 
    "\[Rule]", "\<\"a\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1.2919297948909414`", ",", "1.859961201249623`"}], "}"}], 
    "\[Rule]", "\<\"a\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1.1429809611891457`"}], ",", 
      RowBox[{"-", "2.4802869246557777`"}]}], "}"}], "\[Rule]", "\<\"c\"\>"}],
    ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2.064005891589212`", ",", "0.751004490268725`"}], "}"}], 
    "\[Rule]", "\<\"a\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1.0428562674665085`"}], ",", "0.582209103571045`"}], 
     "}"}], "\[Rule]", "\<\"b\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1.0895125136677883`"}], ",", "2.7283564817058807`"}], 
     "}"}], "\[Rule]", "\<\"b\"\>"}]}], "}"}]], "Output",
 CellChangeTimes->{3.753356014739461*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "trainingData"}], "]"}]}]], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"30"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"30"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"3"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["4", 
              GrayLevel[0.5]], {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[SoftmaxLayer, {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"3"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "4"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"3"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {30, 2}], "Biases" -> 
               NeuralNetworks`TensorT[1, {30}]], "Parameters" -> 
             Association["Size" -> 30, "$InputSize" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {30}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Ramp, "$Dimensions" -> {30}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {30}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {30}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {3, 30}], "Biases" -> 
               NeuralNetworks`TensorT[1, {3}]], "Parameters" -> 
             Association["Size" -> 3, "$InputSize" -> 30], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {30}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {3}]]], "4" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association["Size" -> 3], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {3}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {3}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Layers", "4", "Inputs", "Input"] -> 
           NetPort["Layers", "3", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "4", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Class", 
              Association[
              "Parameters" -> 
               Association["Labels" -> {"a", "b", "c"}, "Dimensions" -> 3], 
               "Input" -> NeuralNetworks`TensorT[1, {3}]]], 
             NeuralNetworks`TensorT[1, {3}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{279., {41., 46.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.753356081286333*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Plot3D", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"trained", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"x", ",", "y"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\"\<Probability\>\"", ",", "\"\<a\>\""}], "}"}]}], "]"}], 
       ",", 
       RowBox[{"trained", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"x", ",", "y"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\"\<Probability\>\"", ",", "\"\<b\>\""}], "}"}]}], "]"}], 
       ",", 
       RowBox[{"trained", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"x", ",", "y"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\"\<Probability\>\"", ",", "\"\<c\>\""}], "}"}]}], "]"}]}],
       "\[IndentingNewLine]", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "4"}], ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", 
       RowBox[{"-", "5"}], ",", "4"}], "}"}], ",", " ", 
     RowBox[{"Exclusions", "\[Rule]", "None"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"ListPointPlot3D", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Append", "[", 
         RowBox[{"#", ",", "1"}], "]"}], "&"}], ",", "clusters", ",", 
       RowBox[{"{", "2", "}"}]}], "]"}], ",", " ", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Yellow", ",", "Blue", ",", "Green"}], "}"}]}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1: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
LOeUfGEG6yznlHxhBuss55R8YROd5ZySL2yis5xT8oVNdJZzWr4w1pneTnm+
sKSze0m8KddZzin5wiY6yzklX9hEZzmn5QtjneWcki9sorOcU/KFTXSWc0q+
sInO9Hba/o3jeJ4L+CO/Uozzc4zy/EqRF6C8P8SF/BFKvrBJ/g7iJjrLOdFZ
Xg8lX1jIp6DkCwvlKfnCJjrLOSVf2ERnejtt/8ZN4ha/ixeo+cIueoPMb4j3
RfX58vuQYl5tQ6QzLv8E6YzrT0d5Urh89B/3J0X+AOmMnzsN6Yz5T6Qzfq7w
/WgTv0HOn+V+Q+KUfGFeii9N8oU1iJusBx8dXSTLfxfvWeVc7E7LF1ZEj0ym
5Qsz11AeK+LarHNyexa5KslAzRfemmmQ2XPJva/rcnsWn1sYJLdnsf7x+XJ7
FutRIZ3xc4t/R5KWL/y70MBS8oW5nHyDzJ5FzuRIOuP4ucUHDr6bgbjmy8AK
KtP4VrxH9HJjuIqWLzwwzJuWL6yPe/iVli+siJv8lZYvrM5dJeWVYP5obwwt
X5hf7KKn5QtzFlkpLCVfWNG7bQZLyRfWr2iRylLyhZknGXEsJV+Y69AnHHTG
/N3r56Azzs89a1XOkZIvrN34LtSRki/M1Tb6KCn5wurbsXPgew64/qOZnWj5
wtpTfa/R8oUVa5adA53xudgKC56WL6znj6yh5Qvzbm/WsZR8YX2XlR4sLV+4
StZQlpIvzByvbM9S8oX58RYNQGe87x1qbwE64/tjN32C7Sn5wnwbB60DJV+Y
V26b7UjJF+YsttnDd2Bw/QealFXR8oXDP8SqKPnCnPcnf9AZP7dF9XO0fGHG
qvcEar6w/tZPWr6wYmU4r6LlCw9ddlZFyRfWV/bep6LkC6vvTVxD8iNM8ohj
B7hD3gRaN+md1ce7UvKFOYckD3tKvjDXq4mTAyVfmN90s7YjJV9Yb1O7kpKS
L8wMciunouQL8+u9suG7GXh/7O50HS1fmOlxVEPLF9a+XmnFUvKFFbau+1WU
fGFti3kzVJR8YU1hfB8VJV+Y61q3JeiM2/Ml/B/QGd9j/NBqJdwPwfm2jSyH
dqXkC2vuNO5iT8kX5lx6dHSg5Atrl6zq6EjJF+aWvm6jpOULr2pbHXTG9xwm
Tg5RUfKF9ZatetDyhbXKKQqWki+s393ktIqSL6zROXdR0fKFgzpXUdHyhbNe
f4fzR8wnTwmG+xImeb4BM7tQ8oW18Q9H2FHyhfWWpd26UvKF9Xm93exp+cIb
+45woOQL82/buzhS8oX1Hap1gO8a4fP0vNjPSkq+sDboZk8VJV9Y+37nY2q+
8MZXd1S0fOEWXzkVJV9Yf8X3s5KSL6wZYv4AdMbvtWDyMVk+F8nzZRhqvvD8
FV0o+cKKp09X2FHyhdWpk1d0peQLK0pXXmJPyxdud8HTgZIvzKcu7wPfQ8Pn
jL0rxDlS8oWZzdG9lZR8Ye7ja15JyRfWHwlop6LkCytKHxymouQLc5O/Rygp
+cLcrMkbQWdcT7XkKaCzaZ6vpLMp13am5QsHOXh3oeQL61u7/Qf323H+7Pa9
h7pS8oXV669stafkCzMrV450IDpj3i8lyYGSL8yYNevrSMkX5m8kPnCk5Aur
nduztHxhzdCU40pKvjCzM+6jkpIvrE/pvMT03kLJPvzGpLagM/nf5TrLOT1f
mO9MyxfWDn3YhZIvrA7oedOOki+s0I4+0ZWSL8xF/J5mT3TGfNbxVHtKvjBX
c0R/B1q+8KT/7jpQ8oX1PZ86OFLyhRULLK/Q8oXVI26VU1LyhRU/9g9Sov+G
8mYetZSUfGFueIGBli+sVg1eQssX1pTakkHLF9bc/Wqg5QszM25UpOULa1O3
ptDyhTk+JYOWF6xglhrYhuJzOVzPznAD20t8LubqjJ0GyG/C9ajuZNDyi9V3
Js2m5Rcz0f1e0PKLtW+Tn9Lyi/V7a9yDdiLOz53pB+1EXOE7fA+0E7fnbNwi
Wh6xduZjnpYvzJ9p801FyRfm3w/bSssLZvA+jJzT84Ll95QkTskL5ox/7MML
9qbeHGKg5QVzxd8FouUF982T6kH2pg/YVJmWF8zNDjZQ84JdF7yn5QWrJ+UY
aHnBmpXjDLS8YK1vgYGWF8ws+5VGzQu2QHmLqH7uRaaBlhfMuRUYaHnBXIWs
DNp5nGJ5toGWX89VPJcMdojKC/uThKP2MNON0jhC5ZlcxFF5hbJQGl/YD6Qa
JY7KqwN+y/fxxHa+GbWAltesDlucTMtr5urtOKWi3KPmP3TOoOVnKfrNTaTd
2+HqfqHeq+HHHvzA5gvrYaNJebMf8v060f+cSjZAeewHxnvzsn088Z5MwQOD
zD+I88/UFUkwvlB5/duodJl/EMvvC3lPy+NWb8t4S8vj5lySGNp3DxRV7x2m
fvdgufYOLb+br/TiOu17CHr1yH0s5T6S9mjBc9p3Erhug/vT8rL1Ed7/gJ6Y
p2wvUBHdcPvX9I1Vme4jifqf/7EO7Bbfs+rg9xLWidjPX7KbCTrj5+5fdFNF
zwsm/+R5wQxDyavV9OzvrKTk1apzSw+UzcvS+Ro9r1by2zivtvgeBSWvlhvt
nkHNq531wUDLq1UUxhho5/va4/2k/U883qPQc5F9qvM0LO3cnO/RLl02XsTz
9IVMOi1vVzNb84iWt8tY1ztM+y6BviD9PPX7Ax3YO7TvD6gbTj5Cy7vkBvEL
oP143yzu6DJoP65//LwJMK5xO2++6wV2iPfrUl+1hv7F7e+3oMpf8mrB3rBd
aUf0rSP7rrLoN777ptDyZDWXW0TR8mT1fv0zqHmyR1TU70gwo9LSaHmy/H+a
dyzlPiTf56FBdn4hPrcua6DlzypUqa9o+bPat+EB0B7s9za9ekbLq9Verucn
268W/UNu9Zey/WrxuR0Cbsj2q8V5xyL7P9p3J/R3v12B9qC4i9P3HkzLh+U8
L9+l5cMqQvkEWh6QumVSBEu5R6qvMiqDnSXUU4ZDXOu5LIOWV8t9D7xDy6vl
xkx9RMsv4wtXebGUe6T6tqW82R7Cf+ea3C8dpjvF9hb+uxSH+eRR26Gd+LnJ
l+bR8mf192cbaPmzioNj42j5s1zTSwZa/izf6KV0Xw7rU+Z9Ghsu9gvWjetb
08DuEvQh63nx/vmkdDJfW5vw/GiJ4/66tjKZlp+rj7gSRMvP5aYG36fl2/LH
St2i5dtq6rsGA8f5gE9374H3wuVftvoI+uP2DF/4Fsrj9hzqp2ELhH4vi7nm
3aQp8L6oHsWySpfhXjfi2vLdfGh5term19JoebWKkaNG0vJqmQm5GdS82pgF
BlpeLf9IZ6DmSfkV2RWxc2w/R5Zk0PJttVvzI6n5tm594mR5tWK8OjIxGfoF
+0Mbm3gYL7hf3qoTWXKfCudJ7be+ws4U7cck36TZnlgYX7ieZTu+QHncjxV2
HYL+xf7/miEZ+hHPv/WmhNLyiPX+hVdo+S/aL0uCaPnF+iM3r9LyxfQL2vvT
8sI0Q/afouXnMjhfQM4p+bnar/9k0PJz9TvWfqXl53KN8tNo98bVc0ZFgc7I
HviVSwzAsW7tW6fB+MLxj+5dArQf2yHzwgAc+58Gw6TyuJ49g95Q84inPXsE
8Ri2h4Efj9K+M8YkfPehfY9IPcTy8l/yahmGtAfn1T7o015Jyatl1hsNtLxa
/l6PNFperVq5MJSWV8tE3jtLy6tVDOjxlZZXq59UI5b2HQ/9iqmJsv0Wsb/2
vtTDfI3zHS4d1dG+j6GOnjCOmofr2MpAy8PV2qV60fJwtTf2GGh5uIrydrtp
ebhav8AU8MPYDhssTqfl53JJvS1p+bnqf1Z8pOXnaiZdD6F9F0LdNzWc9l0I
9fQW4dAexDllFny/5Y/xSzi+hzzsoZqWP8sM/ybPqxXzGiy902j5s9wLjwTa
9xOYcW7ptLxavtDxNC2vVm3xI0V2P0dc7+/KMIBfRfVrXl8xgF9F/agdlW8A
P4C45nauQTb/is/9740B9ETl9W1+ytdZYry3ckmcbJ4V65nolkHL89VvvRcG
/g3HvV2bP2Zp95afzo2F+Af378ROd4Bjvx2+2A3mETzvhOX2k80vYlx922EV
tB/7sXG/WZnfE/cZoobO/Utep3QPHPkNtY9fGu3+ufodlwHvi8fRgwYG4NjP
PO6cBv2O/XCiXzo1b7T8vqC/5HWSfyZ5nfoGbrWVlLxOPF7+mO/IOMJ5ncHV
kmh5ndwag4GW16kZ7GOg5XVqR53KoOV1qtfkGWh5nYroOAMtr1Prv9VAy+vU
BA3TUfM619un0/I6tYpdjWh5ndwzo6fMnsV4JndcMsRX2D8M3m4Ajut5akgH
nbGd/LxloH2vQN1sxyRaPqki0n81NZ90XKurtO8ZamLn+tG++6Fx9dTS8k/5
7dPP0b4/xs2Kb0T7To5+soMrcFzPuMsrwL/hepZFlQN9cN7EysNOwPG+xO/G
C2C9jPfTSsdkqkhchN/LrF9ziJfw/aixk0bJ7PnPeAP1j6LdhXZKSn6oPjRb
Hm+I+6tnOjjBfh2yT83rj5/h3h2yZ6bCjAxafqji+6cPtPxQ9T2bJFp+qOLB
pjTadxgUpd6mgv/E9Rz9kspS8kA1/ffYqSh5oIrEG8G071bxSb+f0L4Hqy/r
aq2ifQejdem1tPxNdUaZsypK/qbGPa85LX9To0V5nTh+y/pBz3uqkGKg5W/y
qmsbWcp3OPmQDplwHwl/Rzf6zBTad2YUn1fwtO/JaH1/V1FRvifD9C/cqCL1
4Dwa+4/fZfYj3gMv/j0XSl4n19Uov/8p5nVqCgy0vE7NrBwDLa+T36wx0PI6
uSavDbS8Tq5CQ2l/A+nMVb9roOX18PEojxjbuXuhNA/ifv/60yDbTxD3/S7F
GGRxoLiP5+Unn0/Ffbkx/74D+8fxap/BW8EP47jCo5UdLa+Qc9wh7UPieWpT
nkG23hTnqQNxEsfz1Lpd8nlNeK56sZ8LLT+R0QUfU1HyE7Ueytq076jwp05R
82q5H5GXoP34/OKu/S3qd/ymdZ1J/U7a2hpraN9xYtY/u0L7vgq3V3sQ7AS3
c2/sdOB4vlh2Yxn0I65ndM/BwPF7nd29BuIlXP5nt07A8T75b1vpd6BQP2p1
vw2yfUgx/l8ZLfkZZJ/asVEG2f6Y6P/1LQy0PE1G9XscLU+T35nxmJaPqZlt
dwv8Lf5OS7MhGSpKPqaQz0vLxxxRNL4o+Zhcz2wDLR9Tu/LQJyUlH1PffcR8
FTl3wPFecb4b4cjO+WNGab8Cva8ipsBAza+c3ZhVUfIruVrteRUtv7LP8gEs
LW/xRd0sFSVvUf12qxvcT8Dfa3q3dw/ce8TfN07PcQP9cT5+mGIx1IP34VVD
d9C+C6Rv4XYKOD7fzNtxkZa3rm289beSkrfIVE71hOfi+XSzwUaWZy20U12Y
e11FyVvUuIUkqyjfq+QqZi2E8Yvz7ss12UXLo9esu7MQ6kfzoHqSm2eJnta8
+PvXlfiTy+O7qdi8kntilvwk4Xd4q/C3nT5P/t65rCPhpPzFjgtqNnk2tISb
Q3mHLu3082vYAyflmU6eKf9+OFfCGSivn/riSAPGDTgpf7Nf6vbJRz+V8F86
Ur7Xnt5jbr5ZBpyUr3LG+8P/FhSU8Ewof2h8zR13rU4CJ+Wf+g7oadejSck9
KD2Ur/rkxdouvQIdCSflXWfc/DjlWH9SniXlzT0m7iy77icpz5LyHbt/U/oO
W1tSPhPKL54xIntXdifgpPzcTcuHbv/fyRL+C8r/0z20azXzFsBJ+VPP7TZF
Fe4t4QxHys9uVaH+myE5RE+OlN9SOmTeXsWYkvLmUL77qmoRizgd6S8ov3IU
87JJWMOS8pZQvotTTJU3vdYTe4Dyi6/O6e21N6mEW0P5+gtqR1aZ0Qc4KX//
WsPgp8OuE87XF36/uAI/1rJRzW5be4G9Eb6mWc2Gb0dpwa4IvxR1fUSX2vC+
wDMPTxjlmjeQ6KYjPP7HNpdfqSuJ/sC/h7Az3/G+YA+Eb1LlNn8fHwT9TrhV
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
lzOFxljWq5/FIsOIxdD+l+WPXL/p/pVtV1Dbxj8qCuw/b/p5Tbj/Z/bwtI0n
5iZOhfYPEvRMYO2fXOtdmCutT8Xz2zj2hmNF/gJav/sLdvW1eP1um4/a/0no
38+sbyNGj9fvSsFOwth7FRlbI1q/+/T8POW2+wfWsxzjidfvNv/zK+zv9fqP
9XvE5uu9+nj9ZAt8Grq12voO5qkOwno/i40drx1p97wH6LC93ZyhRuN3Nixj
6tgrTaX1aXyZN+ER/t/Yg9Ncv/vqpPWp4H/cM9lRi9istgul9elAQZ+fbPPE
5N73ddL69Kzgb7NYj/b/KublS/qI91J+sPXXM/pspM8YYdx9+2P9LuqZCfUS
feoJ4yJDxq05cRylyjmvuTGcnx1pZOd6je9yrZ+0Pg0XdCtkU+Ye6zPIWVqf
thd0K2AXWmyZ8k+8tD4VdctjayTVuVKK2w12Iq6LjeyQWb8s68yVni/qU8iO
tHPymvdZ0kHUp4At3aOUZzLSQdQn/491uqjP7z90uCnok/uHDhUFv/frDx2q
CPNyGW7c/qvPt6J1qNi/5tzRXf+VVRZK69DZwrxfmut/fP0dxWZpHXpY8Cel
uVmzHm+4O/sU6CCsf4vqX/hgp2Wt/tJ6c5kQz5hzD5bxPSuclXTwFeKf0tyu
HczuHKRDiDC/lP5jPS6c/2rMOLkO/xPmr1Iybs2J890fnE8otvPOVlxIpS0z
7t6R1ptC3OJVjtNez1h3zENab4rzryV3eMTeI31spfWmoI+zJafdZTvweccH
oIOwzi2qv2tQTatxcyQ7FfcHynFK91+h7qckHQR9iuqXr7sFfcTvEjN4PSXo
c6qsjFuK+jBybs2JcZSFnPO3ax//x310RS6Uafrg1i5pXSn6ARtuXe8zl652
ltaVlQT7seG27Pm8uYGZtK4U48AK3O47h35pxhSaxgNF9R8eHjtgUF1pXSnG
UTbclffm+QsfSTqIcZfNH+tr0X7kv7drLurzwlrGLTkxPpFzfUkcmKfLcVtX
U2PvDPXECe/7S+fjs8p3TPkpwEn80GdEjtE9eDfUv1XwA7m6GRtXhXbQDgc+
vSQO2fHb6Wd6rxvwXPHvN12Nsbynz9ZJUP8KwS+l6a4cnOmx3C8ZOIkHdIcq
JFWtKs0L4vxl0PmeCzrxzSwVOIkrYh9mWh5LMcBzjwjj9Bd7NXTjc8fez6Df
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
dr6xYu0i6vkldr6xop2Zmu/Azpfed8bON0ts3qZViUUbrLn5Zok758yuOD3o
JDffLPFix4lHx1+YyM03SzwxLrB1v4Nx3P6eJR4znVqaE7+Cey+yRJ8pxsc2
w+uJ7HuRJbpbPJn5sdwNTp6zxKhcKb0gP/SeMpafLH6+BXCWnwLt8bxyxZcW
n+p/G32Xs39yxQ9lO0e5nPTm+MkVPS6scA6dN4DjB/XTcHGvsR5fOX5yxZC5
U/V1U//m5CFXbJsu56Lw880tZL65hcw3t5D5FmivjlNvrvP/uPPFulU3OLva
XOd7pvz73KFNOLvaXDe576XJ4qoxnB1irju0sPxfi99ZsvKP8Aavo1p1n3+U
s0PMdU1eZ3pObtab1YcIvzs+JqjmyBjO3jDXDT5xyH/LqlTO3jDXeVlIfibE
G2tvmOvK1BCyC/CpJ7xyfGpw1t6gOGtvFGiv8iBY62r9l9Vu7qrnnPxY64J2
jX6RFOzMyY+1roVLf8eh/87h5MdaV65h8ft9rpXn9Im1rkjN6EH+ide498ta
F2V1wMtm9gJuf7HWxTfe6fS2TDy3v1jrei67u3ajXxq3v6D+fXJLGHg+BWuY
LyufFGflk+KsfFKclc8C7VUe9La6H5fy3L53iOHk0FY3a9CQ0zevruTk0Fa3
vUmJa1Wv1+fk0FZ3yDaoufPmz5wc2uqsvHecWvNwH6uX5HtGSlTv8rXJS04+
bXWJk4+F/yqexMmnrc7vWY9VLcqnc/Jpq/O1+fZmRgH5pPe/sPJJcVY+Kc7K
J8VZ+aR4l8DRcRemqedc5ThGvztP/rVMHdx+TZM7YdOiaDyn+DIP50UBZ9rv
XOcxHscBFfzM39Nmbh/8qX2ty2VaXJyWBXix78+bHw4t5jbk2Vmpx5ZYwANr
9e02pXk7t4GzMx806nEG8JHe0uLRXSe7ha57vWNzrUyIz/g0Ge3RI+2Am/OI
ko9r9sgBvJTOcv8ff05wG1C+jhB1wUxH8NY3zN3uWDRwc9DfqlirB43bzHo/
xTUoOKV9WIJPC/m8O8EbdK0zbfHSs+1X98vvfWFaCcBf9a74x/nlC9t3Vvgh
9YlKGJu2/eRsmvarfakRa3dEXciDuMqlPVOa1gwf7Kby8xXw/b92Po9qtMat
25z646dHxQF+/NjB5FfNLrv5dHmaX7fHTcC9Z500P3gvGfPwE+Iqt+7GvB/e
+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
z15vxTmMvlL86FNXlz0Uwxg9qeBPbf84h8dJ81zQjyOjZvwrqvdG0DyXbMmr
cf+oVfg7As1nUf87Hxfi/Wua54J++rZ0TRcfae0fhCM+J7zd+Vj0VHGtX/yy
Rfhtub6pfK5b1LR3/Nb3X6IndQT/Kl087nIy2kW9rgjvF6q+urIwIkK8zPgF
Ch7/JPgo9/7myPvCDOnvAJHtR9EbIbZ5/HcNaj+z/at5MfZt0jm7V9EPR364
6rnvm7Hy+yL+2/ER117ZR2qufRvizuph9TtIl0mfufEr3ztWl3vyltM/6neZ
9bkm8QXz3in9PA3Z4F6o/c/qJWr/s+NX5qvsp2z/il8Q7OvRgdO3ip28YMfl
dK4fxU62+TruNtePoj8XjH9Wn5uvog+bbjd84NoruN/Uux04XLkXuMiixHEc
ruorWf8w48Ty3GNICqcP6X4RXMh+8V2rN9T5Ohy59UI8qtUP6nx9lv+4KU7Q
6gGEo31z4dY/yoihzPuuyIn3yKGR4n8cno/x+8z7ru4jDf98wdlLij2zV8bH
MM/NEksJ+hbt7DxFTZ1uIif3Bn/9JLJ2tYJ7j3gQW6j83GXsJUU+m1b2jBKf
Mn6Qgovlo6PEXIY3BZ+x/1ykeKAQnquofhbIM5KT/c2yT4sdmH0wU/5O+sf6
NwvFB8x4lPfRwW/BJ7Eq00+IvJ8OTnt9Bt8vTvNB7AWhw6iTU8Q0zm6U90HZ
bixMPzB6DI0H9R9Y8UuEeIiRB+U9DQgf+0lMZvpX7Y1TN1LF49y+313+voD2
/cL0z4pC7JZHjDyo8uxwKJbbX0Jk+y/geZdwrr2C2wybcxPfC0jPSaIfQzp/
4L+PqPbOhNgkcbrqpxgVWLUDnwx5mCAy9qr6fd/4sS2vVxV+Wr6ryttvqhxO
r2Bi7WfVvnUoei5dvKj6v4BHS9K/x8++KtRfUO2ETG3/Jaae/Cg2Yvx6RT4N
zxyj8f1Yidr2TW904b93q/GBdznpYm+mfxX/9JOPzyv+pqnr01hOnyv4kRKD
eT2vfMdR7DFWTyp+yo/Q3HgOp/4Ig+sVeyko1OkzHn+Oln//Y5kmUb03JVuL
R3xr8lHUFyJvsxj7RD2nqhsWI3owvCk8eMY04eVHwXXTQlPE4Vo7AevPDTfv
iRcY/0vZL3yd/rzDvUdKe9279QniFM6/y8f+Hcunim9M4s8bKN8x/WsVDxMr
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
mT2f5fMLi/VYKOdWk/uftxzS8nmrHa24sdzgwY2udNHx+R/trfjOrzN/lt+X
rRPyfVvnh04n0vexeamEPMVWPC4qZj+b30rIO2PF7QwKLr/wb2x+tlBznfg4
fHf91SpS/1TSDXpeebDiRLyWl9/Rive4uMq9tmKAjpffwYoPvPo+t3bqT0F+
woqHFaz3+rB/F+nO5y+mRDwni8hjzwV4OX9bcY9axI9ihDO2fg+E8/LmUXe5
cSf2czXdcYvj5VWTTVpeficrfn7L0ZkDQ4brePkdrHjFDXuDqGMOJC+/woor
e/3Pp7r/CXIrn4+YEvFqXZTer1j9cPIXW3FRng6bh7+X9vsSzsuvluG8/OL+
zpn2cctr0UsxRsfLr7LiT/em0906OpN8viSFFU/JfjV6S9hrsj+fX4wS8cxX
7qfq1c+lhDzCVrzzO1XiJiQ/3y6LFRflWcLpX9CvDc63Sy3D+fxK4ndB+9M7
u46mTzsuzg/WdX9Oo4q+TXsPE/L4SPvTwSf6em9K+wry2vB+p8L+KSSeh9RA
/dmVcC+y5h9XW3HfKoSJ7Se1OHmkuN95ToQ3Y833JPHoze1GDHOnVUI+LHEe
U9Mvu8T4h79RUy2Glr1XW5xnUHvbeVS5NfBoW+oiVz7fipNh8cu2BJ8sNS9n
afkx+f6Wb50fcn+cWf2uOFfUj3Ufl/HzSIOpr1P+v/Mj43rIN1ZfR80YczpT
+F7frfXXX/bB8/mLG0L9Gmv5F4eLCxt7vqM+g7zzjgSfd760/O8JHUduFeVj
x2mXdrlRjPY61ZLTpxR3Sr/c18wl57RY3jrefepfDVPdyqYu8uuatV/db//6
3leHBPJlrVPdJftcTcePffA9cXws1bcwO9qWF9kyzzcvos1oQX6JJzh67GT/
B/ZryRnY+pVBrejV4mxGgHh/jrBeILsoj2ESzxWc02XYri8Ip4moGF+PHVr+
3Faylxhmd/Knzu2EejRW/BcTXingfi3yJu8Is9pLyI59GhnYQofzr1mcOPbY
t6a2G3aO7MTej/fxUM/TJGb3cvllIun08QeF99pb8d/Mg8GtRi0h92PnjE4m
VG66Ytw13Uhsn+jE3kfq/z7erP2F7bPYe1b1TXRZ6YH4vpi9NzV6/aIJOSTu
P1Sxf09MqTCcxP3b7H2nxERN252A78nh3kf9Dgjvlewl9L5ekc0NgXB/oSQy
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
l8y53FXsz0L9+Ub3LxOHbn0+HsiZb/wU5/mzRfAVIGe+Udtt/Pu4R5WAnPnG
ZTEtPz99PgLImW+8PsbvTrz/FTCf5xtnmDJGJT+uBuTMN+5WuUXWnpAM5Myg
Rrre3XqyphaMrwLK+82Sf091IYD8BVRdUzuHt3/2B+Ut1Nz+r0IUXa+A/myh
4vwzH75vGAraa6EaJ5tWMXtzgX0lxatg9euVtEuVL7c2VTSBcaqka2lHJ18P
jQD9UEnvXBu372I0gesT4RfPf/BPGrQXjFMl3Ww774/F5EF4+2pEhGy9QDj/
ex7Qp5r+MWjyH5vvJwE9qGlHn/XJXR5EAT2o6U4PiQ3Tu5QF311NH50Wk9z6
TBz47mo66MRLs2OfNhQmP8JX+SjW5MjWOziv2peCa0rDeXnQfvZM4wrD5zWc
D/TsTH+ZOmbw9b01gZ6dab+CDq+WZKXj8iO88cMdt30ZPT5fIbyLxbLw8+Vc
vF0IX1GozEyWfReYh8i+FFxTCm62jvdf4crts4d0BeUVpjJ2z/QnqnzB7UwW
/zv6piG7Mr5OsefRLVos+Nx0J6g/gzq4vNKaxF33wPxcQLWY+o/jm++gvTZx
ZXj9Fupu5vvFHVd+AvVYqIfJIUGnXsJ6EE4puPhqARf0r6SDhjTMO1P/K7CT
lfS3oIV7y3xdisuP8LGxQX0UuuvgeynpS2+NHSseFuuX/Hhlmwfq7oyPBXKq
6Q3Kb6fX7c8F9TvTmy7OGV0m7RneXoQnNO683v1ODmiX2XgpvGNZ6iHs52bj
qPhVXBwOrjc1nXdg4fI2RZ+BPAbq8XMPzabfQH703vdxp+0mP40D9Ujxhzie
QbmZZrecFPAB2DNFxopnrse4UaCfo3l4wQFv9ZA/xfZKPOglj4bObTnpJcDN
xll7B80K+AntUrOxfMPa+qhiaJfmGwO3HP/BxgVhekb9auqtuSG+D6+DevKN
s/2eptUqnwHaZTZOC52zzm30WyBPkdHv9vQa3xoMAPUUGRtuuHio4p5+4L1m
49Go9iOTFWFATrPx7ogyBhcG9tt8Y6Pe6vOpL24AvZmN4bs2khE3QP9B3/e7
5+rk6elJoLwU54nhaPzGKql12jm1QD0WaltojH5+/CWAG6ipD2+0clGeAP28
gBr7Z8p6V2Y0Pr5QPWMWOe1b9dEM1mULldewdrk077mgnyvpTxM/12Hjo3Bc
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
0wzWcQs1XsnzfP8PAMpAFA==
    "], {{
      {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJw1mwf8VtMfx+99xL1P6bm38TvSLqXILEpRSIikUkkRDS2UsmUVISLZsrP3
3nvLzs7KJjMzm//n3ef8X6/f+Z3Pc+6569xzvuPz/Z524w7cbVolSZKBqyfJ
aqofqCVJI9UrsyQZnybJHJUZ+p1Vk2SW8AV5kgwqk+QwtW2qurHaT1f79Wqv
Lzxd7ZupHqJjU4Q7FUnyio7PVvlOvyeovkhlgfAa6nec8Hk69yL1P0N4L9W/
6tjlwr+oHqXfB6veSPXE0ud1Uj1O5Rj12Vn1LiqT1N5R99pHbaeprK4yUu0T
1L6O2lvp96kqP+n3haX7jFB9re6dCv+o+jDV81Q+VZ9GVfcvVe+qfoeqbRPV
56rfN8Lfqz4njs/3+n2e6hMjHqp+a+q8x0OSDFDbQpX2KvtGPJvxjuPQQWWu
yrkqLVSmp74W1/mtcNuw0vfhfqXKCRHTp44xTHy/a9X2jEoDlc56vh3VfqK+
Y1Mdmyycqu6k9h2E56j9G/V7V2UDlXXVvr3aT1D7zXxLxlD9D1d9lspEHRuT
+hvlKi117DKeWfVE1ZeqrKcyKXX7pionM1/oq9JM/S5WvZbq81Wfwpjrms2r
PnftqufGxXFM9i59zw4ag38Lt22utjEqh6h949LXOD+O29yIueZ6ev7+qk/S
uzRS20kqByV+DvAPicfqOpU1VQ4uffwa3aednuN6tbWteizp92XivmDmdF/V
i1RWCrfTOeNVH6pr1IR3F/5W9QH6PUq4sfCj6vtY6rk4S+2PCx+nevvYvgbP
nbofffZTfXXqb7BxndalnuVWzaWqft+Req53qhqfrXfdU/VtKlunbr+d76m6
qLj9Y/XfQ/WtjKHK8So38C1UWlV9/xt1nSmqr1BZTeUqlSvjd38h9Zgwbm2q
fu7WqhfonM/VNlF4tt5nD+FS7/uEjj+Z+tiGOnYJa1D1Rio3CY9Xvb7KXcwZ
1Z1V388c0rFWeuYHIq6nY0enfv8f4pjr8snw0mtoQmk58ZCK/pJaXAusiRWp
j9HeouL5wdyYqXNuVv2qLlRP7fcxp/V7A50zX3UP1XPU5ynWWelvwbsw9mfp
fb9Qn0nqc01ca1/GufR0nBvt4tyeJfyw6kdSzw9kzMMRX5F5vg2oeqxp/0y/
j9X97k49l87Xvb5V2wrVd6Zu/1q/2+v3tqqP0zX2F75deIlwPZ1zK++h+szU
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
Fp6c2Vbg3Rmv4fj3Ko2ivERuwl0yV19P7YO/nDo2Q1wGXovf6MIFpXnQhbpX
S533Ruq53bPq8cEXXjPaMg8m9rXfSf3c83TuS6n5H/Q9OoLnXha/HbbCBaVl
yQz48sJ8LDZJp4rPhXeDX4Nnq6LXot7ED1+eWm4iMzuX1l3oNfTUB3FuwJmA
tyQ2VZpfuqmwvfZqfN8uFY8Dcv+U0voEHovjS2KfJbE/3NT8qCO6Rv2/NL7v
WaW5amwDno31dkaUZcg0bIMbSuv861VXdd+8Yh4c3QhHj+3VtGKOZWxiviVU
rCvxZcGfxG/auGI9NCRy6XDqu+XWO+gf+FN4pzMy62T4HXirPPJ5nDNYfW5M
zK/lpcf1LdUvZ+aQF6t9s9z69yxstsy2xME6b+uq+dqNVXfV9d5Kfez2OMcY
x59SxzPQi2/qug0qtktvKa1HWFPDq547w6ou4MNUN6x4bvG7UWnb+Q3VW1ds
E/9/jo+Ka/w9/Fb1fVjj37dqLhPZiO4mDgF/ukvV/PZD+Eu54w1P5o41EHf4
OXEcCrvro9w+3xVqe1rvvYn6bKxysX5/BG+gY89EH/FcZJT6dNJ566aOc+DD
Xaj60cx+7TnCDzCG+AnoEMmBrmrvKzxb7esId0W+Zeb2kQMzhDcQ3lL4KOGO
fA/hQ4Q7CHfjW2TmddHx6Hf4xm1Vz1L7hKq5QTjCXnXmA+EFP1HZCT3DXMW/
FV5N9ef4n6iewv7olcLPZPahr2K9Z+aXWKesV+xe7NIPdHxYbh10E3o86jt0
4ii1n6r2OzLLPNYFcm+bwuO0WPXmKmcJP4YcyM3n36L++1U9z0fCz+XWZTcz
t4XnCd+ZOZ6IL7AMOYp8V/v9hTl6uPr7Csdw8RHez80rnE0f+EzWVsVyf43S
awF7mNhfa/V/WH1fKL1mWLNd9LuX+szUuWNyP/N9woOFjxa+VnhX4ZnCV2fm
9NpFmUl8gve6V/Ug9TkK/ak+21fNwaOL11fpie5T+x3ICuH6he0q7Kubcq8B
1kKJzo9yGHn8un4P1HM+Upgb6KP2ozPzBz1YU5m5li2ED8+8tgZF2c0YD486
Ag5ja/U5Rn1uzPxN96iaG2XN4mcOi/1XyZ+K77vKRiosj5fpWUbntnkf1zV+
Khx3IAZBzHpx6t/rVhyLIg51RtXfYVfVJ5e2g4jHcj7XYZ1iuz2X2n7DXiIe
+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
OYjIVOwTchbxWZgg+Br4EpsK/1SzH3GRnufPmjk0OJUPauZezlL7ezVzNQvg
omvmYc4U/qtm2+DSwjwPOu9F1cvUvjnzuXDeJJzzbYVzrNFBcEk/12zPX6z2
d2vmf5BzrwivK3yq2j+rmQs6Dw6nZq7gHLj9muXkfOE3ap63p2P/1Mw/nyb8
ac3cxbnCbwlviC0j/FrNc3teYX4EnuTP3H4Qfg/xaHwT1vsTqn+vOT+NnIc/
4ndkfH6tmXNYofbfauYQfmhq+3l64lynF2rWoScJv1yzLD1F+MWaZezJ2BUq
TybO38DGYjyPq3q+MYbYGx2irbJJne0h7KJNhesVzpcj12J14V0S51r8UDPv
8Z3wSuHewt8Lf19z7IB5vqJmnuRb4b0K8/zknNRKx8eJk8O9E08nrj6wiD51
YZt4kfBTcCeF/Qhyn/Cz8D02qTrXAx8En2vXIvrRqscH5+cxVkdXnZN3jOpB
OnZX4tyVnQvbveSE9C3MST5fOKZObP1FeIjCcRNyY8ifI95B3KNLYW7q1sIc
FzFmco36Feb0yLfZXuXqxLku92aRi9O52xXmAMnDaVE4v5Hcj86FOa6bVXct
zO89oHrDmO9xBRxasAxlrrYNjoUw99oEy1Pmbetgncq6WDtYLjOH2wfrfmRF
q2A7jHXXItgOY91tFcy7PSTcR3hobv6wazCfwvtuEsy/8JxbBvNuDzKGwfLu
KfziYM7xSezhYP6Od9k6mNN8HF8gmH98QnjTYN7nFuGWwfYBa3+dYA4XuYeN
hD1GvJ18ePhncvbmR/8OP49YAzYB+XLwXc9H/U4cAe6KPGd4b3g6YlD4m/Ds
5GhtFPNwriwcQyEeRm7YusEcIrKrYzBfjHzeIObqLBLuEvNzLscvizlClwmv
F8xHI7s6BXOdyKIOwVwzsr1zMB+NrO4WzIUhx7oL75I7ztg82H5CtrC3hFzT
MVXvP4GLxm5qVpjv4hmaF+bTeLaWhWNzzB/46lnqO4FvXphn4zlfqtkmn1uY
IyVeQqwD7houiJy01oV5OMaHnFFyGpknPVXOS/zdtyjM2/PdexTm5/m+3Qvz
w3x3uHG4FPLZ2kZfrBu55YX5Z+YSXB++IXl6awbbHLOEGwT7EscJNw7W08i3
ItheOUG4UbDdgDxcK9hGQVbDo8JFkvPeJFh/877Ngu0VZPuzwX4U+qVpsF5H
ltYF6370RQi2RZDtebBPdbRwNdinOka4frA/cyzzoTAvzdxuGGzfzBbOgn2z
o5AhwT7bTOEy2A6bg5wMtp+OL7xHYK6ebTPy1wrnKpMDtkbhPGfy4sgZIH+A
2DM5D+y5In+1X247GL1PfJ9cAuLK5DxMiXp8Z5WDon4nJwR/m31b2AbsVbot
ONcXmwpuiRyDQ9Tnr9yxCmIWZ1adi04O0L25c9TJH2LvArlA5ASRwz6/6jjB
gqrjEHDlo6rOQeJ6F+pe06uODx1UNb9BHGiLOue3k290f+48HPKGe9aZn2mi
/v81NUcD10E+Kr7qgIrz9/D18PFYA/D85IzNqdrn3TbqiG6RNyDPk1g2sYzT
q+bSx8RnZt8Qfg95MXATcBTwS+xJgKsjr4lcWeyuVXxV1XYmeTesabg6YhRj
ox9BHjJ7JbDrjii9TwRf8+3SfAG8wWml+U38BvKd2BsCPz6v6v0gcFmTq47H
4auQC1CLPAZ8BnuR2C/B3qIedfatiZ0S6yTHiVwn8k3h7slPHhr5MXgy/Efk
zaPBsUVijiOq1g/EN4hlkC9L3iz5jfgX+Gjs2YJThltmLxecSRf9vlvXmVF6
39Jdwfm+cHfkUdOfvUvkP7NP557U57C3C51/b/AeIuzK+4LlFPJqL9XnlubW
yA0mzv5G9I+wN4i7XhHiu6vvophfSV4UuTrYu9i95OYtye3jsi+A/Dq42E9z
53edpHMvD87Hwy6+Jji/jrw7bAPyIskhez53Hhrz60r0Rp1jbeSPEOclhkv+
BlwnHB15y+RajI7ftH7k/eD/yGnEHrkKmVR1/jCxe3IU+RbEgclvxI76Ind+
C3Ef8i+IWbDfhOcmT4N4CnJkYmE7h1zQaYVz+8nJnFo4/588UnI7sHnI7ZxS
OPeevNCDC/sF5JdOLpx7T47opMI5+eSR8r7sVeqhZx5VeC8VubL7CN+dOFf2
yZp9OmT7UzX7ksjGPQrzk+S0H1I455P81bGF96GQs/pZ5j0CjPPehfeVkHM7
pvCeBfJO36mZ08Dmf7vmHBLymZcKt0mcq/xV9Avwm5oU3ktCnm2d8J6Jc30v
zLwvgzm2VuE9JuToLq85hwRfLy+8T4Rc4qzw3hDymb+oOReFHObnas69Ia8Y
HgQ+hPjJhzXnnJCTvCz6JuRgf1Rz/gm53I8Lr5VY930pvFHiXGXadYlV+dVL
as6ZIe96cdxrXC/6O5xLnjY5CcSliME+XbOfjn4hh4bnQe/sUHi/CbnlOwqf
nzjvl4eHf4aHZk8c+ZTk5C/NvEfjGd2rf+H9Kewv2K3wniP2IwwtvM+I3PjB
hfc6sR8B3hk7/ECN7YDcco9cA+KM6JPngzkf/HbsHHL94b3YR0B8YdOoIx4v
Y4wl5laTe0YeWCXKBGQDMQju86T6DNEzXJN4f8SAwr4GexyQS8TSyUt9qGb+
Ab38aM0+Pvr9sMJ7oMhnPrzwnilymA8tvB+K/OeHa+YQ0O/Px3nIt3isZg4B
2+CRmjkE7IeRhbl39nSw/w79uUXw/jh0Xc/gPTvoot7Be3aIM8DDP1Mz94L9
s6nKkYlzzhkT+GLiTuz7I9+XvQNbCs9NklUv1Kvwvj/2DjwSnO+CDiXetzLO
zweD96Jjp90evLccP/GO4L3r+IlPx1gOuvihYJuDHNQ7o8xi/1q/4DwDeI97
grkM9gXvEBz7x/+6IdgWIf7yWDCnht6/MVguk4+6XXAOBJzJuOC9XvjIY4L3
J+OTLg6eT+TvkROI7YoNu0/w/m180rHB+8HwW/8HKlXqYw==
           "]], 
          Polygon3DBox[CompressedData["
1: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
IYzKnx/3NlLX+0bn/0/j+2h8BjFqpZ8xz3qqjnXVWv9R4/uqP1Pjo7nf7c5K
18H+63ls1vh+iX30mNy2/KWxLWoH8+4rzP2JUYhVLovWOrgf/Ofl0doFGgj+
snbJ3AlOBbdiDbAWeH73Zt6faEBDNadJyc+MZ1edmE/jV8D5E2sk8Jtl0VoJ
Ggn+OcvsuzbqN94iXD/z+mCdEJ/h/34qOGbspf5NGv+jYBuKLYWf3CJ8q1rD
1PHL4DK/41+jOeuOOl6tYC47QOOz1S/q2CqN/aHnMSKxTcG2/FXh2IYYiViJ
9cxa3UdtQ/D/5f//rtZb/fuC+7+p7S+8pcJaAzESsdKfFbZVaBBoEcS/izW3
Njoc9kntWo2NxUbr+RUz+9fPdd0bNXYDz5jfK/yEcC3NeTAxp4XbNhB+Vfgb
YizhVcHv+k9iotRxBPHEKHyw+o9qzh7EcTrcRef+rPs7LDGngFtgbwbo3NZq
VdRfEXy/o9AMgv0z2sax6l+j+Y8SrwrPJf5N7fuWau5xPG84l46tUP9XtVvg
UCXbdnwGvqNGyb4Am4/tX6lzLiGWJb5X/3a1hQXrieiKH6n9zP2y3nXtLHX/
brUVcK6SuRM+Bl8zDx9U8G/mt7fT38eEf8n58G6pY8WVak1S899VBWuIaInN
1O4R3lH4QV2zUHJsQ0xGbAb5np845iH2aQFHS3wN+HMrtW+FHxBugy3T9ZsW
fM3mqWNmxnsHx29onuhNxTLrJf/o/ZyVOGYidrqMOAyuzHqHK+Q2DvtbLXrs
G81fhw9OzRdmp9Yb0CpiybEPMRSxVFZyLEWMQ6xTLvyfxDHS7Hyt8PzOU6uG
b5C/HpLY1j2l8cexWYk1GPjZJ8LN1L9WrY7wzqn749Qe0jUf1PhrBWtmXVNr
2uhL2Ish6j+IT0utmaCd/FphrgoHhYv+UmHuC4eFy/5U4ViEGIRY5HA0SvQQ
tbmpY7LdU8ccxGol9S/XteerlWM3iVXYzxq/Jlj7Zu1fr1YP7ark9U4MTSxN
jNgxNccidnxS8zcnXuON+S2avzwxh4fL7yk8SGNfBuv1w3XO6sRc7GbhHUqO
PYhJiE12LDk2IcYh1qkifEXiGIVYpW/0+ztR51+PvdT/vEHXP15tc7AtuVn9
Cdgs4T+JO9W/Uq2S+I0YWv2g/v06v27q34qmtrZozQntCX60Ve/6Pc0fpmd5
vfAl6r+vNrzMa/ifaB+Nr8aesD7QNOETr+v/3lVpH4mv3CXn11/rfbUnPtD/
Okrjm/CZ+DtiHI0X1Karf6laRep74t4mqR0THH88pvlH5DaS/T9HuG9uD66C
w6bWfJZmXn/Etv3z9cjvvTFxfoP3+4yucUNim/ep+t9WWDtGQx6pax2oa5xV
sI/F107I/Hx5ztjuC6Lje2IQYpFlcOLc/v1P/fnRsQcaEPF4/8zjVfEdwhdG
xyLEKMQqs6P1gyF5vHhOdP7giDyenBcd6xCTEJucT04jsaZEfH1etL5DzEDs
cG507EBOgfh6TrReMyyPZ2dFx7sD8vgVjgPXOSfx/sD+LVW/X26vWG8vwHd5
p6nzA+ipQwrWB+dmtj0v4LN17d3wYbr2yZpTR7id8I3CpwjXi+YQvJ+Bwdzi
6Tz+Q4uAr68jJ5LvzWvVOunY8qI5eRvNvThYv6mW+4v5ut6L6rfQb/glmovA
58h5YV9GqlWUmbOSB+hYaduKjW0dbUNZ+xcF21a4DvyXHBa5rIv4DYlzFOQq
bs/sGw5jv+ELU/veyZpzf+4j0Vj4TfjOb4NjR2LI0Zq7N5wfrqvjd2ruOO65
4BiDWONqta3B63/fzPvjhMR8ryw1P8C31lLrrv61lV7HrGfihQ5wDOGacCT0
UfXrl3l/sE+wIWhK2DhsC3z7PdZLwfHA9/qdw9XvojZX89pr/k1wJc3ZRfM7
8wyKjpnaCl8ZzK/Qu39kb6t9nXhPc79bo/l093yvLkwdi5C/uDA1Hik8MXF8
cp/mz0qs6aPtl5WsVz2dP9tt5eae5B7hH+QE0QzwR4PIT0bzcXJGDXIuTfxS
R+0R9dfq2Mmp47H9NPcD4m5sJf6K9xadayJniP70ProDtqng9/ukxhcn1ojR
iqvq/lrltoR3USzZn+BXyK0uTc3FGhasuddBA9P5n6HloRuUrO89m9v3zewD
3gXPB46cmc/D69EO0Oy5Dtf7i9yG8MWp92vrzPwLbadB7p/w2aNSczZ8OfeD
/s8zhh/uiB5TcM6Q3OGIfM+MSqwXkHMg94BG/Bm2pmTtA116Kf5IeB2+UXhJ
pTWRDxPfO1rJrhp/RfhrjV8sPD1a3ySnSG5xRrR+2TfXxyo1/ynhj4QvFK4j
vEb4E+GFwjsLPy38sfACfnt0bpecInrrwmh9kHwjeiz2Am5JTpnc8sxo/RTN
Hj1vSbQeS04UfXxRtH5IzhZ9e0F0fhMNCS1pcbTeSI4Y/bxUsn//UHg+7zs6
t0mOEr18fPTvR7u/VfjuSvtl/PM4Pftv9OM7aHyi5o/QWENd7zXhb4UvFW4k
/Lrwd8KXCZ8drReTs0Uv/Vfnn8la0PVXCtfT/Oc1/oXGF+PvhZ8T/lx4kfAz
ahNT6zeHcq2StXM0ebR5rsG18K8tdX8VJWv1aO5o7+TM0SnQK0j0/q3/f3rO
Nfht5IfRkKiJIF/ctOS1hO0lF0uOF/+VBdvTptGxBjEH+cH7hU9Tf4xaJ7hH
aj2HGO8uYqDMuf5ULYvO6WLr7gm+PnaDtX2M5i9KndP9MfE97qVzZ+b5XfKN
1dR/IZrrECOcLfxG9BhzyAV3zsz3sNnYbjRY4rtuwfETMdu81PyTWO7nYC6G
zcf24x+zgjn1vHz86ILjP/has8z5lok6tmfm+L9Lar6M9kJMTGyMvkIukxwL
/HF4cPxxSGYtgZqHg9UfqnZBwffMveNDJuV8j1wq/JjcBc/wfOHPyYlo7mTh
nsJ3C7+ufiv9nieF98s8lqhVj74efB/ej6/aP3OsxjW41uTM2vZqHZul/kq1
GmX2yWgt2BTWw165NomGiT7RI1i/Qc9cW7CPh2+PieYeHdVi5rXJeicmJDZc
oWOhzDnnOzPXsMD1sKk7ZI630LZOZ49Ga27kY+ek1uLwuS8Fa6b4YjRH6lvQ
ONA60HTJh+yUWutFE0cv2DM4PhkrPJS1WnC+/JzMtSvkd2N0/ECuiWOzM8cA
64NjLmIDninPFs3q/WgN/i/1rw/WN8kh41tnwacz81L4KT4WX9ssmnsSgx+T
OYYiHm2Rx1Zo/ugT3YPjJ2oWqF3gHS/OnJ+ZVnAOiHipeeZagVd0bCFaTeb/
j49HS4GzUDc0Nt8P5F+rUA8k/Lf666NzwUsS63XUV+xasOaP9n9C5lw+HBx/
tSqae2IwVmeuIaGWpKUOfSpbcYHwe0XHALx/8m2t1K8eXM+C/6+R+hrUCh2v
dnXB/G0P9W+NjlW25nyIehG4NJya3Ca8C/6FTyNfST4WbtI6vx+uRywLJx6f
uQbiEO49WM/7sdy+tWWwngi/IA/OM1ij+cdmfjfoJKwfcmaHa37H4Ph1qO7v
vYI1W+wROTb0zA7Beh7Ph3shJ8Lv21zu+oNWwfrib+WOj9sF64d/lDt+bh+s
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
H3S55Hk=
           "]], Polygon3DBox[CompressedData["
1:eJwt1wnYT1UaAPBbfP6fFp+Kj4pkTZZPIUJpIhKJKKkU2bOXbUJlX0Ila9OQ
omim1AzJKNQIlXWsLUSrSlK2aDO/t+t5vJ77/u57zj333vM/93ylO/Zt1efM
JElWiyzxY06SFDojSWoUTJLq4qqiSTKlcJIsY1XktcWT8kpirvp7s5PkV5Gn
roDo7nhjJkl2qZ+uZon+mrKT4hJ2Ur6YN9J2tLoO+lsi/6NIktyq5nWWZUAL
WEfxlDav8Cx1zeS5YoW2H6vbwIvJb9fnP9kYNWPFNcax+bRtUNeXrVZXnWc7
LiiK6reCmuf5CceNYxz6K69mL79B21Hazmb75G+L1o7bqhvl3FXy4zlpP7Xi
OYla2u7QX0vj/0ptG/Zy3Ks4JX9RnNK2sbyKtn0cj1MzXlyrbSG2Sn/V5AvV
lmEvsoaOK7LFzvXX9h+ioGu0Zq3inairqe5h/U2STxb12YPqvmczta/MarKM
uF++yb3t1N9UNbu0Hc32ZtJ50FN+tbrO2nSKe2BnqOvEl8dzYaNFPTVHvLer
tZ2hbTvn8qu5WO1W9lCMwzg/kH/In2BPqmut7iN5Ee0fZl+wdew+tiCePTsi
2htfnrYXqBsm/1zdWnUd1BRmg9ke9ja7i53HhsT7Yu+y9ux8NpR9xtbEfGVz
RHU2gjVkvxZKktdYEzY3k76XeD/LxS3sBTaUVZfn6m8E+4ZtYt3YtMLps4xn
+p5zheTbeG/Ha9l8dbfIt8c7Z+vYC6xFzB/9DWf72UbWlY0VWewmdgFbb3xl
9JnlGkf5MVFFuyy2Jjud4zHXC8Q4tH2IbWNL2D3yWaIse5DVYAf09yV7jo1n
TdlX8n3e5VmsG6vANqvby/KxDqwUe599xs5m3dllbAv7lP0e71YUY++wr9iF
6gaxWmwv+7vrVGZDWD12hM1mVdhQdg07ysq6l2z3e5z/LKq637+pK+94gLqr
1B1UV4Ofb569lJ0+n0u1269uvnyCumbqvpE/Lcqx/qwm+17bGawk68WqsC/Z
s6w+65Pr2cccFa+KG9mz6nqrqyzf4DqPuO7ITLpWbJRP5yXU9WSV2Rf6m8ku
Yb1Z1XjObL/nUooNY9ey/SzHfQxiu9kqdqd2xdko9h3bwu5no8QZ7C52Llur
7UiWxNrEznG4hn3AOrBlbCprIF8r7maL2SRWXz5c/CG/TZwV3wFth7GTMS8y
6TdhJRvBTsnbiLPZu2w9u09//2HTWMNYg8Qv8ptFAbZK3VB2Qt5E5Gcr2BD2
s7yxyMfeYiXc72P6+4l9wvrH+2ET2WG2mw2I58kmxRrB9rCB7EI2lh1k21mv
eEeiI1vOprMb5Jeqezx+Q2wvG8xKscnsKPuUDWI7xF/ZVraYtZM/In6V3yL8
S9425nWsnbolYDK7Tv6OuI29zEazWvL/itvZK2wMqx3fWdcdyD5hK1lbtlq0
YYvYWHa1fJPoxlaxZ1hT+VbRi61h81hz+bviDvYqG8fqyN8ULeLbw4axGvK3
REu2IJN+M+LbcZax9GXb2evsVrZG3MX+zSaya+WPit/kLTN/Trk/f+ej2ZmS
dkyarPNfMf2NZN+yzay7mnPjm8R2sWWsNdsoOrE32QzWSH62un5sB1vKWrJz
2ANsJ3uDtYo5H/cbz5cP91usq+YZVim+PerqOnfYWL71eyvNHmHXxXrADrLL
2Vh2Y+x72BWxh9HPDH6AlYvvp7qK8jExV9khdY8WTq87l1+hfri8jrYDHPcX
i5y7wzhKszmxbmSn9THeK+MbrGZWdvptLl84XWNirTnhWtfFt9ra84Pjqo4f
i9+SuuOue4Bdlp3um2L/9AM7yuqwmeye+Abo5xiry2axe1mGfccqZKd7mhtO
r53HWT32NGsfS4i6QyyPTWTN2TF1ufGdit9rkXRtrGR8Pzm+wvFkdS3UnVBX
XE2xWDuc+0t8o9Rlu98ejjerezX2B7F3YT3ZFvYaa6bNx7ydvcIEz2Z57HfU
5PHBzi+LNUZcxqqyQWyp/A1Rgf3mejc5fkl/L/sG9Iv9Kd8U1435pr6vdp1j
jXa+qGucI1rLS4r1sS5ruy32qPL/iRHOT8uk722L/HXtmznfgB/Tx1zWPvYm
8lJiPushvyjWolgDjen6+G55BiViTxRrB2vA8liZnHR/k1/bfKKa8S5lNzvf
qGC6J429aWW+JfYH4s64t+iLjZcfij2c8fVhu9WWdX4Pn6L9Hvnl6t6XfyDe
U9dR3TfGcKn8YW3rs6+9t8OsNpvO7o6/A9QN1X65/qrqq6x4QD6OF1DXTF2R
2FtrO55lWHNWNL6DbFL81mO87GK2jc3NSed239x0jsRcmRxrILtbXQl129U9
znLYPawk28Gey0nnU7/c9NnGM54gslkLdTjZpO4xVpDdenoPEvuXibF2xO+P
XcS2sq8N/iI2mNVm+2I/xIqzgaf3Fp+yz9l5sRdgeexD9gU7P+6DVWO72Cuu
0YjNZj1ZRfkTojBrzy5hO9UtYo3ZHNaLVZJPi/fJerBK7HN1P7pGNTYpvjXs
Z/Z8TjqfHshN51LMqanxe2NdT+/XYsxZXkLXeOdsIWuiZqF3V8Bvq6X3+E4s
2vIG4qTDKep+Y9fL4wW2dfwWmymtF3sNdidbwWaxuiw/68LeZwtY4/i+aZ/n
Gr1do1dcR36muvbqVmfSvxVPqXtK5LIurDzbY8z54m+NmKPsRXajmt89g+bs
NTaeXcmmxDrEOrNybLe283LS39SDnkvJ2BvEPkXbVmypui7m8L+M5UlehHVi
ZbX9RNtRvK3jefzK+Jsm/m4RN7uPkfKV/JeYb8Y3zvEP2u5Q35vNVPeRvj9i
650rKv8/psn4Vw==
           "]], 
          Polygon3DBox[{{3870, 3869, 5411, 2222, 2223, 5412}}]}],
        Lighting->{{"Ambient", 
           RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
          "Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 0, 2}]}}]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJxFnHXcFcX3xx/vLuruPuqzo/e5IgbYhd0tdoKI3UUJiAEqEoqggCCKhGAg
KAomdoDdoGBhYYEoIiY2In4/bz/ze/3+mNf57NzZ2dnZiXM+58xtceZ5bbtV
6urqJjepq0skR1Xr6r4q6upG1OrqKmld3XZKPfTDW8rbXvhxyR1T44uUf0PV
eUNVvknQfcp/WvJl5S1XxbdIrqvrK1S2neRsXZ8vvIbkbbp+V2XeLOvqVtR9
Oyj11G+fJ35uW8lacN61ksslt1R+18Tld1I6WngryUdVzxaqZ46uW+r6EMl/
I+4muXp8Ls9PUr8D7V+a19UdJXm38m9W3rZKb6uubSSPUpqk326S3FqpS+I2
tBGeIPmw5JFKNwo/pnRExOMi3kNyVuEyb0o+KHmM0rXKf41+kWyor6u7UHkH
Ka3Du6g96/H++n194QbhVVVmiOQBqe95PXE9W/Kb5LG8j/Bqkscp7Sf8tu5/
Se9xquR7sc1Tdb1MuLXw+cJP0H+xH56WbKc0OHGZE4RPkfxb6XjhWxO3sV1s
55qSJyqdJnw/z0zd1lf0vNUkNyr8XeizffTtpifuQ9p0nd7rGcmvMvW3xk1X
XT+ub7e1cEfhR4W3Eu4g/IjwJyr3gMqvq36Ypnr6qJ5DJT+T/FRpgepfQ7K3
0gsqV01d5kXhlqqnvep5WPVsI9xF+DHh7YS7CT8hvIvwxcJPC28ofILw3cLr
Cx8nPFl4S+FzhB8q/b0uUnpQbdhR+Rcp/ynlbyF8tvCDwtsLnyf8pPBOwj2E
pwk/lbidHSWHBY+zoZKfZv4+k+L36qX8syRH67djJU+V3FN5eytdrusVYj6/
3628fZSW6P4XJPdSOl6/Xaffdhb+SM99QfX+rN8z9eHJyjuJ9ut6XuJ5xBz7
rbGu7jm180zN6WdUfj4Lg8qPUD3TdD1M77G6yg5J/T3WUr0TJQv9fkrqeqkz
l9ydsa46FyTGl/K+qvdS1XOt6rle98yruG0XJ24n85B7d4vlN5e8LPUzW+ie
Y9W2u1R+A8mStUB1HabfDuZ5un5Osrnae1vN+HDlPaHnPCb8vNJbet769cY/
6d4P9L6Xqq7TVe5D4V7CL+q3Z5UuUbpX954jOVvpTpV5U3KW0nmJyzAex/Ms
fbsbVPcGur6XecvYY72RfDL13F2r3vO1meSdes4Vyq/Wez49FefUHNVzl+rZ
SPnL9J4Hse6qDVfn7m/mAeWZq/frt9v0jMC9Kt8v9Xzoq7S2rqenftZ7eq/z
df/B6vvRSt/rnklq80767QLV0ajrx1V2fup+aq70ZerfvgnGH6otO6v8vNTl
p0l+rNQysZyrNDzxs99VekVtfSj+Rv7Xqudz5b0h+bHac7nac3jVdS+Iz6K9
b8Xyn8R5/XjF8rOIp8dn8fwvg8vNl7yGeazfv1D/jFfeFyRd71hvvIPkR5Kf
892Vf3vEE5Ve1/uszVhj3hUew0HlDyn8zRuFX1Ley0oTKh4fL0V8k95hW/0+
Uf15sMq+mnpdezu4/N/qty9VT1fhrfgWyn9F+B3Jauz3lsrfpN7718aSg1mf
hD/Tu2zIWBF+T/gRld9C5XPJMaXH0tVVj//DlUbpekzia+YCc+KwmP+G7jlU
eFfJRxPj3SQHx7lM25Fcb6y6bw2un+dspnveVv7Wass4PW8NyVv1vuNyv8uW
ut40tp/3mJ15TVii32fqWx8uubfu+0D5U5S/fb377VnhnVX/+3rWa6pnjuSh
etZdeu47heci9VAf33x6HBtr1ntONZXcuvBeenThMcb4XBi8Pr+Rer+izEzJ
Ler9rcnbXDgId9e9mwn/o3YcJvxBcJto20fCDYV1jW1U5kNdz1L+a/r9mwat
S8J3Cn8cvCZQnm/Gt/tdbW+uPjomd5kNhI8XnlJ6v+6hdEPi8cYcf1fyGJV5
XGUWqszZwh8L/yZ8lvBHwr8Kz1W59swrdBXlN5dsruf+o7zTVedD6FvKX03t
nan8j/T7ObwXUvlfqZ7fVU931jClVfXbmcqfrfxflH+88NPC3wofJzxdeJHw
scJPCH8jvLDwWlXTMzopfyVdX6HveYbwLJVZojKbB+sRn0hOCV6rJksuKPzM
qZI3qvwyyenBbeka28N7nBbfZbTKPKI6F6jOz1T2Dv3eQXKk8m9V/lvKv73m
MbpZ8NrFeo3+NlD5Vyp/oe65Xb89p7xdVP5T5Z2lMqXkIJUZWbj/BghfKHyN
3mVCHN98a/aSFvXeT9Anz4x73PuFdcA5hZ/ZPj63GW2quE949imxPPvEevXe
N3i/U+M7zo5tZg1cGOvvFvXMM1LrBKN07y1qz2zVfaXw+XrmmXqnk4SfV/73
yj9Z+AXhH4S/1bwbK3yM2nBZ8P7ZjLlaenwOE+6v/PUkr5Tch3lYcX+er3o2
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
jiysG8IDzFP+/wAH1man
           "]], Polygon3DBox[CompressedData["
1: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
WK9KPUF/X3JbOdDH6/BDcht3Gu/UqYkx1nqdbcc6Oad6n1yvuaj5u7Ujaq4n
1ZkDnQs/70SzO64Ot2e8cHydmES+Q+7TWMWY4PtOfLq+Xc5U7vTLTjRic9iO
31+V3NbYRu70G+MPj2F7aFDyhSPrxBDGVuZAxhbyR+q3NWOcVSemeQv7LnVi
HWMWucqd6sQyKzep17m2Sj2OfIv1Xa9X0S/099a7XFelnmWTMl9+wLav94pt
Vec3YyDa+9TRNh4u9gPMzQYl3/Mb3aGOVr5jub9DquS7L/kOVnkGPotXO9HQ
9qsT611exve+ef/eY9vD51entufSMj84Jzg3mG/dWOV+fdVJfGecJ58h/yZH
+WidOMp4yhqq08r1+9vkE+QVpmvDh8iLqC+aE+n/r6qTK8m1ynU6nlyzc4hz
yfxsD9bJyeX35PnM1c3h5V7VPcztzbmNHR+ok4tvNJBakofr6LHWhahF/Fbe
txPqcCPeM++d79svnczpzu2fg2/oRBNWG56nDXdqzmruakytP9AvGGvPAj6h
kxzWXNb77bOUj5aXXofreY721nXqAcwJngdfXiVX8Pk6/xrjyl35fP125FDX
L/O3z8Z8wrxirfK9qLmoL/lO+247h6jfL1undkAO9GDfnTpzsTnNQF/iCeur
Lqqin8rXyOWYE5kbybnLj5pjmWtN3ESPGlqlHlANVS1VHzxRX+IX9aljq9Rn
mkOau21cJbf8uj+529pV6kmdf9RLd6lSH2mOZ+64U5Xcz/nO+slNqtQvOh9Z
r7hOlfpDuSy1I++B92Jajh/cTY5nrqcGqhaqT7a+88Am+uZrVeovNmtSL/dw
lfq+mZrUB5xepT6hbZLrHlSl/mv0JrnkwVX0duM/61EPqaL3mvOaCx9YJRdW
/9Z36yMn4P6M2ESv37lK/an6q9zVjXXqTb+rUsvQ3009i/mE9Qz7VNFbFxtI
/Yk5sLnwP/3JlbeuUk+rvzSX3qZKPaecn+/3iXXq2XZvop8/X6X+cc8mevkL
Veof5TfVW5+uUj8nxyHX8XiVejZrBKwVMJ/8g/ZGbLt2whc5ZzZ1tB/5v8v9
ppvo669W0Xen7Yv2LN8xc19yP3NDc8Ql69x/6w1Oq6Jvrsu+bTuZc5yf92pS
b/BilXrKHZrUb1jH8Qf9t2hSz/lIlXquGZvUK5xaRT+doUl9wilV9NmNB6Jn
qmtab2luam3dL8XfOG84f2xT4rV1m9SP3VGl/nPrJvWej1Wpp9sbPI7zb5X6
z62a1H8+WqXebP0m9Xd3VqnnNP61XvCuKvWPzgnODc735q7WPGxfR8/sL/zr
FXVyeHP5oW20AO+fubZ8olz8yWxztpkP5SJf6CSf3rCNb3C+kxtV07OuxRjN
/F4N0rjD+ENtUg7xljK+XMCuZQ7VX8v1f1Did+s3zV9vbhMLO3/KjU7aph7G
88lFqzGp+8qRqz2pQajV6yP1lXLs1h6qUci9y7Gr/ftO+m6qacglGnMZe6lJ
qG2reahVyC+qRRvzHTAQTdc6JTn2KQtfo5anJnpWG07T2NgY+Zg2mpe1qdaY
qoXtXs5nTZbaqByrvveibuqR1JStBbBGRK15kTb1f3I61ovLX6rT+IyObaNh
mweYD6hty5nKnQ4vfNVSbb4nNeIL2+TAFxc+ztxYzsBaBWsY5BLM+a1VsIZB
LsA5zFplNQznNjlmuWZjoF3baBrWSqrpqHWosVu7bo6o9m699t6dcCAP0h6r
ST3fI93wj/Kh1nI5Jx04EA3+hXI9avNyunK767GNDK7YpuTYsbrhy9UjvXfm
POY+8qV7deLT9e3y47t3EkPIzSzUph5ADlK+U77LWn9jFmO/ucr5vR7nyhXa
1A6pEcj/y4nJjakxuz7gobrEEmxX036OYx/upobcGns5WLlZOW65WTlV56sz
q3CtasZHlblcLVl/an50cMlv5DgPKL5Q7lOfZq26Mba+zjnftQf6NH2BOZO5
kzXWR3COcfpSe2jMoT72LvYnuuEoXEMhT2HbfVP0haN8pxtOX+7S6/b6rQGy
nlNu3HdJDkIuwvzR2jZr5K2Vn53tw25q3KxvdQ72W/ebH70v8b31Zot1o195
fWp3fh9+J/oka4GGlftvzPB9Fc3HWEKfZh5tPq2v02daq6bP15fK971Q4h25
vZXaxL/GRMZGA2zLd8Jput5BPUYtXQ3+qDZrCoyfjanWbhOPyyWqQVk/sGQb
vsWY3djdeiH9lzmnuaccvVy9Gv5abfQd31Vz6L3b1MzZX85VPlG9Sy1LzUnt
yRzQtRfmZOaG+mDXthij6JuNCawFkyMyVjCGsJbcGMDYwhjItTXWeBkbGdNY
62zOZawjX7pdnTnbuduaBGsTJqxTu2BMdHE5v7GSPt9abHNmYwH1A79d3/Hn
2+SgT5brMTc1h7Y2WY7L3Nqc11pkOTJz4W3qPAufibnJW034A2PPg4pvMre4
aVDqbdRm1B7lOMwXNm7j3/Xz5kfHDCTfWq/kT/4m/a1+199qPY+5iByeXJ71
w8PL+X03dmwTazhHOleq7ZgryslZH6P2Y+5nzGDsIOfn2g85MrnARdvkPtYE
Wc/nGh3X6si5LtqEE3PtiRyaXNmyTWrt/MblQuTQXMsgZyu3Zrxm7bE1nff2
hpNzrYIxtbG1a5ZcuySHu3iT+ma5ct9J381d67ybYrlBfbr1AWqs+vpD2mit
3jP1V3k6+TpzQPVs12cYr1vP4vxhPbSxo9+f/I/1OdZCyKmPVyeHNZe9ouQD
xhp+O35D5qKHDCTe02fqO6evUx/yX/0W+w4dSHyjD9eX79GmtmLv8v1Z42it
oxzjwk00ELWQvcr3ZY2WtVry7+ab/j61Zb/x/fStdWpF5AyM4cXG83L61o/o
o/XVaujTtqmxdj6YpE79hxqhWqH3cIw2+b+5pz5F//dsk3zaXFQ+QH8gX2iM
ZH55Sl18ZSexrZy7a5PkOOXirWm21tSa09mb5AjWxhqzGrvKKbn2Qg5FrklO
3LVwcjxy5XIoN5T5we9bDsa1KXJCcjNyQHcWfyE3JAf2YJlf5cbkwJxvTy7f
txyXawPUAOS+5MCsVVdjkBuTo7mxzAdyN3JGdxT/43whZ2Ttu5yZXJIckWtR
5ODkjuSgrTU0pzO3kwO3dl6OWm5czuiJMp/r3+S8rWU3h5ILlxO3tv/KMv99
6PvfjR6ofmh9lvmRHOcU4FvbcK2uGVRPlKO3lllOXe5eTsu1J3J+cl36Pf2f
Y7qm7W/2nd9JjmR9tRyba5HkDOXe1Het+7HmYM82HLRrd1wDIzctB+1aGmNy
Y3M1GNciyWGrzSzXhh/SJ1hven2bWgw5TbnN19topcYsxlMHtsmF9EnW61rj
a62vmsSCTTj3v6vUPMjFy7m5FkzOUC5u8Tbc1385ShvO3bWB1qDIxcvxu1ZL
Tl7uXw3AtV5y+GoDcp6u5ZDTlAuVg3dtmJy+3Lw1BXLBcuBy4XL4rk0zJ5bb
VwNwLZVrqtQG1JxGqRLzq0UZ8xv7y2nJbakRuPbPmhm1g5/qjG18bJz8YeH/
HcOxPm2jrc5R1huqqS1Y4nu1tve55nU6qWkcqY1GL3cvB209sZqbtclytGpx
amzWsqoRqL2dx3ZbJzWNxu+uebu1N2s+XAs3uM7ano/KNVhzYO3B8Z2sv7LG
/evyfS/WRAMcVvy12qCaljVM1jSrdamZWQvvHKmWZo7tWkNzUnNvc76Ryv0y
F7Tm4b/ah07Ws6lBGeO5htW1FebAw8v35PzimrELerOmzLVk5uhjlffB/EgO
59tSD6D/MQd1LaJzurmpmpbalmtoXAtizu/aR3NUuQBzatcqmtOaa1sz/XJv
aqKtpXYNgPOdaziWaKJJqU3p/11L4pqlR3pTc+1apsnb1NK6BmXHJvmgtajm
7Obuao4z16mZVYscreSDk5b8zhzbtZZyqubeao6uNVKTVIu0htk6Rjm5edvU
b1pLZU3WE200Imv75XzUjtSQXAsgJ6G2dGqT2jtrzKxtk5P9s/h332c5/5lL
fqoW4JoJ69TU8Gdvo3G69kfNVO1TTuz1Mt/JlckB/1HiAblh77n3Xk1vtDac
wehlvpFLUBN1bZucvVqp9S7b1vHX1nOp4Z5a4kO1XTVQ1y7K+auNyiGMXL5P
5y81frUIc1L9oZqva/Hk8NWC1YitxVdjUzuWo3BtnByF3IVrOFzLIYeySBNO
xbVyciByLa5hcC2DnMpCTTiY5QsnPEmbNQFqWNa8zNJkTeDkdeYT1wqqKbtW
Q05HrVlOxtp5OUa5Gut9rRV2zatrX+Vw5WTUz1xrIyc1Rpm/5arkeD4s/kru
Rw7yjeKv9F9qiq41kQNTa5Qj/KWKv5E7VEN2bYmcmNqynLLcsnrmSW1iDOv2
rN8z9rBmQM7bGo2TB8IpTlb4CrlG18RbB26NyIxtcjZzN9cMu0bdehj1SXVK
a3ecj5wPzcnMzaxptLbRNbqur7UmyPUnU9WpFZKfVvuzpnLVwtH+UGXNldyt
nJs17a45k4uTc5d7N59zrY+axOSFb5F/8Rv2W7bm3Hxezd21q2pMavHW0+hn
9bfD22hmrmVUg1dLc0zHPrrEZyeBZ++kNtT6tqOa/B5jSvkfv9/569SAnlHe
D+vunTOmaMPxy/Vb03fsQL6/Weus6Rla5g9rF+TcZ23DcbrmzTlG7nOfJrVU
1vjL/1ivZB5tDv1qmznWuVbNv23DAcoF6j83Lu/zpHU4LOcrx5NL8hn4LKyH
Uhc2ZrmtzfOets4aAv9vhP8Diin2Rg==
           "]], Polygon3DBox[CompressedData["

1:eJwt13m8VtMex/HdYDhPSc+hEzckFEKhgXu50qTQoEhmMqWUCk2mjjRp0C3N
kwoNGlGhSHMhjVSK3NI8CiXEy/v32v74vs7+fvZ3/dZe69l7rXXKPNym8VMF
kyRZRSdRr9wkubBwkuRlkuSiIq75WiWS5BH+w5wkeVX4aPEkGYnXlLsQv1zu
Sv5wNkkW86fTr3KP8cPxGnJLZUZTJ/4W9Z6RWaHecLmT5L6jd7Bj2EasAf9/
mob9hm3GGvE3a/s0thwbhhXGGmODsf3YcqwCdgc2FDuIfYZdiR2khdhpdBR7
hK8p9zD/gdwcKl8ySfbhn2A5dFiuGf8jLeGL03Hscb6Otk/yC7QbiP1lXsYa
X2PjXWOsH9DrMjXoXrmZcl3lDspVx+7BZmAvY4ewvWp+jJ1Kh7CH+EfklvLn
Bi+UJE9gr+qjrD5mqP8nXpC/Sa6l60/VG6DtCfXqYu2wZdhSqmxsA7H3tHuX
xsmdrV5/bAD/Pyqoj7bYIVqkbbH4TeQe5W+kanSn/Bt4HfW+56fGnKj/jdxt
fK8Ys1o1qYZ6Y7Bu2BV8BSqP9cK6Y1X5a+jf2GDsRWNp4Pq4mpPjmWRW4aP4
wfxC9+rLTKf6rs8omiRn0gi5HXKz5H6R2+lZmsYz47djb3i+sbQyL0m24JOw
J+UmqVFLrW+xydi/sA3a1udf0fZi/hIqJfdcjJ2+d7+APgvScJlZ2ndx/6jc
MZrNz6GJchv0eTzeBf5l2VNcb6IH/H6l1OqJXc9/TnWxodgDsneqVw9rRQ/y
feKbcf0sLXDvOrkVNCK+P8/xpbab5C4NyVTE1mHf8hvlJsiVwOZgK7HV2Gjs
Z9lu2Mx4h7DadLe+xrt3i9+3L77QOMbFuKgf/5nMSPcn8edqm49tp0lyG423
kn5+iHq56fv0qWxr2VfVrRXfHN3lehx+sz7ucf2m69+13aLGLe5vp3exP3PS
+Y55f1BuLpYbWew+bAA2Re0/sEb6aqjPPfiHfGHaK3cvv41m8ifU24o14R/S
dh52Bv2BPRBzj33EZ2Pdwe7HttKUWNO03YQ15J/TT9bYv8SOxPsfax82Fitk
/Od4pq5q3U8z3D851idtG8sNjjl1/7wi6e9cgG9N+TGf1ARL+N2yH2hXiPZo
e0+sD/gJmam0SF+r+fND/GlF07V2BN9Dv9diTeN3U2+ItjWoOjV1b6yadc39
AetE29gA5ApQF/cqy1SideosU2+9v1X5KtTE/eHa3qRtuX9+37P4ctpezN/u
/hD+gHlZoW5FbXbRnFinaDd2N3+f3HT+JNqH3R71tS+tXkWssnpV+Z34bL4A
7ZK7i99Ab/NH9LEaq8cvo2HYDuxj7Gp+aaxt2BZsGlaWf58ex97BXsJ+M/5p
2P3YMKwDdgR7D3ss3nHsRew4Nht7ApuO5WN/YLOw5thUrAv2OzY93iNsBNYR
+wmbGmPGhmDtsR+xN7HbsOHYE9gObEa859gorBP2M/YW1ggbibXAdmIT4rfA
3sRaYXuwQeb0O/OWpTbmsXqsQbFmyb0t11pur9zMePexMVhn7BfsJ2wVVire
VW2f5ZupNz+TngXiTNBTvc7YXr42XSs3SK4jtpuvSVWxgdl0D469eFDswZ5n
iMxztD/2Dfqv3PBY77FDsdbQjdgo7AXsYKwNVA0b+c86fgc/3jOPo9Lev3fx
R7EJ/Av6+tU4fsZWY+fQKdq255/X9kC873QDNgJ7CTvM30rVsdGxJ8S3wU9U
Lw5F+9QbZ8xrY72mT+TG8+/EGik3JSf9duIbuo7/D1WKPUvue9efxNzEX7n+
chl+HrXH5mH9sFPjm6YO2MfYa1gOP54aYkOx5tgPcbbA6mOvY49h24qne0js
JRv1ezLlG9cizzgGS6wH87CB/Fy5Z7Wdq21fbU/hv8BPl2ks08czV+CP4pvl
LonfHXuF/4W+4S+OPQTrGusrPcXPUq+negX5j6gNNhvrhRWKPUrNjD5K4H9h
n/FH8C9jr43vX71n+AXxm/BLtB0qV5wfRw1i38cex7Yb7+TYO+JsgLXB9mNz
sFbYe1j3WMv4FuZhLVaeztJHB2xhnEP4z+VGyZWIM06cQ7AvsNFYXqy51Bp7
H+sRez0/P95LbBE2GCvGfxrvL7YYG4Kdzt+QTffT383pbzTMcyzGesitlBsj
V5Kvh3fJpOeyOJ9tdi5pia3DLqOzPXOn2KNjH1WvAna1epX59dl07zyYl+7X
sW+/pm1v98+kdtrWlBtA12o7F+sce7fMV9l0bz+kbR3XdWOdz6b7wYG8dG+O
PXptNj3j7c9L94zYO5Zn07V/X166P8Q+kdVHMbXXG8MEY8vlv8bfkvsRW4Xd
yveOc3vMSSY935WQq4214OfLDfKc87F6uen5poNse+or8ygtkzuPctxrnk3P
tm0z6Zk9zu5f5aVzmo99HZ6ut0Y0xF7BNvGTPcsZ2rbNTb/lPVifWCv5RnL9
5LZjH8ldEGsz1hfbhn2IlcGWxFxjm7Gp2EV8Me2LqLMOezveA/5WbZ+XW4ON
x4pm0/81mmXS9SvWsdWeuT72ciY9J8Z5MSt3LzYxvhfsVPPSUb2HqZ0+duek
57Fm/GRq6/6uOO/SYO0aUNdMeg6L81iuek9i67HL45sz7s6xf1JjfrRcS7ld
vqNrsuk58mrf61U0UruNcd7Dtsodi/NYrCP49lhL6Ur1+sVagG2Kd5QuwPJj
TYszeazrwbH+sfZhP8S6Tldhr8W3Fv2EpzJYF6wTtoevRddgr8fei63hL6WS
WEfsGWxb7CdUEesbawG2IZ6Nzsdeij0aW8mXpVysXZwDsBWRoSJYS6xd7KHR
Z6yBWI9Y07AtfBUqh3WPdwj7Nva7WBexbtgx2slXjn6wAXwl83eV32ZFkfQ7
ju95N1Uxv5WLpmfbXfwF8X+3zLQi6V4b/4dX00c9tQaa+6flTo73AFuQSc9c
cfYqjV1Bl2m3jGppO4p/Wm5r7NExX3I9PcsafEmcGdX7CT8RZxy55a5LU0au
BVZY7q9M+v9l/J/Zm/8bsNpDIw==
           "]], 
          Polygon3DBox[{{4667, 2877, 2618, 2619, 2878, 4668}, {4821, 3108, 
           2516, 2517, 3109, 4822}, {4560, 2718, 3057, 5527, 4415, 4416}}]}],
        Lighting->{{"Ambient", 
           RGBColor[
           0.19699838300000003`, 0.252204821, 0.33320940200000004`]}, {
          "Directional", 
           RGBColor[
           0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
           
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[
           0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
           
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[
           0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
           
           ImageScaled[{2, 0, 2}]}}]}, 
      {RGBColor[0.560181, 0.691569, 0.194885], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJw1m3fgV9Mbx7+N7/0Y91x87/12b7Yie5VVSQuJrMwUyiiJMpJN9pa9JVsa
KpSMIskWInuPyIqsRH7vl/f5/XE+z/M599xzzz33nGe8n+esc9iw3kOb1tXV
HV1fV9dMdFmin1pd3af6f7r4BaKrFHV1W6luU5WX9P8X1V+ucqbqr8jq6p4T
f7DojqJNVF6jTWNd3b6iO6nNd6q7SmWu/rdWH81VftX/7ip/qe5VlSPEt1Yf
A6q6uhG6Z6j+Hy16fairm63ri1OP7R+VOfq/j+hvouuozRfiL4319+V1dY+K
/qjnP657v2P8mdsXooer/+tU/yxjVJ8n6P7hunai6HbBY1pB7R4X7SN6mNr3
1rX99H8f0W9Fr1R5Rff/pWfsojbD1Kaj7v1TdT30v5eufyn+RZXLxL8guqXK
xhrbxqKvqJ8D1P588Q9rDLPE/8w76d6muva8+DNEfwt+zq2iX9S7fguVzfV/
Pc3hGNqLztYzvmYuxC8Wv534q3Qt0/8rRQ9U+wtU94ietZHGsJH4x9V/F5WN
1f5Xvcdy4t9V/Xmim6jNJuK/Vv22uv8Ctekq2l/lG9U/Gp//VeIx9VT9beJ3
Ff1L17aJc91efa0r/mf1c6n4UeJHiu4e67l+rp51h/pYmns+mduzVX+p/t+v
+mWiS1S3Q+Lx9de1ZuLbiP6q9/mtud5X9Fo9d5au/yx+D11bT206iJ6n+8eo
/m/RG3g33kX0Zv2fqvo68UGlQXxNddeon2fEL1I/e6l+fbXfXnRvlY3Edxb9
u9Hr+Rzxl+ie+9T+H9EDCq/n1qLXxblljieoz180zn3U5x/if1KbmaKprjVl
Dejek9W2VPlA/89J/I6v883UZgvx3US31z09xK+ouW3Soq7uB/EPqn6Z6jvE
+qzwemtWeA3xfZpAC6/HetG74v6l3Vjd+75o88z8ieI7iH9I7d4T/5zoNRrf
Q+L/Fd1fbc4TPyX1WuGbjBM9KXf9DM3NiNxre6b4k3OvvafFL9G9W8f99bfo
NYmfcWnqd1xO9XcknosPVX+02t8i+oKur6v1tpfql/AtVb9dXG9XqP9bkSF8
E/Gjxb8ufpT428XPZU2Jv038a+LP5xuzl8RfKP469qn4y3I/6xXxGwbvkTP0
3ItUf734l1R/ufibxb8s/gLx1zI28eM1ln01lh6SA2er/grVz1b9SPFXMofi
c/XZKH6g+txB7Y7X/zmqP0H0Tsas+jPV/lLxz6j+LPGXi39W/BniLxM/q9Gy
+drE8vkH/f9C9++v/q7R81fhmmhffY/VRHdR/Yaqa622jepjbfaM+LWQybr3
Y927r9p8L/4z8fuJb83eVpsRGk8n8bvoWan6ekD0fuSvri2vPm9CT/DNxO8t
ukz1l4h+JtpKZU3dc4j+ryX6rfp/R33tpf43CpaBZ6r/lXRtV7VZWXQrlTPF
by0aVHqKz0QHqcwVf5Totrq3m/jlxc8XX+jZN4ofhXwW3VP9bxOsq8bq/zni
J+lZn+hZ3XRtpP6/obHcq7l4RPWfi79b/BTxn4rfTv20Vv9/NHoODxJ/bOE9
z95frPpv1cdq4tdR/6cXlo1TVL+a6ldXP0P1rFVpI/5Y8X/q2n7id1bbJegL
dISeea/uG6DyOzIrsV7tovK77m0bdeHawbpthPjWuXXKP42WP7up7ni9096Z
23PfaXE8jOtX/f9W7aeJbplbb9yv+vt0fXfeUf+31v+1uVf9HS/+RPHHiT6R
eJ8u5Xm6v734TfScjYP1wll6rwbmX/yR4scm1l07azx7JNa3O4mviXaN+/ra
3Ov8TT3rHvEPi/9M/FfsC/SX6F2qn8z3Uv2dub/dx+J3VF+jdP0j9rjoTPS7
nnuH2kwU/6Hqbxc/Xvz74m8TP078e+JvFf+g+HfF3yJ+rPh3xN/INxA/X/x1
4u8SP0/8aPETxH8g/gbx94h/W/z14u8W/xZrOXU/X2oszSWHjxN/oK5frP95
4vohwXLpRbVdQfyK4g9ObR9gJ7ykuix3/X2MM7FMexM9pPddXtfHqH59fY8d
Vdddbb9j/Yofg63RoG8snTJabVbUep+ie1fiuzZYJ96h+mn6fyjfQ6WdnruC
6Pu6t3due+9L0c30fy3xJ2hsy4n/S/fuKP72xN99nq5tllm/oGf+VfkbeSv6
tMoi5JVoX13vpPI2OlXt/0Wm0V7j+Vt93qnxJHqXm1T3ZKn3VZtS475ZdB7v
rVKPnteYOuveCXwXXftedaeIdkF+qH6UxjZV/Vyous01T4ep/VDVT1X7carb
Un3eLzoRW0OlqUp/tTkWu0Vt5jNGlYSi+uaqv1v1ndX/nuKvVP8txa8q/hjs
Q+QR+kh1w8Sn6Gjxq+jZlei9undv9TNY7b8QXUklZa+pvoXGUku8/5dTfb3o
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
wtw8EOcBXP+1xPjskbr2SmIfHEymLTJFe/D1xHNK+15xrtrG/l+K/HYaXwfW
iMZ7auJvyXfEP3lZpV29MSvmCZulf6zHVrlM9+wsulNu+TSDfZTY5pzJe9Z7
PT4d12S92q2CTcLezO03PSnaDD9T/BOihcra4p8TbaqSYYeINlEJ4qfn9quQ
nZdpPMu011bAJlH9Pw3WudNyy9jtxXfIvZcnYRPLXpqiMZ+p+2aUxrQfVrt3
1WaFmnUKWMABmffA/uB4um8zXbs3M/Z4D9d07xNg+uJniv+y0WuMtQZ2QZ/z
keVq00t0N9XfG1zXVPesk9tWfDm33hsTZc7uunan+F6i/TLj231F180th1cu
vN5mJfYPkVfoS7DTOYnjVnwvvtGcyLMvn4/fFBz6mcS4/CGZ9w1xLu6bHdvf
GYzZLBUNuf3uZ0QbcvvOz/INc/vOs5i33D77DNE8N/Yym+8bcXvwe54LDv6V
9kia269/mrnK7fvPFF0nrm1szaUN9sEfzR3HQTe2qWxPY1d/mBsfBjsCQ2oX
vIYvjLh68yjzJwdjjHtklq3UI0MTcAyV9qzJmv/DL2i0PX6KntU2uO6C1N+a
dsSYWD/EpJC9yD/iVV/H/dKs5rrv6x2rQh49pXb96m2HsC5YH9g03Ef7dnFv
hpq/B3gBGDT4MzYWtha2HHKPMS+N6571f3uwLwImge24qNHY83CNf7joJ4lx
nr2D/Yjxepetg3HZi1PrzvcYk8qdGudA1X+qcd4tfhA6MLc++jCxvjguMw9e
dE1qPXxsZn3yQWyDnkVncw1ciP5p81Oj8e8TK8uHzxL7pYzxU5U+yNn4v0+U
G+izFontFewW8F4w5FZRJzOWj+Jzse+x8z/XmPcJ9n0mpsYRmXP2HngEWD+2
3DGJ9zz7fXLksUfrweairMYn4lu2KOxz/Si+KoyzoH/xwYhZgD2CQaKz2G/o
RDApMHUwqh7BmN4Y3bdzMHZ3R2q5ge+1q9qcqLZZ4hgGe/CWxLHY/VJjeg8F
4+HtscMq49RFlGu7BeMe96nui0b7ND3VZsXC8bfbVPde4bjYNPHT1ccf6v+c
zHJpdGL8Hd9zodrkMc5GPBSc/Tm1WVzvmNDF0V7Fbj0vs35sJrq87nlA7bbQ
c29GdyXenzOjPtiUOVabcdiLxC4y2xI3asyPFu7z29xyqGncF+wz9i17lrgh
feLvsCfZm2dltp2gIyrLQ+JJ2N7E1YmvEwc9IrUdd0Nw3b+xnrb8p/009XuO
6M+5bTH6RYZckNk3vCfitH8lboOs6BD1J1jkytimie1g7GHsYGz5HxPb8y8Q
P605XomfSZ/f6N7uqtux5rnoFHn8yWG6r2Ni3Lmb/ndQWT6Jccp640o3pbax
txM/X31OEj2nctuOsX2rwjjza6Jvs35U/47oRHBUXZ8kWot+Iv4i+q6j+IvU
9/a5ZcWL+B/q+4h6P+MD/e9Ssx3YLXgMjAVbjnrsoq41j5sxTM3sWzya2dbE
5rxdtElmfP0e9VEh/1TaJLbrse/3rzemDo+Mahnb0Cd6lD19H7hX4bF9klt3
I1/xHYdkxqvfY58G28HE15iblrGf2zLj2T8FP6eMzwXDwb85r/I36RS/0aPx
XVjH+P7oo0cy29fvJLa3N6r5WxOnJC7Au92SeexVfC62xEaxzX26tnnNc75F
zfPfPjcP7jKysg1Cmw5RX3ydWLdhz+Jj419jv2LTdY9+J3kq2B/gBt8kxiuu
iDwYAvF24hF8+21ie/QNfi15IdiyW2SOmxA3Wxptg7tET8+8X9jzp0aeOvxE
+r0qtc/L+ieeTkyWmAKxhY2jfkHPbFez/8mctsg8DnIu0Gnoti3yiB0k3lfY
zAsT2529g7GsCakxG+qxpckVWUn9jsqsF8nz6RL3AHvhVda1Slfxc8HXVdrW
zGPDnpDYjm3WQnak+jhL8/+yrm1S817YKOpKdGa92myr+uG5YzX0Qzzs/cI4
55v4EMEx+mc0zj6JY09gC1dHn4VxIjsYMzoG3wIfo3XUS//pqsSxYMZ8Seq9
y3Ov1v9VM8fayCMgZrR1zeNuG78jmFXHzHIOGYitAsaODQ/exRi21vjfLY3n
Et9HXrG+iNN+URqPIw/hgMoxTvKRngrGVU7TeN4pjQuTJzC/NBZMrP/V0jgy
GOYrpfFlcMWDiJ1njk3PLY3bglW2inKUeXitNHYMVvlS6RwjsMeXS+cAgfP3
JW6VOSfnrdI5FuQbfFUa5yU+u6A0Jk6s8+PSmDs5D5+WxiXJtfimNNZMbPT5
0muL+NpzpfUrGO9HpbF7cic+LI1Bk2vxQWkMmtyJ90vjzuRjfF4aAyVnYx+N
c6dg++Tr0pg+8dneyJdgW+uz0vgmeR2flMY9yd94obRNQ0zw7dKxWHIn5pXG
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
j8COOy6usR5RZoJ/cvYf2+pYzcn/ANhyrkE=
           "]], 
          Polygon3DBox[CompressedData["
1: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
+MHUr6ftQMZ/wvnuyP4voN+U4EXZfiJj/6QcQf1UxjxM+1/gzeizJ9u+lP9S
LnSNpBxKfV6vF+3fsr8D6H8d9ZlcD2l/nvaG9pfZ1yngfuo15UXwmVX42Tjg
s6ifVqXvQF849rU8f4tQv5Xt/2Z/Db+r+f8Y83tJf/l4p5P9f03/m9r1by36
f8357A2+EjyD/JT+k7qWsW0O6m/Tvin102hfmfb95OAt91+pjU8Wlj+3HPgb
tk/VyTNyts8LeBXXQ/DR4CGM/5r9HUt9L8Yf5DxG+5S0z0zfWTjed+ALaN+H
9m/A+7f8bUbwcVX4c0X/46vgQdTHopxA/Qv2MRnjxwafCD7MeYJ6b1843SHg
CWmfDDwreEX6XAAeqS9zzHmU0zvh3HLvO5uMdz97cvyHOZ+pehOfDQY/Ap4a
vCd4HPCj4GnkR+Ah4Kna/rey3wnB34MPa/nrbPJ/8OHgm8Gzg19t8r753h0M
vrzJ87QI43cDT90e7w7wRODjGbcqeOq+PG/ySvnlh8aY9Blg/JPgM6kvIX+j
/SjaPqBMwrbFfIapf0I5mLbh4Kn6ck+8NzNyvBkZ/wB9J27js1loe4JtfdQn
Yv/P9CY2WWpI5iznrgvBS4NXA69B//PBW4HPb/nWceDFwevQvk7Ld+a3L2Wt
Nj4bSn1S4yTwHODPGLMp27YB/+6cTX1y40jfN/DPtI/v+0/9bOpLsv+baF+Q
/7MQ5WbqN3L8kWlfnf+2DO1b0H8732e2LUD9N9pPo/4w7UNpnwk8k5j9TQIe
xf3R/zevF/UHaZ9Y/kv/hvYHwBOBdwTX4LvBg1u+U8APgScB7wweAG/EPh5h
X492ohes5z6pP0RZv4qeYNtjlE2pdylLU7/OOZJz2qBK34cpG1Z5B3wXbu8k
xhyP443r80HfcY33+N25kxjeWP4i50nnik7m8DdpL9Snpezqu1ZHb9if+u6M
v4Rr9C54N/Cu4Mfb63MA+xlfPgqeGXwgeALjw/b5Ud8YD3xfez7bgMcaknnF
+eUX9nmAc6W8jvoPncQ0+7Htp0622XYP48eh/1bUK8bfCx4ilwYPAt8PnrDl
a/3g0vKFIexrbPC5zH8/sv7OQ/vlrNeHuEZXeT6e579tRv3xTmLsxausua69
PhN714k5jD2McfesE5MYmxiDHFQnBpHrynkPrBPDGMsYQ+1c55ny2TKG2Qs8
K/hKzu0g8PJNYixjLWPAnerMec59xrCbOnfQ5wzO7znfvyaaj1xUTroC7fc1
WSvG9B5SH95kbXTNnI76hZQ3OrnH01OfhfGXlcR0tzThIHIRY4iF2N/TbJuV
/f0qh6V+aZO5xTlm1joak1qTGtRK4JVb/cE5y7lLjiJXMWZetw5H8Dnzebu5
yRzoXGhMv1UdziX3kqP90R+OJleTo/3eH44mVzMm+a0/nFXuKqf9qj+cVm4r
5/2yPxxWLisn/ak/nFhuLGf+rD+cWG4sZ/6iP5xV7ipH/bE/HFWuKkf9oT8c
V64rJ/6mP3O2c7dz+tZ1YlxjXWPgbevEwMbCzvHb1FnzXftd0zYDP9mEe6g5
qD3IkeWacs7v2P/tTdYuY3xjfTm4XFzO/nV/OLPcWY79fX9iCmMLY5Dz6nA+
uZ+ccb06nExuJufbAHwX/c+tsiaPy7Fu93o4J4FHBt85Tuakx8CdJhrDvuDp
2vM5k3Ir9SN4hj5sNZOjaJ++/T+f1uGOi1HeYvwrlKHUF6W81ESjkCOpgahd
3AzerpsYbPw6MdNFVWJGY6nrwBt0E7NV4A+NMbuJiU4Cv6aG1I3mcUidd37b
buYc54IbWw2k6U1seKkxnjps+zxc3caIxrjGtleCl27vxz+0XwZe0livvT9y
ZrmzHHt9+r9F2aQ3a/gbro1NtDo1wmddG2lfuzecVm6rhijPle9e0ESDU4uT
Q63UhHPKPeXMa8klfJ9K5uybmsQQ63czxxlbyOHkcnLwDeUK4Hmr6KUHNYnZ
luomBjGWMwa4Qk25L7HBt2oA3WgCw+tcE9+VH7u5VnL4p0v44VPt/5utL3PE
wnXm02tcN+RcgzOnOre6Br/ehNO8xPjeTrjOdR6T+jy0X9OEc1/nmt4bLn4Q
+MJuOPiogxNjG2sbQ59bJ2Y2djYGP6dOzGzsbEx9dh0NVS1VjjSsiSYtb5Y/
39Pej2XUt9XUwWtS1qY+lLIkbc9TlpS/i2k7ton2LcdclLYtwdv/fzz4OcoS
/h/KEk3id7UiNSi1KDmz3Nl9HAeep+XTB1P2avUfuY0xjLHMnE24yfXgE9Tq
m8wVxixe/8MpZ9I2t3oTx36mDvf1/OZuEk+O1InGpNY0VxNtz3Peqsk98F4s
3D6vK7drss/wZ6yV79S5F3Ke5Wh/Gbws9fkpyzS5PmvQPiV4xSYatlr2Oj5/
TTwPvY91wRuBNwavWUXTV9tXI1IrUiM73fmyyVrjM+X7sj79x63CCeWGo1BO
of6+77/nTpm+LzHwI/5f+s9M/93kL0345dTUJ6D9/iZ8z9hxIvAD1Den/2vG
4u3/cw12LZ6G9oeb3M/Vwa/IYZ2/wMtRX4CybBN/49z/4zqau9r7yu16ua7l
/9erjr4qt5qE/T9I/dk69977t3gTzVDtUE1xJ+rzUXbvRON3PnDOdO405nuz
SQxiLKJnNE4dTim3lJPWdWIQYxFjhnHrcFS5qhy1vw5Hk6vJ4SapE8MYyxiz
DKnD2eRuelQT1eF4cj053cR1NBi1GDWOv/qjIaolqiFeUEeTU5tTs7uojgai
FqLG8md/NDK1MmMCYwM1SbVJNbCz6nBoubScbuw6mqTapJrfhc7frqlcmwHK
zFyPz9nnm7S9QRmziUaoVqhGdHEdjUityBj4kjoar1qvGu+odTRetV418VHq
aOJq42o6I9fxcPRy9Ji+5P141TWFYw+izNDEA1PLdz2Tfx3f5N0dw3tYxzPR
O9ET+mognpFxs/HzmU08I3UJ9YmzwTNSauoNZaYmMbuxuxq2/1fP4YoSzV8v
Qg9NL01PTr6n56X3pccm3/MYHmtR8BlNNCy1LD2fnjqaldqVGtdIdTw0vTQ9
tC8Gwqnl1mqiY9Xh8HJ5OXi3ToxjrON6PXodji5XNwYaow5Hl6vL4ccEj8Q5
nNxJTLpPE4/iqiqeit6FGtax3Whkaltq2se0WL6rB3Npy2/kj2r+w9v1Ur6s
Z3NJyz+3rOM5qtk7n+tF6gld2/Ix+baenzHlbJ14gXqmaipzdeKl6kFd0/Lx
Het4THpNelTD6ngyejN6UNvX8SOrTua/Vepoxie3fHnNOp7PGe39kh/rCa7D
8WbvxCvUPxyL+nq0r1pHwz+p5fur1/Hj+o0VwavV8Zz0nvRANqnjOek96Ult
XMdz03vTszuszvxnTGsM9vlA5k81HOf0XweyHquFydlebqLZqN2ov0xTRxNR
G3FN+mQgHu9yVeZE58Zh4KWrrFGuVWqwarFqvKfW0fTU9pyTvxmIZqd2p7/9
20DW/xurcEi55P7gi6twZrmz/EXNUo41yuC8Xx+UXJOP2uf37ZJ78EH7/r5X
ck29tq5H35dc378H8r5d5nzfDZ/dXg2giqezc7sefV2yJnxP/73BJ1VZc117
1eDU4ozBjMX2cH6tEt9+Vsfj0OvQ0zi2jmejd6OGfHQdjVsdSj3qtpZ/n17i
IUxRR08yd+BT5+8mepB+9eeUpgmfv5v+0zr/1LlH3qsvXR+aeARD23jH+EmP
d6P2ffd9lt8bdxt/39BE/9E7/pYyHnhm8ETG464XTTyWHdr5YMI6Hsmwdr52
vdBD0UvRk5mgTsw9Txt//dIfD2jLdn5w/TL+OE0Nz/WzTjyhbmcMdEcTPcZ8
hu89XhMPVc1rYfD8dTR4tXg9pWPqaPbLtvGR85se1lptPOn8pGf9YBvPH17H
M9A70DM4pY7Hoteip3ByHQ/rqTbeP6GOR/VkG+8fX8fj1uvW4z60jgf+UBvv
H1HHw9LL0uM6rs58pzc7F//vhSae9k1tPKm+oOc7oo2P96jjUetVqw8cUIfz
yR3kkFM38eTWbOPj0ep4Whu28/ugOp633ree9/51PHe9dz3x/ep4zuoP6hXq
F3rqeut60LvX8eT15vXs96mjAakFyWm+HQh/fKVEb1Y7lu+uQfsxnWjHzvfG
lh9QDmkSkxibfE37VU08YL1gPVa91uWNKTrxwPRv5VxyrQ064ZM3NlnL1CRH
UN+W8VOou7NtLsZuA76hJH9mlvZ9VPPSs+gZnHfSd/PXTuKp7+poE390ooc4
vz1Zkv+hFvwa7Terp3C/7mqiUauZztob7VpOLNdbvxP+e6Uc22el/X/qJ7P0
Rl+9rImme2o3OTvqJWpsal7G+3O313esKpxb7e0hz6E3OTDyUzmn10PPaP2W
n7rWmFOySpOYxthET3/bJp673rsxgLGAnNTz1ZPXjzaeWYa2u8CnN4khjCXU
DI2f5NRyaznpfG08INd/tz0/58sZq+QXGT/tIB8q0YvHlq80eVf1mJ5o8o77
rsvpDwUv1ST2UhNeu2k14xK9a9EmMZfno6a8asuv9dJ3BG/fJH7z2GrEasXG
ZP7/bSmbNeHYvi9rUlZv+fdq9H8RfK6xQROupia8eRtfqH3oQT4ql2syN07a
l/nV+V8NXr9npMHRlK/hfN/qjdZsTtWNJflg5lqZc6OmPX4nuThq1OZYfdcb
7VqN3hyxL3qj3aupm8PzQ2+0dnMu9q6SI2Euhhr6Vxz/7t7wZzX38avEfGrx
egR3lqwRrhVq+A+WzOnO7eqP5lS9Lj9roi8cVOWZHa2JfrBI62Ht3STH45lu
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
8Zyxk1q93speLV9QS/wvWXJ5ww==
           "]], Polygon3DBox[CompressedData["
1:eJwt13m4TuUaB+BlFvYme29jJZfOSaU6Q+dcNCAZ04DShAyVQuZSxkjphChD
I5V5zjZtU4VUIpSExCk5zaZNioznfq7lj9/le+7vedd6v7XXeteraofuLboV
TJLkMykin2YlyVUZSdKrVJJcDKqqV0s5dh87j5VS/yiN2XjWjt2tnpaTJBVY
a9ZGcssnyVZ+PSuZmSTXFk2SRtlJsoJlsNv0nC2cJAXVc+S4uo78yg6WTZJV
LEffvay4c5RUH5Db2UTWmd2vPiGd2DL2POuv/lAuYh1YGZalni9n1E3lkHP8
5hx5rKi+uuxPdor9xJqwl1l7Y+9R/0XWmX9bv2OR7773W2uyGawF28h+YrtY
XZ9HG9vc2GbqifykuoE0lJmuy7o4pr5O6gr6Kqo/kb+yzqwiqxTXRB5meew5
1lf9vmSze1gxVkL9pzzClrL/sH7q9VKD9WAXsSrqJVKE1WbH/d6Tfu8ClrDb
2WH2O/vdnC/yu6pIab+xqZ41Ul5fK30lHC9DfVaeYpvZ22yMeoNcyXqyKuxi
9cdyCXuElWcV1LkxXn2r5DvvUed923nP09eINZY5rtUsdinron5U8thJY7uz
99UvOt7T6n1yK3uDPcJaq/fLbWwC68TaqH+T+9gs9iTrrF4shdn17Ji5nDCX
Y6wDW8CG6Outnhf3m/om2a8vP64Va61vDuun71H1r3ILe509zFqpV0oma1Yq
fdgKqd+V0qwFK8AKq49KKzab9WVd1O9JGXYnK8iKqOfG3119o+wzl0PmcoY9
qW8de1XfcPUHcgFrxzLZ+eqvpQ4bxZqx29Wn5Qn2MXuFPa+eLcfUN8gvznHA
OQ6yZvreZF30tVWfkh5sFXuJDVXPlN/VteQnY/cZe9Lfsol76map6b6qr2et
XGhse32ljS2r3ii12Gp/6+t9vkH+kPYsV99gfb3UR+ReNpM9wTqpD8mdbDLr
wR5UL5dS7BZ2xlwKqPOlJZvCeup7SL1UirF67IS+0+a8jBVn9dlJdoYtZAVY
c3aE/cHeiWuobiIH2RG20e/tp+8rNss5RujZLTeyca5B2WLu4ez0Hq/O+sc9
FM9/BfcTu5wNVF9u7AVxTVk11oddwsplpc9MiYx0zY21t5ixk1hJdr+6pL6z
5jKXXcEGsSvYhfH3ZZexAewyVjnWOdabbWGT2DNsKstiHVk2K35uva+YkT6T
8Wye77zTWSXWVV1JX6a+Kawse4hlsaKxbrLKrBurzEqzN1lB1pIVYsfN+RP2
GPuCTWbP6nuLFWJ3scLsmL4VrA1bzoazbrHmsF7sc/aZ1Da/j1g3tlE9Ud/g
uP/Yo2wDe4MNirWOdWafsNfYwHiOWBe2nr3OBsR7hnVln7IJ7KlYn9mD7AM2
hj3OlrG72SI2lHWM9YDdz1awEaxrrAesLVvJRrLu8eyzduxd9gLrwfLYHewd
NpB1iHuc3cMWs2fYw+fePafOraWxpp7yPK1nj+vbqp6ib1is2awP+5JNZc+x
zu7L6u7Rf8sgz2of9bf6xujL17da32R9e9hYdpitYVPYN+wldoitYpPYTjaC
/cJWsAmxDrGR7Fe2kk1kn7GBbBeby0azzWwA+zreCWwU28vGs9/YWjaNbWL9
2U42m73AtrNh8c5mi9krbAd7Pt7ZbBl7nX3FhrOf2XL2BvuOjWNH2AdsKtvF
XmD72LvsTfZf9iI7yA5IfffabjaK7Ve/p++tWIddw7VsMLsqnkF1lixjT7JL
Wba6nKxkfVl1Vl5dRT5mQ9jV8V5VT3COo+qactSaU5ItZXfpWxj3vPVlJ5vM
zmcPstP+lsvYataRfcjGOd4T5vc5G8R2s3nsRfYFe5rtYblsLNvGnmX/Y4vY
y+xL9gzbyxay8ewO5ynv/hke70zWQt1brjGHEexK3/VSbzV2qLHfsQX6xhm7
hQ1h37JvpJ5ruplfF/sD415zjGHGrtL3EFurZ6yxfbLSNTXW1vH6tsXfVM9B
+cHnH+M365se+x59z6m3GzuDvRbvGnYq9jfGZsoh42azLbG/UY+VAuVcW3Y2
1i51GcnXVyM73S/drb5LzrCzMT+fNzjPcf3X6DnNbmW3SDVWLdaceKbiuscz
Z+4P6B+qd4zj1WMz1MXV8yWf9Wcz2XnqedI3M7X4Lle9Ti53nMdjL6CvqPop
+SKeR3VjvSfiGrPt8fywpuwUmxXvW+Ouk5/dV/utsT/y1XrWyHX6a+j5gS2O
vUVmuj+OffLhrHS/FPumYTwv9vzZ6Tss3mXD2Ur1Jn3XGjtD/Xfz3MweY0/r
y2NLpYjrPCo7vXduULeU0eqjznuhz9Mz0rnXZXuMvSneR/wrc5nE9rIGrBf7
hk1jzWP/Z8yeuN/i+XSsFrHnYnvjnpYDOem+P/b/C2PPL4XN5cu4P3xfSl3C
8ao73nesPuvOdrEpbEF2+j6N9+pAvlC9JM6jbx4b4Lt2sRdlF/h+Kt/G6uhr
kJ3ujSrxinIkJ513zL93/I5Ye9gCaeTz247X1dg7Yx2Ka+VaLtc3RJJy6d4k
9ijz4n0Rv8+4Hfpq6ZuvJ1e2q3N5Q9+/Fftsx2uZla4dsYYs0TPHdyXUi/Q1
9Xm6vsf03RvvZL7N/Lro2xnruZ6Jca+xzmxHrPvsHant81hj2xh7W+y9WXM2
l/Vn7c/t92Lft94xajj/Bv/WUdeOPXhOujesWiFdd0dnpOtDrBP53m+H4/+h
zjk5I73XaxlbNyu9x+bw2VLIdZmvr56eV0ul12K3vgEyPK5z7IF9V1D9qb6+
Pu9gMx1vpGMtZDezaXGPx7Oo74/4f4pjb8pI149/sUZZ6X3yT/4P+VPP1+eu
aazPc9nW7HR8HOdadS3pp24YfyP2N/XVcjwn3dP0zEjXiVgvdpZPn8N4Hq+J
+egr6Ld1NbaHsVtYZdYqO11PB2eke6HYE31vbA9+RRw7I12Te6o/crwq6gdi
Txfvo/g/QOxFY668sL6a+v4PmPxejw==
           "]], 
          Polygon3DBox[{{5144, 3517, 3194, 3195, 3518, 5145}}]}],
        Lighting->{{"Ambient", 
           RGBColor[0.1830429875, 0.21424763749999998`, 0.0962851875]}, {
          "Directional", 
           RGBColor[0.14004525, 0.17289224999999997`, 0.048721249999999994`], 
           
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.14004525, 0.17289224999999997`, 0.048721249999999994`], 
           
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.14004525, 0.17289224999999997`, 0.048721249999999994`], 
           
           ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}, {}, {}}, {
      {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0r1PU1EYB+C3rVWxWoiJEhcNkzKoYTEpWCISxCBBbYwhBTVxQxKcTOxf
gJub/gUwMMukTMDgKJQW/KhAQlz8ACu68tyY3Pc+v3PuPR/35nQ8flqaSkXE
S/VLSPI7t32+zUe08T3PcZ2X+I1F/uUws60RYzzF0+qJ3MkKu/iCPXzNQc7y
Luf5iEs8Y6Er1s2nI1a1f8ij6vuRiGrS5hp/spbslXV+OBpR8N66/KzFHMZ3
a29oVz0ryh/lXu4a80ne42f+5hc22eAffuU+N1k3/ppxrebcStaWx1TFnle0
J7nIB3zD25zhAF+xwGle5nMu+MYL5mo3x5w6r39C/7KcU011Ul9ZX7+ckW8l
+/Kfr3KHF1njWTY8/8fdZI/c5nX10P69EuM8wTKPc5Q53ucx3qNfFiX61LhD
V4y4HeYwsxziId5khjeYTs6DQX2p/+fmAMW7Sdg=
        "]]}, 
      {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0ktLVVEUAOBlCuZ1og5y7OCqY/GZ5ev6SgehQZkigan5foE6LcSxipio
6A1EJMQGITixX6C/QCdOa9C4iKDv0GDxrbU5a+199jllI/P9czkRsSEG8iLe
Poio4FBuxH1RxJL6Jz/wk7W/8k35R8+8UQ8yq65kqiRixNqXZEZxxDfWsFbc
yHt4xxf8wWH+5gQf6ltlKddZznrztrlsdg1f8oJtKTOZYR3bWc8ONvBxofMl
iq96GtW78kbRIt/nE9EqP2CnvqfsYhO72cxnbGEPW9nLtmQ/fYdcMTvDV7xk
1rmrucU01/goOT/zOc5f3neI39nHW3azS1zLq3jFNM9ZyiOmuME/7v89893N
sJmv7b2ofp58B/V5QcSC+ozz/Mw5nnKWJ5zhMaeTb8qsmJIfcpIHnOAe33GX
49zhGLc5yg73cJT7/7/5B1r5Q9U=
        "]]}, 
      {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0jtPVEEYBuCP6zZLDLjh0hD2B8hKSYwQQiQhXAwSOoyRFgK9xM5GYmEJ
FXRLQyv36+IPoDdGJewusCs3Czp8NhRvnu+bM5mZM+ekp+bezFZFxFc5rI84
q41Y5o+6iIumiH/6e9bo24wnnkY0qR/Uv5hjmit8koo4VT+XLvN62VNRRtWj
fMsJzvA95znLBX7kEr9wlZ3WS1n3t6zr9/lM8smIDX2Bmyxyi+fcrpybO7zk
LkvcY5l/ZV99xQNe85A3POItc7zjcWWPhohme/6R7/oDdkrWGb/pl5jlAhc5
z8+c4Qe+4zTHOcld75RMRDRa45MMGx8xvqaulhPp0bcz41lGnWYHU2xkHauZ
tNZPHpl75zttsFXGnf1WP8YbvuY1R3jFoco9cJBlDvCVlNT9vGQfL9jLc75k
kS9YYDfzLLqflvrHf+c/1YJWng==
        "]]}, 
      {GrayLevel[0.2], 
       Line3DBox[{3771, 4061, 2038, 3770, 5638, 3962, 3772, 5639, 3963, 3773, 
        5640, 3964, 3774, 5641, 3965, 3775, 5642, 3966, 3776, 5643, 3967, 
        3777, 5342, 5713, 3778, 5644, 3968, 3779, 5645, 3969, 3780, 5646, 
        3970, 3781, 5647, 3971, 3782, 5648, 3972, 3783, 2204, 3973, 4062}], 
       Line3DBox[{3785, 5343, 5714, 3784, 2052, 3786, 5649, 3974, 3787, 5650, 
        3975, 3788, 5651, 3976, 3789, 5652, 3977, 3790, 5653, 3978, 3791, 
        5344, 5715, 3792, 5345, 5716, 3793, 5654, 3979, 3794, 5655, 3980, 
        3795, 5656, 3981, 3796, 5657, 3982, 3797, 5658, 3983, 3798}], 
       Line3DBox[{3800, 5346, 5717, 3799, 5347, 5718, 3801, 2067, 3802, 5659, 
        3984, 3803, 5660, 3985, 3804, 5661, 3986, 3805, 5662, 3987, 3806, 
        5348, 5719, 3807, 5349, 5720, 3808, 5350, 5721, 3809, 5663, 3988, 
        3810, 5664, 3989, 3811, 5665, 3990, 3812, 5666, 3991, 3813}], 
       Line3DBox[{3815, 5351, 5722, 3814, 5352, 5723, 3816, 5353, 5724, 3817, 
        2082, 3818, 5667, 3992, 3819, 5668, 3993, 3820, 5669, 3994, 3821, 
        5354, 5725, 3822, 5355, 5726, 3823, 5356, 5727, 3824, 5357, 5728, 
        3825, 5670, 3995, 3826, 5671, 3996, 3827, 5672, 3997, 3828}], 
       Line3DBox[{3830, 5358, 5729, 3829, 5359, 5730, 3831, 5360, 5731, 3832, 
        5361, 5732, 3833, 2097, 3834, 5673, 3998, 3835, 5831, 4300, 4301, 
        3836, 4063, 4064, 5830, 3837, 4275, 4276, 5823, 3838, 4281, 2405, 
        3839, 4302, 5733, 5434, 3840, 5409, 5734, 4066, 3841, 5782, 4068, 
        4069, 3842, 5783, 4071, 4072, 3843}], 
       Line3DBox[{3845, 5362, 5735, 3844, 5363, 5736, 3846, 5364, 5737, 3847, 
        5365, 5738, 3848, 5366, 5739, 3849, 2395, 4274, 3850, 5781, 4056, 
        4057, 3851, 4159, 4160, 4065, 4162, 4161, 5784, 3852, 4279, 4280, 
        4277, 4278, 2401, 3853, 4283, 4284, 4282, 5740, 5410, 3854, 4076, 
        4303, 5741, 4305, 4304, 3855, 4223, 4224, 5815, 4067, 4226, 4225, 
        3856, 4227, 4228, 5816, 4070, 4164, 4163, 3857, 5806, 4165, 4166, 
        4073, 4205, 4204, 3858}], Line3DBox[CompressedData["
1:eJwVzj1OgkEUBdDnCrRQQgwxQZFCQaBQcBMSKaFBFwCFjRtASNQ14D+oNFqY
aLTWPbgJxMTa8xUn9857k8xkD7uNzlxE7JOaj9hIRQzlIpv6hUxT0C/lMkX9
SmbY0q/lCrmliJLzzQLOU7bNXs1OzHrMzKryVv7wzbHzizt3+pHeZ8Cvc00O
ebcfJe/pTT5psUrBG6Pkf/rYnZJs88UBaxTdGSd/1e/dKcs9nszKdjl9lwe7
iqzzbFexW9dPebT7Y8fsze7MLM85E/MP+Q+gfCxA
        "]], 
       Line3DBox[CompressedData["
1:eJwNzbsuRGEUhuGloyJhk4mI2cYhCpEw98A4JOwGiUMyKiR7TsZ0emoViVsY
iajciUsYQTkOjad4871rfX/Wn1ZrWT4QERkWhiN2RyJyZPg078hTPI9HrCQR
83Y35ls0UbZ70XX4nG5LXmAbH+Yn3SavYgOzdsfyHCe41KfyCA84RMmbA/mI
V/2qP4p8H/fYw4w3y/Zd/Zm5gne7K3mNNlLz4pA/eI+/oYg18zqWcDcYMW33
hZZbJTeneJP/jUVM8gb/5QVe5z98gtf4Nx/lOe/zhP8DzX0p2w==
        "]], 
       Line3DBox[{3881, 5680, 4013, 3880, 5681, 4014, 3882, 5682, 4015, 3883, 
        5683, 4016, 3884, 5437, 5684, 4017, 4314, 5416, 5685, 4261, 4286, 
        4018, 4287, 5825, 4179, 4196, 4180, 4087, 4154, 4207, 4019, 4146, 
        4238, 4288, 4239, 4088, 4155, 4208, 5372, 5804, 4197, 4181, 4182, 
        4147, 4156, 5802, 4020, 4089, 4084, 4311, 5832, 4021, 4256, 4085, 
        5686, 4022, 4258, 5413, 5687, 4023, 3885, 5414, 5688, 4024, 3886, 
        5415, 5689, 4025, 3887}], 
       Line3DBox[{3889, 5373, 5749, 3888, 5690, 4026, 3890, 5691, 4027, 3891, 
        5692, 4028, 3892, 5438, 5693, 4029, 4315, 5833, 4090, 4306, 4307, 
        4030, 4091, 5785, 4240, 4241, 4217, 4262, 4031, 4092, 4252, 4297, 
        4253, 4136, 4157, 4263, 5374, 5805, 4135, 4198, 4199, 4148, 4273, 
        5375, 5822, 4272, 4271, 5694, 4032, 3893, 5695, 4033, 3894, 5696, 
        4034, 3895, 5697, 4035, 3896, 5698, 4036, 3897}], 
       Line3DBox[{3899, 5376, 5750, 3898, 5377, 5751, 3900, 5699, 4037, 3901, 
        5700, 4038, 3902, 5701, 4039, 3903, 5826, 4289, 4290, 4040, 3904, 
        5812, 4209, 4219, 4041, 4242, 4312, 4313, 4093, 4318, 4316, 4317, 
        5834, 4137, 4200, 4094, 4149, 4158, 5786, 5422, 4138, 4095, 5378, 
        5787, 3905, 5702, 4042, 3906, 5703, 4043, 3907, 5704, 4044, 3908, 
        5705, 4045, 3909}], 
       Line3DBox[{3911, 5379, 5752, 3910, 5380, 5753, 3912, 5381, 5754, 3913, 
        5706, 4046, 3914, 5827, 4291, 4047, 4292, 5828, 4096, 4264, 4048, 
        4097, 5432, 5824, 4060, 4220, 4049, 4218, 4098, 4245, 5382, 5788, 
        4139, 4293, 4099, 4243, 5383, 5789, 4140, 4100, 5384, 5790, 3915, 
        5385, 5755, 3916, 5707, 4050, 3917, 5708, 4051, 3918, 5709, 4052, 
        3919}], Line3DBox[{3921, 5386, 5756, 3920, 5387, 5757, 3922, 5388, 
        5758, 3923, 5389, 5759, 3924, 5791, 4101, 4102, 3925, 5436, 5792, 
        4103, 4310, 4104, 4299, 4265, 4266, 5431, 5793, 4105, 4221, 4106, 
        3926, 4107, 4246, 4108, 5829, 5433, 3927, 4109, 4244, 4110, 5794, 
        3928, 5390, 5760, 3929, 5391, 5761, 3930, 5392, 5762, 3931, 5710, 
        4053, 3932, 5711, 4054, 3933}], 
       Line3DBox[{3935, 5393, 5763, 3934, 5394, 5764, 3936, 5395, 5765, 3937, 
        5396, 5766, 3938, 5417, 5767, 4111, 3939, 5435, 5795, 4112, 4308, 
        4113, 4294, 4269, 4270, 5821, 4268, 4309, 4114, 4267, 4115, 3940, 
        4116, 4247, 4117, 5801, 3941, 4118, 4119, 5796, 3942, 5397, 5768, 
        3943, 5398, 5769, 3944, 5399, 5770, 3945, 5400, 5771, 3946, 5712, 
        4055, 3947}], 
       Line3DBox[{3961, 4127, 2261, 3960, 5780, 5408, 3959, 5779, 5407, 3958, 
        5778, 5406, 3957, 5777, 5405, 3956, 5776, 5404, 3955, 5798, 4126, 
        4125, 3954, 4124, 4298, 4123, 5797, 3953, 4248, 4249, 4150, 5803, 
        5419, 3952, 4122, 5775, 5418, 3951, 5774, 5403, 3950, 5773, 5402, 
        3949, 5772, 5401, 3948, 2253, 4120, 4121}], 
       Line3DBox[{4320, 4614, 5439, 5835, 4319, 5913, 4512, 4321, 5914, 4513, 
        4322, 5915, 4514, 4323, 5916, 4515, 4324, 5917, 4516, 4325, 5918, 
        4517, 4326, 5919, 5440, 5836, 4327, 5920, 4518, 4328, 5921, 4519, 
        4329, 5922, 4520, 4330, 5923, 4521, 4331, 5924, 4522, 4332, 5503, 
        5991, 4523, 4615}], 
       Line3DBox[{4334, 5441, 5837, 4333, 5442, 5838, 4335, 5925, 4524, 4336, 
        5926, 4525, 4337, 5927, 4526, 4338, 5928, 4527, 4339, 5929, 4528, 
        4340, 5930, 5443, 5839, 4341, 5444, 5840, 4342, 5931, 4529, 4343, 
        5932, 4530, 4344, 5933, 4531, 4345, 5934, 4532, 4346, 5935, 4533, 
        4347}], Line3DBox[{4349, 4616, 4798, 5445, 5841, 4348, 5446, 5842, 
        4350, 5447, 5843, 4351, 5936, 4534, 4352, 5937, 4535, 4353, 5938, 
        4536, 4354, 5939, 4537, 4355, 5940, 5448, 5844, 4356, 5449, 5845, 
        4357, 5450, 5846, 4358, 5941, 4538, 4359, 5942, 4539, 4360, 5943, 
        4540, 4361, 5944, 4541, 4362}], 
       Line3DBox[{4375, 4547, 5951, 4374, 4546, 5950, 4373, 4545, 5949, 4372, 
        5853, 5455, 4371, 5852, 5454, 4370, 5851, 5453, 4369, 5850, 5452, 
        5948, 4368, 4544, 5947, 4367, 4543, 5946, 4366, 4542, 5945, 4365, 
        5849, 5451, 4364, 5848, 1219, 4363, 5847, 864, 1040, 2975, 836, 1175, 
        863}], Line3DBox[{4389, 4549, 5956, 4388, 4548, 5955, 4387, 5861, 
        5457, 4386, 5860, 5456, 4385, 5859, 4835, 4834, 4384, 5858, 4791, 
        4790, 4383, 5857, 4822, 4821, 5954, 4382, 4626, 4625, 5953, 4381, 
        4623, 4622, 5952, 4380, 4621, 5993, 5505, 4379, 5504, 5992, 4619, 
        4378, 5856, 4604, 4816, 4603, 4817, 4377, 5522, 5855, 4799, 4602, 
        4617, 4601, 4735, 4376, 5854, 4600, 4730, 4599, 4734, 4618}], 
       Line3DBox[{4391, 4779, 4780, 1215, 6047, 4390, 1162, 4731, 1051, 3036, 
        1121, 1022, 4670, 6021, 999, 1122, 1023, 4620, 6024, 1021, 4392, 1001,
         5994, 4671, 1002, 4393, 982, 5990, 4624, 983, 4394, 6013, 1003, 4672,
         1070, 4395, 5996, 1226, 4823, 4605, 5862, 4396, 1165, 4792, 1216, 
        6048, 4397, 1246, 4836, 6053, 5526, 4398, 5458, 5863, 4399, 5459, 
        5864, 4400, 5460, 5865, 4401, 5957, 4550, 4402}], 
       Line3DBox[CompressedData["
1:eJwV0K1OgnEYhvHHQ1CHZM+BmZ0yQUUCRTMGAhvMCZvR5nQMgloMDIPSFM/A
hgh+YuBokN8brt3X/fzv8r7r5XqpthQRBWwsR+ykI4Yyg+lKxL3+xmd8FVV9
pJ/zuXySd6mIrvu7vqXXcKa33bf5KR4w9r4vj/Ga7GyubFL8EI+Y2BRky/3C
+wmvYA1H6OPDpievbVo2Hd5GGg00cen+aXfA/2VRvuDW/Usf8Gfc6N/6JnL8
J/kG5PmvzGKXT5N/gz3+l7xjAePVLzk=
        "]], Line3DBox[CompressedData["
1:eJwV0DtKAwEUheHrEhQftWsQUeMLEYlapBBMtDSoJIWOnQgm4AMLH5AiECFV
xmxC3YXYKESxNTFr8Evxc/57DjMwM1lMto6HIiKH7HBEfzxidyxijf/xHb7K
e7zAV3iX5/kyb8j2RERnJOIbX1jSP+qr+lf3JsooYdF2o0/4CTaQooUz/YL9
gB9iHfu41t9537zt0n2FCmq6W9sFz9hG5TmOdA/yHnP6PVkcPKfPyhc8Y9b2
JNs4tdUH38c/8YEZe1OX2n7c73jDlP7XP9i2TfN/4OAung==
        "]], 
       Line3DBox[{4426, 5466, 5871, 4425, 5963, 4565, 4427, 5964, 4566, 4428, 
        4781, 6035, 4567, 4812, 4838, 4839, 6054, 4837, 4840, 4568, 4740, 
        4741, 6015, 5521, 4687, 4752, 4569, 4753, 5517, 6030, 4756, 4714, 
        4632, 4697, 4726, 4570, 4801, 6029, 4754, 4802, 4755, 4633, 4698, 
        4727, 5467, 6016, 4688, 4715, 4716, 4689, 4699, 6017, 4571, 4676, 
        4634, 4832, 5999, 4572, 4429, 5965, 4573, 4430, 5966, 4574, 4431, 
        5967, 4575, 4432, 5968, 4576, 4433}], 
       Line3DBox[{4435, 5468, 5872, 4434, 5469, 5873, 4436, 5969, 4577, 4437, 
        5970, 4578, 4438, 5529, 6041, 4579, 4803, 5506, 6042, 4804, 4805, 
        4807, 4806, 4635, 6043, 4717, 4608, 4690, 4700, 4701, 4636, 6031, 
        4757, 4609, 4758, 4702, 4703, 6010, 4677, 4722, 4637, 4691, 4788, 
        4789, 6039, 4787, 4786, 6038, 4580, 4439, 5971, 4581, 4440, 5972, 
        4582, 4441, 5973, 4583, 4442, 5974, 4584, 4443}], 
       Line3DBox[{4445, 5470, 5874, 4444, 5471, 5875, 4446, 5472, 5876, 4447, 
        5975, 4585, 4448, 5976, 4586, 4449, 5977, 4728, 4761, 4587, 4729, 
        5978, 4610, 4745, 4588, 4742, 6040, 4796, 4815, 4611, 4743, 5473, 
        6032, 4759, 4760, 4638, 4692, 4704, 6018, 5513, 4678, 4639, 5474, 
        5877, 4450, 5979, 4589, 4451, 5980, 4590, 4452, 5981, 4591, 4453, 
        5982, 4592, 4454}], 
       Line3DBox[{4456, 5475, 5878, 4455, 5476, 5879, 4457, 5477, 5880, 4458, 
        5478, 5881, 4459, 5983, 4808, 4809, 4460, 4810, 6044, 4640, 4762, 
        4641, 4461, 6000, 4612, 4746, 4613, 4797, 4462, 6027, 4642, 4744, 
        4643, 5882, 4463, 4644, 4693, 4645, 5883, 5519, 4464, 4646, 4647, 
        5884, 4465, 5479, 5885, 4466, 5984, 4593, 4467, 5985, 4594, 4468, 
        5986, 4595, 4469}], 
       Line3DBox[{4471, 5480, 5886, 4470, 5481, 5887, 4472, 5482, 5888, 4473, 
        5483, 5889, 4474, 5507, 6001, 4648, 4475, 4827, 6051, 4649, 4828, 
        4650, 4814, 4776, 4777, 5525, 6034, 4651, 4747, 4652, 4476, 6033, 
        4653, 4764, 4654, 4811, 6045, 4477, 4655, 4763, 4656, 5890, 4478, 
        5484, 5891, 4479, 5485, 5892, 4480, 5486, 5893, 4481, 5987, 4596, 
        4482, 5988, 4597, 4483}], 
       Line3DBox[{4485, 5487, 5894, 4484, 5488, 5895, 4486, 5489, 5896, 4487, 
        5490, 5897, 4488, 5508, 6002, 4657, 4489, 1227, 3115, 1228, 1139, 
        1140, 3050, 1138, 4778, 4658, 4490, 6011, 4659, 4765, 4660, 5898, 
        4491, 4661, 4662, 5899, 4492, 5491, 5900, 4493, 5492, 5901, 4494, 
        5493, 5902, 4495, 5494, 5903, 4496, 5989, 4598, 4497}], 
       Line3DBox[{4511, 4669, 6006, 5512, 4510, 5912, 5502, 4509, 5911, 5501, 
        4508, 5910, 5500, 4507, 5909, 5499, 4506, 5908, 5498, 4505, 5907, 
        4668, 4667, 6012, 4504, 4666, 4813, 6005, 5511, 4503, 4766, 4767, 
        4694, 6004, 5510, 4502, 4665, 6003, 5509, 4501, 5906, 5497, 4500, 
        5905, 5496, 4499, 5904, 5495, 4498, 2869, 4663, 4664}], 
       Line3DBox[{4842, 5131, 5532, 6055, 4841, 6134, 5032, 4843, 6135, 5033, 
        4844, 6136, 5034, 4845, 6137, 5035, 4846, 6138, 5036, 4847, 6139, 
        5037, 4848, 6140, 5533, 6056, 4849, 6141, 5038, 4850, 6142, 5039, 
        4851, 6143, 5040, 4852, 6144, 5041, 4853, 6145, 5042, 4854, 5603, 
        6217, 5043, 5132}], 
       Line3DBox[{4856, 5534, 6057, 4855, 5535, 6058, 4857, 6146, 5044, 4858, 
        6147, 5045, 4859, 6148, 5046, 4860, 6149, 5047, 4861, 6150, 5048, 
        4862, 6151, 5536, 6059, 4863, 5537, 6060, 4864, 6152, 5049, 4865, 
        6153, 5050, 4866, 6154, 5051, 4867, 6155, 5052, 4868, 6156, 5053, 
        4869}], Line3DBox[{4871, 5133, 5304, 5538, 6061, 4870, 5539, 6062, 
        4872, 5540, 6063, 4873, 6157, 5054, 4874, 6158, 5055, 4875, 6159, 
        5056, 4876, 6160, 5057, 4877, 6161, 5541, 6064, 4878, 5542, 6065, 
        4879, 5543, 6066, 4880, 6162, 5058, 4881, 6163, 5059, 4882, 6164, 
        5060, 4883, 6165, 5061, 4884}], 
       Line3DBox[{4897, 5067, 6172, 4896, 5066, 6171, 4895, 5065, 6170, 4894, 
        6073, 5548, 4893, 6072, 5547, 4892, 6071, 5546, 4891, 6070, 5545, 
        6169, 4890, 5064, 6168, 4889, 5063, 6167, 4888, 5062, 6166, 4887, 
        6069, 5544, 4886, 6068, 1833, 4885, 6067, 1505, 1673, 3643, 1478, 
        1792, 1504}], 
       Line3DBox[{4911, 5152, 5151, 6176, 4910, 5149, 5148, 6175, 4909, 5146, 
        6221, 5606, 4908, 5634, 6271, 5324, 4907, 6079, 5307, 5306, 4906, 
        6078, 5298, 5297, 4905, 6077, 5145, 5144, 6265, 4904, 5143, 5142, 
        6174, 4903, 5140, 5139, 6173, 4902, 5138, 6219, 5605, 4901, 5604, 
        6218, 5136, 4900, 6076, 5126, 5319, 5125, 5320, 4899, 5629, 6075, 
        5305, 5124, 5134, 5123, 5253, 4898, 6074, 5122, 5244, 5121, 5252, 
        5135}], Line3DBox[{4913, 5287, 5288, 1830, 6268, 4912, 1778, 5245, 
        1686, 3684, 1738, 1658, 5168, 6250, 1632, 1739, 1659, 5137, 6254, 
        1657, 4914, 1634, 6220, 5169, 1635, 4915, 1614, 6213, 5141, 1615, 
        4916, 6241, 1636, 5170, 1637, 4917, 6242, 1722, 5171, 1638, 6251, 
        4918, 1796, 1827, 1781, 6262, 4919, 1799, 5308, 6264, 5607, 4920, 
        5156, 5325, 6272, 1840, 4921, 1705, 6214, 5147, 1706, 4922, 1708, 
        6215, 5150, 1618, 4923, 6243, 1619, 5153, 1664, 1745}], 
       Line3DBox[CompressedData["
1:eJwVzbkuhGEUBuAzlQuwRDsqhd46hsSeGEtI7GQSFMQUpiHRugKUIiIK9yAS
VMLYt6uwJlTi+Ysn5z3fe/6ZdL4wvJKKiDzZ8oh0dcSlmeGiImLDfiWX5Bpy
9pJ9Uy7jiFRVxLr3a+/19gIT9p/KiAZ5jV1u9B3mCCdMuvlw0yj3s8etm07z
0/uUflRuSv6XO12X+aub1hXlZgZYsN/ru+UxThmnhUH2WXTz4KZWnucs+Y4M
b35zVX8gP7rpMZc4Z5lW3t0U3RzKT256zZmEty9dVh7iWddnziZ037o2eYsX
XZ35521Oty23s8Or7tj8B0ngO0g=
        "]], Line3DBox[CompressedData["
1:eJwVz8kuQ2EYBuBfXIJxK4IbwEqEmmkiqcQsoZpwRFutGFaGlXleGG/Biguw
FQtcDIkh4TmLJ9/wfudvWpPOp3IlIYSIZFkIM+UhrJOmnmlyRNUhfFSEMODm
3HzBNr92BdmRvl82qa4xRR29sgk1yzh9biJ1lQUW5c3qPFfMxd+4yah3jMk/
/UaT/oxLTulx82VflN+aV6hlhFmG6XaTlRf1y3RQYImMfZf8QH/IFvtxZv/j
3U7ZrnmPTb7t8rKd+B1Zg7rBoN2JekzCPqUOxf/HPqE+8kC77Fq9YVT2571G
/RuvtMlLK70peze/8EyL/VNVCPfuW/X/KAo7FA==
        "]], 
       Line3DBox[{4942, 5550, 6081, 4941, 6178, 5082, 4943, 6179, 5083, 4944, 
        5289, 6261, 5084, 5310, 5608, 6275, 5336, 5339, 5085, 5277, 5609, 
        6224, 5086, 5279, 5610, 6245, 5195, 5087, 5312, 6273, 5334, 5335, 
        5333, 5340, 5551, 6267, 5313, 5161, 6225, 5088, 5281, 5162, 6226, 
        5089, 5283, 5163, 6227, 5090, 5285, 5611, 6228, 5091, 4945, 5612, 
        6229, 5092, 4946, 5613, 6230, 5093, 4947}], 
       Line3DBox[{4949, 5552, 6082, 4948, 5553, 6083, 4950, 6180, 5094, 4951, 
        6181, 5095, 4952, 5636, 6274, 5096, 5341, 5632, 6263, 5097, 5301, 
        6182, 5128, 5251, 5291, 5292, 5250, 6183, 5242, 5243, 5554, 6084, 
        4953, 5555, 6085, 4954, 6184, 5098, 4955, 6185, 5099, 4956, 6186, 
        5100, 4957, 6187, 5101, 4958, 6188, 5102, 4959}], 
       Line3DBox[{4961, 5556, 6086, 4960, 5557, 6087, 4962, 5558, 6088, 4963, 
        6189, 5103, 4964, 6190, 5104, 4965, 6191, 5302, 5105, 5303, 6192, 
        5129, 5295, 5317, 5318, 5196, 6193, 5130, 5337, 5559, 6089, 4966, 
        5560, 6090, 4967, 5561, 6091, 4968, 6194, 5106, 4969, 6195, 5107, 
        4970, 6196, 5108, 4971, 6197, 5109, 4972}], 
       Line3DBox[{4974, 5562, 6092, 4973, 5563, 6093, 4975, 5564, 6094, 4976, 
        5565, 6095, 4977, 6198, 5110, 4978, 6199, 5111, 4979, 6200, 5293, 
        5296, 5294, 5332, 4980, 5637, 6276, 5330, 5338, 5331, 6096, 4981, 
        5566, 6097, 4982, 5567, 6098, 4983, 5568, 6099, 4984, 6201, 5112, 
        4985, 6202, 5113, 4986, 6203, 5114, 4987}], 
       Line3DBox[{4989, 5569, 6100, 4988, 5570, 6101, 4990, 5571, 6102, 4991, 
        5572, 6103, 4992, 5573, 6104, 4993, 6204, 5115, 4994, 6205, 5116, 
        4995, 6206, 5574, 6105, 4996, 5575, 6106, 4997, 5576, 6107, 4998, 
        5577, 6108, 4999, 5578, 6109, 5000, 6207, 5117, 5001, 6208, 5118, 
        5002}], Line3DBox[{5004, 5579, 6110, 5003, 5580, 6111, 5005, 5581, 
        6112, 5006, 5582, 6113, 5007, 5583, 6114, 5008, 5584, 6115, 5009, 
        6209, 5119, 5010, 6210, 5585, 6116, 5011, 5586, 6117, 5012, 5587, 
        6118, 5013, 5588, 6119, 5014, 5589, 6120, 5015, 5590, 6121, 5016, 
        6211, 5120, 5017}], 
       Line3DBox[{5031, 5167, 6231, 5614, 5030, 6133, 5602, 5029, 6132, 5601, 
        5028, 6131, 5600, 5027, 6130, 5599, 5026, 6129, 5598, 5025, 6128, 
        5597, 6212, 5024, 6127, 5596, 5023, 6126, 5595, 5022, 6125, 5594, 
        5021, 6124, 5593, 5020, 6123, 5592, 5019, 6122, 5591, 5018, 3556, 
        5165, 5166}]}, 
      {GrayLevel[0.2], 
       Line3DBox[{1862, 2039, 5638, 1863, 2052, 1889, 5718, 2066, 1903, 5723, 
        2080, 1917, 5730, 2094, 1931, 5736, 2104, 1942, 5743, 2111, 5675, 
        1950, 2118, 5681, 1957, 2126, 5690, 1969, 5751, 2137, 1981, 5753, 
        2149, 1993, 5757, 2160, 2005, 5764, 2171, 2017, 5772, 2182, 2029}], 
       Line3DBox[{1864, 2040, 5639, 1865, 2053, 5649, 1890, 2067, 1904, 5724, 
        2081, 1918, 5731, 2095, 1932, 5737, 2105, 1943, 5744, 2112, 5676, 
        1951, 2119, 5682, 1958, 2127, 5691, 1970, 2138, 5699, 1982, 5754, 
        2150, 1994, 5758, 2161, 2006, 5765, 2172, 2018, 5773, 2183, 2030}], 
       Line3DBox[{1866, 2041, 5640, 1867, 2054, 5650, 1891, 2068, 5659, 1905, 
        2082, 1919, 5732, 2096, 1933, 5738, 2106, 1944, 5745, 2113, 5677, 
        1952, 2120, 5683, 1959, 2128, 5692, 1971, 2139, 5700, 1983, 2151, 
        5706, 1995, 5759, 2162, 2007, 5766, 2173, 2019, 5774, 2184, 2031}], 
       Line3DBox[{1868, 2042, 5641, 1869, 2055, 5651, 1892, 2069, 5660, 1906, 
        2083, 5667, 1920, 2097, 1934, 5739, 2107, 1945, 5746, 2114, 5678, 
        1953, 2439, 2440, 5684, 1960, 2444, 2445, 5693, 1972, 2140, 5701, 
        1984, 2414, 5827, 2415, 1996, 2245, 5791, 2246, 2008, 5767, 2249, 
        2250, 2020, 5775, 2254, 2255, 2257}], 
       Line3DBox[{1870, 2043, 5642, 1871, 2056, 5652, 1893, 2070, 5661, 1907, 
        2084, 5668, 1921, 2098, 5673, 1935, 2395, 2396, 1946, 5747, 2222, 
        2223, 5679, 2377, 2442, 2443, 2441, 2234, 5685, 2382, 2447, 2448, 
        2446, 5833, 2238, 2434, 2411, 5826, 2412, 2413, 2417, 2418, 2416, 
        5828, 2241, 2384, 2437, 2438, 5792, 2273, 2247, 2361, 2435, 2436, 
        5795, 2276, 2332, 2331, 2288, 5803, 2256, 2279, 2364, 2363, 2421}], 
       Line3DBox[CompressedData["
1:eJwVyrtKAgAUBuDjVGaXydqCErdqyKAI8gFazFtOFlSEUy7RFRR8gRpqcGxo
b3AJiS6Lu/QEQuBDNPQ1fPz/uSwdNUtniYgosDcR8UtqPqIok5MRaf1UX9AX
9XM9q2f1jt5KRgz0trw337k9muvmQw4Y2z3wQs68zqufDTnFLin67jOywaf7
tEwzS4E53v1sya77plxhmZ45I1f/b36++LA7MR+zRpEyJZ7cRn4u9SsuqFCl
xpv7vvzxcytvuGZofnbb1vPs8G33B11mJV4=
        "]], 
       Line3DBox[{8, 3777, 23, 3791, 38, 3806, 53, 3821, 68, 3836, 583, 83, 
        3851, 256, 98, 3872, 271, 4081, 113, 355, 4146, 128, 289, 4092, 143, 
        469, 4242, 158, 441, 4218, 173, 3926, 472, 188, 3940, 342, 203, 3954, 
        346, 218}], 
       Line3DBox[{1874, 5713, 2045, 1875, 5715, 2058, 1895, 5719, 2072, 1909, 
        5725, 2086, 1923, 2205, 5830, 2428, 2429, 2099, 1937, 2300, 5784, 
        2301, 2215, 2289, 2108, 1947, 2345, 2346, 2344, 2115, 5814, 1954, 
        2379, 2381, 2380, 2236, 2296, 2326, 5804, 2121, 1961, 2320, 2321, 
        2268, 2298, 5805, 2129, 1973, 2340, 2341, 2269, 2449, 5834, 2141, 
        1985, 2243, 2271, 5788, 2152, 1997, 2419, 2420, 5829, 2275, 2163, 
        2009, 2251, 5801, 2278, 2174, 2021, 2259, 5798, 2185, 2032}], 
       Line3DBox[{1876, 2046, 5644, 1877, 5716, 2059, 1896, 5720, 2073, 1910, 
        5726, 2087, 1924, 2400, 5823, 2100, 1938, 2401, 2402, 2281, 2290, 
        2109, 1948, 5807, 2307, 2308, 2283, 2291, 2116, 5820, 1955, 2336, 
        2337, 2237, 2297, 2122, 5802, 1962, 2409, 2410, 2393, 2394, 5822, 
        2130, 1974, 2327, 2328, 2270, 5786, 2299, 2142, 1986, 2329, 2330, 
        2272, 5789, 2153, 1998, 2248, 5794, 2164, 2010, 2252, 5796, 2175, 
        2022, 5776, 2186, 2033}], 
       Line3DBox[{1878, 2047, 5645, 1879, 2060, 5654, 1897, 5721, 2074, 1911, 
        5727, 2088, 1925, 2405, 2101, 1939, 5740, 2216, 2351, 2367, 2368, 
        2369, 5819, 2322, 2217, 2284, 2292, 2293, 5799, 2372, 2371, 2225, 
        2370, 2123, 5832, 1963, 2392, 2131, 5694, 1975, 2240, 5787, 2143, 
        1987, 2244, 5790, 2154, 1999, 5760, 2165, 2011, 5768, 2176, 2023, 
        5777, 2187, 2034}], 
       Line3DBox[{1880, 2048, 5646, 1881, 2061, 5655, 1898, 2075, 5663, 1912, 
        5728, 2089, 1926, 5733, 2432, 2102, 1940, 2433, 5741, 2218, 2219, 
        2333, 2334, 2335, 2323, 5748, 2220, 2285, 2294, 2295, 5800, 2376, 
        2375, 2226, 2373, 2124, 5686, 1964, 2132, 5695, 1976, 2144, 5702, 
        1988, 5755, 2155, 2000, 5761, 2166, 2012, 5769, 2177, 2024, 5778, 
        2188, 2035}], 
       Line3DBox[{1882, 2049, 5647, 1883, 2062, 5656, 1899, 2076, 5664, 1913, 
        2090, 5670, 1927, 5734, 2206, 2207, 2208, 2352, 5815, 2192, 2406, 
        2193, 2302, 2221, 2309, 5808, 2197, 2286, 2198, 2310, 5809, 2265, 
        2227, 2374, 2228, 5687, 1965, 2133, 5696, 1977, 2145, 5703, 1989, 
        2156, 5707, 2001, 5762, 2167, 2013, 5770, 2178, 2025, 5779, 2189, 
        2036}], Line3DBox[{1884, 2050, 5648, 1885, 2063, 5657, 1900, 2077, 
        5665, 1914, 2091, 5671, 1928, 2209, 5782, 2210, 2211, 2353, 5816, 
        2194, 2407, 2195, 2343, 2342, 5813, 2347, 2199, 2287, 2200, 2311, 
        5810, 2266, 2230, 2231, 5688, 1966, 2134, 5697, 1978, 2146, 5704, 
        1990, 2157, 5708, 2002, 2168, 5710, 2014, 5771, 2179, 2026, 5780, 
        2190, 2037}], 
       Line3DBox[{1886, 2203, 2204, 1887, 2064, 5658, 1901, 2078, 5666, 1915, 
        2092, 5672, 1929, 2212, 5783, 2213, 2214, 2303, 5806, 2304, 2282, 
        2306, 2305, 2324, 5811, 2312, 2313, 2229, 2358, 2357, 5818, 2267, 
        2232, 2233, 5689, 1967, 2135, 5698, 1979, 2147, 5705, 1991, 2158, 
        5709, 2003, 2169, 5711, 2015, 2180, 5712, 2027, 2261, 2262, 2263}], 
       Line3DBox[{2028, 2181, 2253, 2016, 2170, 5763, 2004, 2159, 5756, 1992, 
        2148, 5752, 1980, 2136, 5750, 1968, 2125, 5749, 1956, 5680, 2117, 
        1949, 5674, 2110, 5742, 1941, 2103, 5735, 1930, 2093, 5729, 1916, 
        2079, 5722, 1902, 2065, 5717, 1888, 2051, 5714, 1861, 2038, 2202, 
        2264}], Line3DBox[{2451, 2637, 5913, 2452, 5838, 2651, 2480, 5842, 
        2666, 2495, 2819, 5847, 2681, 2510, 2993, 2994, 5855, 2820, 2995, 
        3052, 2696, 2525, 2981, 3036, 2982, 2832, 3120, 2705, 2534, 6050, 
        3121, 3122, 3116, 2714, 6049, 2544, 2724, 5963, 2555, 5873, 2735, 
        2566, 5875, 2746, 2578, 5879, 2758, 2590, 5887, 2769, 2602, 5895, 
        2780, 2614, 5904, 2791, 2627}], 
       Line3DBox[{2453, 2638, 5914, 2454, 2652, 5925, 2481, 5843, 2667, 2496, 
        3107, 5848, 2682, 2511, 2802, 5856, 3027, 3028, 3090, 3029, 3030, 
        2947, 6021, 2821, 2953, 2918, 2919, 3038, 6007, 3037, 2833, 2984, 
        2715, 5995, 2545, 2725, 5964, 2556, 2736, 5969, 2567, 5876, 2747, 
        2579, 5880, 2759, 2591, 5888, 2770, 2603, 5896, 2781, 2615, 5905, 
        2792, 2628}], 
       Line3DBox[{2455, 2639, 5915, 2456, 2653, 5926, 2482, 2668, 5936, 2497, 
        5849, 2683, 2512, 5992, 2822, 3031, 3033, 3034, 3035, 2964, 6024, 
        2803, 2905, 2920, 2921, 2535, 2929, 6019, 2807, 2888, 3091, 3092, 
        6046, 2546, 3106, 3056, 3093, 2726, 6035, 2557, 2737, 5970, 2568, 
        2748, 5975, 2580, 5881, 2760, 2592, 5889, 2771, 2604, 5897, 2782, 
        2616, 5906, 2793, 2629}], 
       Line3DBox[{2457, 2640, 5916, 2458, 2654, 5927, 2483, 2669, 5937, 2498, 
        2684, 5945, 2513, 5993, 2823, 3032, 2824, 2886, 2948, 5994, 2825, 
        2906, 2826, 2996, 2977, 2997, 5997, 2835, 3023, 2836, 2954, 6008, 
        2889, 3094, 3117, 2837, 3126, 2838, 3127, 6054, 3125, 3124, 3073, 
        3074, 6041, 2569, 2749, 5976, 2581, 3082, 5983, 3083, 2593, 6001, 
        2855, 2856, 2605, 6002, 2861, 2862, 2617, 6003, 2870, 2871, 2874}], 
       Line3DBox[CompressedData["
1:eJwVzr9KglEch/FfWENqs4MGuvUHMpr6s3QBDVaDRIMg1PgG0Srtjo71utQg
1RrdQDhITt1Ct1Bgtfg5w8PzvN9zXjiN7tVJthARR7hfjjguRqxWInLd0Wv6
VWd6R7/rnt7Xn7pUijjUZV5Bhkvf3+6c6x8e8QP69iee2Tr8y9fpH3uF3/Bn
e+Z/fuFbZ11eLEdUucA1vrMv6Vyf6SGP0xtsdc7Tm3RDf2FLN7GuH521eAOT
ZPtmOten2MYAF7hxd5fb2MMUHzjAHD6vJlI=
        "]], Line3DBox[CompressedData["
1:eJwVzj0vQ2EYgOGnSxM0jFVfCZvZWAOTuWWSShoxq4RWSXwMqEUHgwTRv1CL
RWIzNWHxBwy+6jeo9DrDled+n/ec9kyvV4qbqYhY5m4gojgYMZWNaOmyntUP
uqLn9LM+1Hn9poeHIhb1iLnEKQfOZ2aJcxqscWK/be5QpkY1ube/MHe5os4o
+zyyR9MzT+Y179wwyTG37tKZiCO9wZ/va5mr9j3d1v/mlvNM0vS454MvPrl0
X0j+22/lyPLt/MMvXVaYsB9njKp35u06vPLCAn07Vy/r
        "]], 
       Line3DBox[CompressedData["
1:eJwVzz0vg1EYBuDH+NJBLWLRNL5rEiYhUqPEopGYJMzitTYkfoCKmNiku3ZU
DfGZllHF3h/SJlyGK/d9nifnJCe/n24dDkTEJjdJRGkwIjcaUdX39IJ+px/p
S3pLP9VX9B99MhOxrk/LGWY5cJ6TI0PukbJLh7Ldt9zgni8aVMyb8oou14zx
yC/n9g8yvPsknxnnlQu7F5nYvcl3bun/v2PXkzUmOHOuyynazHNp9iGz7g/z
qS9wbL4tF1n251V5YrYj1yjyByXRKo8=
        "]], 
       Line3DBox[{2467, 2645, 5920, 2468, 5840, 2659, 2488, 5845, 2674, 2503, 
        5851, 2689, 2518, 3064, 5858, 2698, 2527, 3104, 6048, 3105, 3054, 
        3055, 2707, 2537, 6014, 3065, 3066, 3058, 3059, 2717, 6037, 2548, 
        2941, 2942, 2891, 2923, 2728, 6017, 2559, 3079, 3080, 3061, 3062, 
        6039, 2739, 2571, 2958, 2959, 2893, 6018, 2925, 2751, 2583, 2960, 
        2961, 5883, 2895, 2762, 2595, 2860, 5890, 2773, 2607, 2868, 5899, 
        2784, 2620, 5908, 2795, 2631}], 
       Line3DBox[{2469, 2646, 5921, 2470, 2660, 5931, 2489, 5846, 2675, 2504, 
        5852, 2690, 2519, 3123, 5859, 2699, 2528, 6053, 3053, 2708, 2538, 
        6052, 3057, 2718, 6036, 2549, 2842, 2729, 5999, 2560, 3060, 2740, 
        6038, 2572, 2847, 5877, 2752, 2584, 2854, 5884, 2763, 2596, 5891, 
        2774, 2608, 5900, 2785, 2621, 5909, 2796, 2632}], 
       Line3DBox[{2471, 2647, 5922, 2472, 2661, 5932, 2490, 2676, 5941, 2505, 
        5853, 2691, 2520, 5860, 2700, 2529, 5863, 2709, 2539, 5867, 2719, 
        5959, 2550, 2730, 5965, 2561, 2741, 5971, 2573, 2753, 5979, 2585, 
        5885, 2764, 2597, 5892, 2775, 2609, 5901, 2786, 2622, 5910, 2797, 
        2633}], Line3DBox[{2473, 2648, 5923, 2474, 2662, 5933, 2491, 2677, 
        5942, 2506, 2692, 5949, 2521, 5861, 2701, 2530, 5864, 2710, 2540, 
        5868, 2720, 5960, 2551, 2731, 5966, 2562, 2742, 5972, 2574, 2754, 
        5980, 2586, 2765, 5984, 2598, 5893, 2776, 2610, 5902, 2787, 2623, 
        5911, 2798, 2634}], 
       Line3DBox[{2475, 2649, 5924, 2476, 2663, 5934, 2492, 2678, 5943, 2507, 
        2693, 5950, 2522, 2702, 5955, 2531, 5865, 2711, 2541, 5869, 2721, 
        5961, 2552, 2732, 5967, 2563, 2743, 5973, 2575, 2755, 5981, 2587, 
        2766, 5985, 2599, 2777, 5987, 2611, 5903, 2788, 2624, 5912, 2799, 
        2635}], Line3DBox[{2477, 2816, 2817, 5991, 2478, 2664, 5935, 2493, 
        2679, 5944, 2508, 2694, 5951, 2523, 2703, 5956, 2532, 2712, 5957, 
        2542, 5870, 2722, 5962, 2553, 2733, 5968, 2564, 2744, 5974, 2576, 
        2756, 5982, 2588, 2767, 5986, 2600, 2778, 5988, 2612, 2789, 5989, 
        2625, 6006, 2882, 2883, 2884}], 
       Line3DBox[{2626, 2790, 2869, 2613, 2779, 5894, 2601, 2768, 5886, 2589, 
        2757, 5878, 2577, 2745, 5874, 2565, 2734, 5872, 2554, 2723, 5871, 
        2543, 5958, 2713, 5866, 2533, 2704, 3063, 3103, 6047, 3102, 2524, 
        2695, 3101, 2976, 5854, 2801, 2509, 2680, 3051, 2975, 2800, 2494, 
        2665, 5841, 2818, 2479, 2650, 5837, 2450, 2636, 5835, 2815, 2885}], 
       Line3DBox[{2630, 2794, 5907, 2878, 2619, 2783, 2902, 5898, 2866, 2606, 
        2772, 2898, 3087, 6045, 3086, 2594, 2761, 2894, 5882, 2852, 2582, 
        2750, 6032, 3012, 3042, 3041, 2570, 2738, 2963, 6010, 2924, 2892, 
        2946, 2971, 2945, 2558, 2727, 6016, 2922, 2915, 2940, 2939, 2547, 
        6025, 2716, 2965, 2913, 2956, 6022, 2955, 2536, 2706, 2980, 2979, 
        5862, 2806, 2526, 2697, 5857, 3109, 2517, 2688, 5850, 2502, 2673, 
        5844, 2487, 2658, 5839, 2466, 2644, 5836, 2464}], 
       Line3DBox[{3129, 3317, 6134, 3130, 6058, 3331, 3158, 6062, 3346, 3173, 
        3504, 6067, 3361, 3188, 3660, 3661, 6075, 3505, 3662, 3703, 3376, 
        3203, 3651, 3684, 3652, 3529, 3753, 3382, 3209, 6270, 3754, 3755, 
        3751, 3386, 6269, 3214, 3391, 6178, 3220, 6083, 3399, 3232, 6087, 
        3410, 3245, 6093, 3422, 3258, 6101, 3435, 3273, 6111, 3450, 3288, 
        6122, 3465, 3303}], 
       Line3DBox[{3131, 3318, 6135, 3132, 3332, 6146, 3159, 6063, 3347, 3174, 
        3748, 6068, 3362, 3189, 3480, 6076, 3675, 3676, 3725, 3677, 3678, 
        3616, 6250, 3506, 3622, 3589, 3590, 3686, 6232, 3685, 3530, 3655, 
        3387, 6222, 3215, 3392, 6179, 3221, 3400, 6180, 3233, 6088, 3411, 
        3246, 6094, 3423, 3259, 6102, 3436, 3274, 6112, 3451, 3289, 6123, 
        3466, 3304}], 
       Line3DBox[{3133, 3319, 6136, 3134, 3333, 6147, 3160, 3348, 6157, 3175, 
        6069, 3363, 3190, 6218, 3507, 3679, 3681, 3682, 3683, 3633, 6254, 
        3481, 3571, 3591, 3592, 3210, 3607, 6248, 3488, 3563, 3730, 3731, 
        6266, 3216, 3747, 3704, 3732, 3393, 6261, 3222, 3401, 6181, 3234, 
        3412, 6189, 3247, 6095, 3424, 3260, 6103, 3437, 3275, 6113, 3452, 
        3290, 6124, 3467, 3305}], 
       Line3DBox[{3135, 3320, 6137, 3136, 3334, 6148, 3161, 3349, 6158, 3176, 
        3364, 6166, 3191, 6219, 3508, 3680, 3509, 3561, 3617, 6220, 3510, 
        3572, 3511, 3663, 3645, 3669, 6223, 3538, 3674, 3539, 3626, 6234, 
        3564, 3734, 3752, 3540, 3733, 3541, 6275, 3764, 3762, 3763, 6274, 
        3235, 3413, 6190, 3248, 3425, 6198, 3261, 6104, 3438, 3276, 6114, 
        3453, 3291, 6125, 3468, 3306}], 
       Line3DBox[{3137, 3321, 6138, 3138, 3335, 6149, 3162, 3350, 6159, 3177, 
        3365, 6167, 3192, 3512, 6173, 3513, 3514, 3601, 6213, 3482, 3573, 
        3483, 3653, 3646, 6255, 3656, 3489, 3579, 3490, 3608, 6235, 3565, 
        3735, 3542, 3690, 3543, 6224, 3223, 3712, 3769, 3713, 6263, 3236, 
        3717, 6191, 3718, 3249, 3426, 6199, 3262, 3439, 6204, 3277, 6115, 
        3454, 3292, 6126, 3469, 3307}], 
       Line3DBox[{3139, 3322, 6139, 3140, 3336, 6150, 3163, 3351, 6160, 3178, 
        3366, 6168, 3193, 3515, 6174, 3516, 3562, 3618, 6241, 3619, 3574, 
        3665, 3664, 3647, 6256, 3657, 3658, 3580, 3610, 3609, 6236, 3566, 
        3544, 3691, 3545, 6245, 3587, 3715, 3716, 3714, 6182, 3495, 3650, 
        3720, 3721, 3719, 6192, 3496, 3707, 3705, 6200, 3706, 3263, 3440, 
        6205, 3278, 3455, 6209, 3293, 6127, 3470, 3308}], 
       Line3DBox[{3141, 3323, 6140, 3143, 3337, 6151, 3164, 3352, 6161, 3179, 
        3367, 6169, 3194, 3517, 6265, 3726, 3728, 3727, 3729, 3672, 6242, 
        3673, 3575, 3519, 3576, 3627, 6244, 3628, 3581, 3632, 3631, 6237, 
        3567, 3740, 3741, 3736, 3761, 6273, 3760, 3759, 3639, 3649, 6183, 
        3641, 3642, 3497, 3588, 6193, 3499, 3765, 3766, 3767, 6276, 3758, 
        3757, 3264, 3441, 6206, 3279, 3456, 6210, 3294, 3471, 6212, 3309}], 
       Line3DBox[{3145, 3325, 6141, 3146, 6060, 3339, 3166, 6065, 3354, 3181, 
        6071, 3369, 3196, 3709, 6078, 3378, 3205, 3710, 6262, 3711, 3577, 
        3594, 3384, 3212, 6258, 3634, 3635, 3546, 3596, 3389, 6247, 3218, 
        3693, 3694, 3692, 3395, 6225, 3225, 6085, 3403, 3238, 6090, 3415, 
        3251, 6097, 3428, 3266, 6106, 3443, 3281, 6117, 3458, 3296, 6129, 
        3473, 3311}], 
       Line3DBox[{3147, 3326, 6142, 3148, 3340, 6152, 3167, 6066, 3355, 3182, 
        6072, 3370, 3197, 3722, 6079, 3379, 3206, 6264, 3532, 3666, 3687, 
        3688, 3689, 6233, 3623, 3533, 3583, 3597, 3598, 6259, 3697, 3696, 
        3547, 3695, 3396, 6226, 3226, 3404, 6184, 3239, 6091, 3416, 3252, 
        6098, 3429, 3267, 6107, 3444, 3282, 6118, 3459, 3297, 6130, 3474, 
        3312}], Line3DBox[{3149, 3327, 6143, 3150, 3341, 6153, 3168, 3356, 
        6162, 3183, 6073, 3371, 3198, 6271, 3749, 3380, 3207, 3750, 6272, 
        3534, 3535, 3636, 3637, 3638, 3624, 6252, 3536, 3584, 3599, 3600, 
        6260, 3701, 3700, 3548, 3698, 3397, 6227, 3227, 3405, 6185, 3240, 
        3417, 6194, 3253, 6099, 3430, 3268, 6108, 3445, 3283, 6119, 3460, 
        3298, 6131, 3475, 3313}], 
       Line3DBox[{3151, 3328, 6144, 3152, 3342, 6154, 3169, 3357, 6163, 3184, 
        3372, 6170, 3199, 6221, 3520, 3521, 3522, 3667, 6214, 3484, 3723, 
        3485, 3602, 3537, 3611, 6216, 3491, 3585, 3492, 3612, 6238, 3568, 
        3549, 3699, 3550, 6228, 3228, 3406, 6186, 3241, 3418, 6195, 3254, 
        3431, 6201, 3269, 6109, 3446, 3284, 6120, 3461, 3299, 6132, 3476, 
        3314}], Line3DBox[{3153, 3329, 6145, 3154, 3343, 6155, 3170, 3358, 
        6164, 3185, 3373, 6171, 3200, 3523, 6175, 3524, 3525, 3668, 6215, 
        3486, 3724, 3487, 3654, 3648, 6257, 3659, 3493, 3586, 3494, 3613, 
        6239, 3569, 3552, 3553, 6229, 3229, 3407, 6187, 3242, 3419, 6196, 
        3255, 3432, 6202, 3270, 3447, 6207, 3285, 6121, 3462, 3300, 6133, 
        3477, 3315}], 
       Line3DBox[{3155, 3501, 3502, 6217, 3156, 3344, 6156, 3171, 3359, 6165, 
        3186, 3374, 6172, 3201, 3526, 6176, 3527, 3528, 3603, 6243, 3604, 
        3578, 3606, 3605, 3625, 6249, 3614, 3615, 3551, 3671, 3670, 6240, 
        3570, 3554, 3555, 6230, 3230, 3408, 6188, 3243, 3420, 6197, 3256, 
        3433, 6203, 3271, 3448, 6208, 3286, 3463, 6211, 3301, 6231, 3557, 
        3558, 3559}], 
       Line3DBox[{3302, 3464, 3556, 3287, 3449, 6110, 3272, 3434, 6100, 3257, 
        3421, 6092, 3244, 3409, 6086, 3231, 3398, 6082, 3219, 3390, 6081, 
        3213, 6177, 3385, 6080, 3208, 3381, 3708, 3746, 6268, 3745, 3202, 
        3375, 3744, 3644, 6074, 3479, 3187, 3360, 3702, 3643, 3478, 3172, 
        3345, 6061, 3503, 3157, 3330, 6057, 3128, 3316, 6055, 3500, 3560}], 
       Line3DBox[{3310, 3472, 6128, 3295, 3457, 6116, 3280, 3442, 6105, 3265, 
        3427, 6096, 3756, 3250, 3414, 6089, 3498, 3237, 3402, 6084, 3640, 
        3224, 3394, 6267, 3768, 3737, 3739, 3738, 3217, 6246, 3388, 3595, 
        3582, 3630, 6253, 3629, 3211, 3383, 3593, 3531, 3621, 6251, 3620, 
        3204, 3377, 3743, 3742, 6077, 3518, 3195, 3368, 6070, 3180, 3353, 
        6064, 3165, 3338, 6059, 3144, 3324, 6056, 
        3142}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
    VertexNormals->CompressedData["
1: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
NQaPnWTV5X0J3e0P/CT7wzRWLcvu9octg9z+MFj0u96Oc/icDdsJ87f3Tra5
s3ebt20F/p1VYiZgwVzqsf4RQ2wowmj3TQrD/KOe1fWjinIumCqNntX1Q6tP
Mftev8tz3WuPJyqVwP2pBrMcQj+D922nVhyuLe51+kP6V9/wnSw7D8nvpfrF
zPcMlZZyrwHVFw5jc1OLoWGm1ezKd4VwGKfUVe9Ff58/rRmT41VrxHhMwtrF
PZ4tn3J/ifJJ64PTKgf8vZjli0jtkhGpXRo3b1LNm0Ic6KpHaeJ5p0Y36EsH
oKZTvfBkGN/rr3D0hdMvP8dWQePmtL3LQpOBNmk/X3JMD9K+vshxYx5p3JiB
4GsY9AMcLPyJono83ng25f6osNnE9vxuLEdad85F4suI/e9iClfGaDf+W/97
YZidc/f4m+jER+No9kZm0yH/b7pPsgLB33gVMUwACxu25nxdU0UKs4E33xh7
v+nMz7fykNIlk42k9Oe+w7ulusfBLY9VbJ9J1ZDCeLrpJ4xyiFPPcQAdZYWn
sd32F53pdn/7xsVa2B90xmn/b/aNF4j6azzI9+VG09/bSHwJgl8FW0dOL8gG
qQdMqrbeo+r1/a3vI/lhRD87l9TPMpvOAcJxQE1KYv2VT3qcvD6PUd5Xz73d
Vr3q289qqLl27ftpOmnA4JjesLofH2BNhyfb42s4KIorPYovC6LEt1o+S2H/
dxwsuNLqEHYtkMJL1G75CBkbgR1VmTlRyPkRJt6L3J+eRYzzPYZtmcCOtwFZ
jhtmanfQb7e3YF5+526qgVeXJMic409EjX/8qF5GZWkZuBE9/Myh1Zlg5xll
u6cbqPucPFSPPStZ7g4zroyQ3dzUbV+Ft5NHSD53A3eEjh3yama+H2G2PZy6
admkcSvywDY1w4YGnzJSmNHr7971/DTKeJ6dGEaGdIVff7u8ofUX57rOiYKe
iPOhPtztUJZdXAKlHJ+a3ZuM7o+0cHjOJpedhUBzTDPv11llsMXWRerePer3
zb00WrvZpxiqTdKf63GzFKw7ZSf7hDcMjj+o/D5hSTH8tC05V929lK78d03n
2LUurBjaJ9XUORlQ8+PUwtr0E78fvHTo8jdrqZwdw16cTwqTgNqFI7svtlDf
C5rE7KkLKIAzc+KX+jWit/9jSeNGMll3+t/HjeT/nSbl8xoinx+6zi+AZqTz
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
dOcw
     "]], {
    {RGBColor[1, 1, 0], Point3DBox[CompressedData["
1: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

      "]]}, 
    {RGBColor[0, 0, 1], Point3DBox[CompressedData["
1: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
/wAT0XiE
      "]]}, 
    {RGBColor[0, 1, 0], Point3DBox[CompressedData["
1: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
      "]]}}},
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{360., 288.9688991631503},
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-4, 4}, {-5, 4}, {0., 1.}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{0.9205135632898441, -2.193270551116119, 2.406702945817421},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{
  3.753356086298505*^9},ImageCache->GraphicsData["CompressedBitmap", "\<\
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
hkBBcC/4/pHkSwx9fp8qOGsR9Zd4C0tlUGHLa1gZc+ctVgXeliExJ+n8n7cQ
VnmdylDTTEouGApptRA2PdomvI7YhsQW9DoTBJ6+++7vy2jS2oYQFslOW57b
aiYWeWIIpBNqJuZzxSZgJ92lXPCnLIH7bxxqTSMf7BlEo/YUm2tk2qybcRsP
EWzGrYYH5XiWxSyCN5cgGwwIvSE5qwNi9bPdacu9HWnb3Fa0jIEffkaexpzJ
7uLlZXpsQjW9u6KNPIny7eWt6abz2b3lyHTKWTzqrijTjgkt6Pur3PF3lreh
rTdV0SweOBhAM3jBZ6eeU6DTB1YGXhKqKzxAKtQGxNN/On/g2ObHQU5HQzOP
Rcrph+x2Pq/4Eow4BApmBnLBkHCekIyGK0edwI23TIaJhKo2GrCcM+AUGQUW
1AL8aTxCeHFbLqtdtExMsMSy3H5C3ABPO1/I8c/2QEbJrNfx57FDl+ryx7sE
rj1/JpUN0jQ9grmcV40O0otBvtx5MW7y0yxvHBRjYSwcJysFSWJchgJuP/HG
TzhJD3P4MjZjRrMz/KvkqD0cx7/PIOclGG/WScTB7KtooTqtBsOKOvDHvFuU
mp36V45lcOAyxWvbCJXNQPDajYcudMvObnTrbe3oYfZzXlrYinbOaUlrb6ik
Scz1SB4bS9n3eXhsNe1f0pr+9HxHen9dW7r5gu40+7wijfs69ykHDY+Oq6YD
evyDDW1pBxuRhewn3fy1PI1nw4PPYYz1aFu02EVqOGw36refpjO62Bu96wwz
FvLPv/HgKIbiCwaIJR+tAB6ZEJqR2AGuEsZGwR8bfsxQkNd8sM8yNeoziUNV
rcNDRoGzDW54lLzEJA5aXp3XNpFHc5SOfbEKUuxm1i1Bed7kfrI/tBS5eIJS
Aw2d46zVcCR2suH896xUhlCh0Wp6zk1vxtyxXPROCjcBNWVTnw1Jl0u3e3RT
4cMFQtTDD2NqWNYrAVmhHADHkuhJZctw5ljKm7dhnpA4R6mgKBQs9pSpdc91
p9VM9nfO6EKz2XtfO7SSHmXPfnd9K3ppUSu6Z3QV1TKl15/Cgfl3SrT15mpq
XNSaPnuiA32yuR3NvayzRAQjTs/TYg6Rt/Hx1xfz8R0d6F84fH6eR8rqIRVy
fPhpeRp2Wk7eDzi9kPJD9DF15wJ1xTyDP6XTJEXpl9H7/P/ziexZY3bTLp6F
k/UgZ42npc91455gyHMK+Wj2cuDpBIExtN8g5x/AmrddKimjhJubhK3KxPRS
LEWvloS/Ba8Zqzh5QXVORsZVP2wTCD2MQDqIE3Ie8paA0gSniwDyYc0pIzUn
3DoUTPA3xx9KD/hhGfIaH1s8impReJupU394/FGnJ+OXQd003DDjCXdGI+Pg
WT5ebukcJMs1GZ/0FKpimEEqubvK3IMNwqg4OkVJU0f96O5Xu9P+V7rS4W1d
aB/r8KYbq+iKb3SlKRdU0/rrK2n7tBa0Z1lr2r+yNT08uQUtvbIsfk8dx7H3
jaqi11j3/+W+dvSfj3eg9Td0oGkcD4PkeZeExzEi/usp9uYXu++fxvo/79sl
qme/aQX7UfOQONKgAPGvV0ay577g1P1/6r2rtLdRnf7b3/5Gb7zxBn344Yfg
vtBMCIznlhViyIchsKsnnXddCyCPRajPCvV5oX4uU26kX3T1SVgXbRgw28pz
qlqjYQsJlPusyHsunjUC7Skj36+VVnqxAYpTp7K7wbSndTdwtliAPZBsTOBt
XhXySWXnMWE2XVYyR/B8NJlfCOuqrf3EvSzwcPD9mJ+H/Rfe0z2YBCO5odhU
K8x24e+oSvD/i+rax2cB4GvObeiIqqoLio1yv4gaeXyH5XownTztbonxfHvj
+g8vy59eerlTqif942X2vVe2oQfGVNOki9rSlIvbCuOPT29Br9/Smg6tb0NP
wYdhtZ/KjEL5N42oopfntaKP7qyhPz/XiR6f3JZmDWxL09jHAeN34/j8VvRT
Po7A+J1b29CD46vp9mGVdC9biYcmVtMT/P1P8/defmlloO5+FcpX9/htcf4t
LL2jtOOhuQsWLKCJEyf6tCc9CK3o0R4Pep958WEauaKdCHwaryV19uc6716c
+KGM+lJXnXo+rtlV8lr0M0H+OPCCWYG/mUla0QkFGZ3zMrOxM2pZ4ttgiU9O
1jmmMkm5oL49YoFwfmB7GR3q/9vPO1+nEBQR3JSYkoDrTRgIcqP4Kp2QFQg8
xFwHSioT3uklrlGQSXKTDnW+QTr0fXJBpOv5MSl7wI09FPD4DV2dX1TyJF+9
nJS/Tx0iNw5SGb9+oPd98YjY7UYExkJWRwTt7kTvrW1Lj7LXvWxIK7rp4u60
cXgVPTGjBb2xojW9z1S/spj9HVbypVdyIMo+ywb28J+f25I+uL0tvoWend2O
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\
\>"]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Logistic", "Section",
 CellChangeTimes->{{3.753356127733214*^9, 3.753356131036563*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<FisherIris\>\""}], "}"}], 
     ",", "\"\<TrainingData\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testData", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<FisherIris\>\""}], "}"}], 
     ",", "\"\<TestData\>\""}], "]"}]}], ";"}]}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"labels", "=", 
  RowBox[{"Union", "[", 
   RowBox[{"Values", "[", "trainingData", "]"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"setosa\"\>", ",", "\<\"versicolor\"\>", 
   ",", "\<\"virginica\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.753358926067295*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "4"}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", "labels"}], "}"}], "]"}]}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"4"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"3"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[SoftmaxLayer, {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"3"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"3"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {3, 4}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {3}]]], "Parameters" -> 
             Association["Size" -> 3, "$InputSize" -> 4], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {4}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {3}]]], "2" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association["Size" -> 3], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {3}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {3}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "2", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {4}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Class", 
              Association[
              "Parameters" -> 
               Association[
                "Labels" -> {"setosa", "versicolor", "virginica"}, 
                 "Dimensions" -> 3], "Input" -> 
               NeuralNetworks`TensorT[1, {3}]]], 
             NeuralNetworks`TensorT[1, {3}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{253., {26., 31.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.753358927999784*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "trainingData"}], "]"}]}]], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"4"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"3"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[SoftmaxLayer, {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"3"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"3"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {3, 4}], "Biases" -> 
               NeuralNetworks`TensorT[1, {3}]], "Parameters" -> 
             Association["Size" -> 3, "$InputSize" -> 4], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {4}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {3}]]], "2" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association["Size" -> 3], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {3}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {3}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "2", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {4}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Class", 
              Association[
              "Parameters" -> 
               Association[
                "Labels" -> {"setosa", "versicolor", "virginica"}, 
                 "Dimensions" -> 3], "Input" -> 
               NeuralNetworks`TensorT[1, {3}]]], 
             NeuralNetworks`TensorT[1, {3}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{253., {26., 31.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.753358946046319*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:6df7\:6dc6\:77e9\:9635", "Subsection",
 CellChangeTimes->{3.753356207980493*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"cm", "=", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"net", ",", "testData"}], "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]], "Input"],

Cell[BoxData["0.9333333333333333`"], "Output",
 CellChangeTimes->{3.753358952137971*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{1., 1., 1.}, {0.9397109940319761, 0.8906277331969328, 
   0.7228981071084285}, {0.9440973118053764, 0.4755322889354221, 
   0.0027832384335231327`}}, {{1., 1., 1.}, {0.8881946236107527, 
   0.5310645778708442, 0.0055664768670462645`}, {0.9220717234748939, 
   0.8239734665798664, 0.5495246136144545}}, {{1., 0.42, 0.}, {1., 1., 1.}, {
   1., 1., 1.}}}, {{0, 0}, {3, 3}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["15", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "15", "\" examples of \"", "\"setosa\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{15, " examples of ", "setosa", " correctly classified"}], 
         Row[{"Precision = ", 1.}], 
         Row[{"Recall = ", 1.}], 
         Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"versicolor\"", 
             "\" misclassified as \"", "\"setosa\""}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          0, " example of ", "versicolor", " misclassified as ", "setosa"}], 
         Row[{"Row fraction = ", 0.}], 
         Row[{"Column fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"virginica\"", 
             "\" misclassified as \"", "\"setosa\""}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          0, " example of ", "virginica", " misclassified as ", "setosa"}], 
         Row[{"Row fraction = ", 0.}], 
         Row[{"Column fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"setosa\"", "\" misclassified as \"", 
             "\"versicolor\""}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          0, " example of ", "setosa", " misclassified as ", "versicolor"}], 
         Row[{"Row fraction = ", 0.}], 
         Row[{"Column fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["13", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "13", "\" examples of \"", "\"versicolor\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.8666666666666667`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9285714285714286`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.896551724137931`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{13, " examples of ", "versicolor", " correctly classified"}], 
         Row[{"Precision = ", 0.8666666666666667}], 
         Row[{"Recall = ", 0.9285714285714286}], 
         Row[{"FScore = ", 0.896551724137931}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"virginica\"", 
             "\" misclassified as \"", "\"versicolor\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.06666666666666667`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.07142857142857142`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          1, " example of ", "virginica", " misclassified as ", 
           "versicolor"}], 
         Row[{"Row fraction = ", 0.06666666666666667}], 
         Row[{"Column fraction = ", 0.07142857142857142}]}], "Tooltip"]& ]}, {
    
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"setosa\"", "\" misclassified as \"", 
             "\"virginica\""}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          0, " example of ", "setosa", " misclassified as ", "virginica"}], 
         Row[{"Row fraction = ", 0.}], 
         Row[{"Column fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["2", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "2", "\" examples of \"", "\"versicolor\"", 
             "\" misclassified as \"", "\"virginica\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.13333333333333333`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.125`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          2, " examples of ", "versicolor", " misclassified as ", 
           "virginica"}], 
         Row[{"Row fraction = ", 0.13333333333333333`}], 
         Row[{"Column fraction = ", 0.125}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["14", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "14", "\" examples of \"", "\"virginica\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9333333333333333`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.875`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.903225806451613`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{14, " examples of ", "virginica", " correctly classified"}], 
         Row[{"Precision = ", 0.9333333333333333}], 
         Row[{"Recall = ", 0.875}], 
         Row[{"FScore = ", 0.903225806451613}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "15", "\" example\"", "\"s\"", "\" of class \"", "\"setosa\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{15, " example", "s", " of class ", "setosa"}], 
        Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "15", "\" example\"", "\"s\"", "\" of class \"", "\"versicolor\""},
            "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.8666666666666667`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{15, " example", "s", " of class ", "versicolor"}], 
        Row[{"Precision = ", 0.8666666666666667}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "15", "\" example\"", "\"s\"", "\" of class \"", "\"virginica\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.9333333333333333`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{15, " example", "s", " of class ", "virginica"}], 
        Row[{"Precision = ", 0.9333333333333333}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "15", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"setosa\""}, "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{15, " example", "s", " classified as ", "setosa"}], 
        Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "14", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"versicolor\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9285714285714286`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{14, " example", "s", " classified as ", "versicolor"}], 
        Row[{"Recall = ", 0.9285714285714286}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "16", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"virginica\""}, "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.875`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{16, " example", "s", " classified as ", "virginica"}], 
        Row[{"Recall = ", 0.875}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{2.5, 
       FormBox[
        RotationBox["\"setosa\"", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"versicolor\"", BoxRotation -> 0.], TraditionalForm]}, {
      0.5, 
       FormBox[
        RotationBox["\"virginica\"", BoxRotation -> 0.], 
        TraditionalForm]}}, {{2.5, 
       FormBox["15", TraditionalForm]}, {1.5, 
       FormBox["15", TraditionalForm]}, {0.5, 
       FormBox["15", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["15", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["14", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["16", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"setosa\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"versicolor\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["\"virginica\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]}]], "Output",
 CellChangeTimes->{3.753358953253469*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:5e26\:6709\:7f3a\:5931\:81ea\:53d8\:91cf\:6570\:636e\:7684\:7f51\:7edc\
\:8bad\:7ec3", "Section",
 CellChangeTimes->{{3.7533563049514008`*^9, 3.753356326892412*^9}, 
   3.753356358003269*^9, {3.753358974837914*^9, 3.75335898154812*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<Titanic\>\""}], "}"}], 
     ",", "\"\<TrainingData\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testData", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<Titanic\>\""}], "}"}], 
     ",", "\"\<TestData\>\""}], "]"}]}], ";"}]}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"labels", "=", 
  RowBox[{"Union", "[", 
   RowBox[{"Values", "[", "trainingData", "]"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"died\"\>", ",", "\<\"survived\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7533589876450853`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"classValues", "=", 
  RowBox[{"DeleteDuplicates", "[", 
   RowBox[{"trainingData", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "1", ",", "1"}], "]"}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"genderValues", "=", 
  RowBox[{"DeleteDuplicates", "[", 
   RowBox[{"trainingData", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "1", ",", "3"}], "]"}], "]"}], "]"}]}]}], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"1st\"\>", ",", "\<\"2nd\"\>", ",", "\<\"3rd\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7533589898344097`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"female\"\>", ",", "\<\"male\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7533589898359528`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"encClass", "=", 
  RowBox[{"NetEncoder", "[", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Class\>\"", ",", "classValues", ",", " ", "\"\<UnitVector\>\""}], 
    "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"encGender", "=", 
  RowBox[{"NetEncoder", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Class\>\"", ",", "genderValues", ",", "\"\<UnitVector\>\""}],
     "}"}], "]"}]}]}], "Input"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              GridBox[{{
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["\"Class\"", "SummaryItem", StripOnInput -> False],
                   "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Labels\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{"\"1st\"", ",", "\"2nd\"", ",", "\"3rd\""}], 
                    "}"}], Short[#, 0.5]& ], "SummaryItem", StripOnInput -> 
                   False], "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"OutputForm\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                  "\"UnitVector\"", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Count\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["3", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              GridBox[{{
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["\"Class\"", "SummaryItem", StripOnInput -> False],
                   "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Labels\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{"\"1st\"", ",", "\"2nd\"", ",", "\"3rd\""}], 
                    "}"}], Short[#, 0.5]& ], "SummaryItem", StripOnInput -> 
                   False], "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"OutputForm\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                  "\"UnitVector\"", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Count\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["3", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.753358992286845*^9}],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              GridBox[{{
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["\"Class\"", "SummaryItem", StripOnInput -> False],
                   "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Labels\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{"\"female\"", ",", "\"male\""}], "}"}], 
                    Short[#, 0.5]& ], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"OutputForm\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                  "\"UnitVector\"", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Count\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["2", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              GridBox[{{
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["\"Class\"", "SummaryItem", StripOnInput -> False],
                   "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Labels\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{"\"female\"", ",", "\"male\""}], "}"}], 
                    Short[#, 0.5]& ], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"OutputForm\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                  "\"UnitVector\"", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Count\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["2", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.753358992320207*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"DeleteMissing", "[", 
    RowBox[{"trainingData", ",", "1", ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testData", "=", 
   RowBox[{"DeleteMissing", "[", 
    RowBox[{"testData", ",", "1", ",", "2"}], "]"}]}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"convertRow", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"c_", ",", "a_", ",", "s_"}], "}"}], "\[Rule]", "survived_"}], 
    "]"}], ":=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<class\>\"", "\[Rule]", " ", "c"}], ",", 
     RowBox[{"\"\<age\>\"", "\[Rule]", " ", "a"}], ",", 
     RowBox[{"\"\<sex\>\"", "\[Rule]", " ", "s"}], ",", 
     RowBox[{"\"\<survived\>\"", "\[Rule]", " ", "survived"}]}], "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trainingDataset", "=", 
   RowBox[{"Dataset", "[", 
    RowBox[{"convertRow", " ", "/@", "trainingData"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testDataset", "=", 
   RowBox[{"Dataset", "[", 
    RowBox[{"convertRow", "/@", "testData"}], "]"}]}], ";"}]}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"CatenateLayer", "[", "]"}], ",", 
      RowBox[{"DotPlusLayer", "[", "2", "]"}], ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"NetPort", "[", "\"\<class\>\"", "]"}], ",", 
         RowBox[{"NetPort", "[", "\"\<age\>\"", "]"}], ",", 
         RowBox[{"NetPort", "[", "\"\<sex\>\"", "]"}]}], "}"}], "\[Rule]", 
       "1"}], ",", 
      RowBox[{"1", "\[Rule]", 
       RowBox[{"2", "\[Rule]", 
        RowBox[{"3", "\[Rule]", 
         RowBox[{"NetPort", "[", "\"\<survived\>\"", "]"}]}]}]}]}], "}"}], 
    ",", 
    RowBox[{"\"\<class\>\"", "\[Rule]", " ", "encClass"}], ",", 
    RowBox[{"\"\<age\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
    RowBox[{"\"\<sex\>\"", "\[Rule]", " ", "encGender"}], ",", 
    RowBox[{"\"\<survived\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", "labels"}], "}"}], "]"}]}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       TagBox[
        DynamicModuleBox[{NeuralNetworks`NetGraph`PackagePrivate`selection$$ =
          None, NeuralNetworks`NetGraph`PackagePrivate`outIndex$$ = 6, 
         NeuralNetworks`NetGraph`PackagePrivate`inputs$$ = Association[
         "class" -> NeuralNetworks`EncodedType[
            NetEncoder["Class", 
             Association[
             "Parameters" -> 
              Association[
               "Labels" -> {"1st", "2nd", "3rd"}, "OutputForm" -> 
                "UnitVector", "Count" -> 3], "Output" -> 
              NeuralNetworks`TensorT[1, {3}]]], 
            NeuralNetworks`TensorT[1, {3}]], "age" -> 
          NeuralNetworks`EncodedType[
            NetEncoder["Scalar", 
             Association[
             "Parameters" -> Association[], "Output" -> 
              NeuralNetworks`TensorT[1, {1}]]], 
            NeuralNetworks`TensorT[1, {1}]], "sex" -> 
          NeuralNetworks`EncodedType[
            NetEncoder["Class", 
             Association[
             "Parameters" -> 
              Association[
               "Labels" -> {"female", "male"}, "OutputForm" -> "UnitVector", 
                "Count" -> 2], "Output" -> NeuralNetworks`TensorT[1, {2}]]], 
            NeuralNetworks`TensorT[1, {2}]]], 
         NeuralNetworks`NetGraph`PackagePrivate`outputs$$ = Association[
         "survived" -> NeuralNetworks`DecodedType[
            NetDecoder["Class", 
             Association[
             "Parameters" -> 
              Association[
               "Labels" -> {"died", "survived"}, "Dimensions" -> 2], "Input" -> 
              NeuralNetworks`TensorT[1, {2}]]], 
            NeuralNetworks`TensorT[1, {2}]]], 
         NeuralNetworks`NetGraph`PackagePrivate`labels$$ = {
         "class", "1", "age", "sex", "2", "3", "survived"}, 
         NeuralNetworks`NetGraph`PackagePrivate`vertices$$ = Association[
         "1" -> Association[
           "Type" -> "Catenate", "Arrays" -> Association[], "Parameters" -> 
            Association["$InputCount" -> 3, "$Rank" -> 1], "Inputs" -> 
            Association["Input" -> {
                NeuralNetworks`TensorT[1, {3}], 
                NeuralNetworks`TensorT[1, {1}], 
                NeuralNetworks`TensorT[1, {2}]}], "Outputs" -> 
            Association["Output" -> NeuralNetworks`TensorT[1, {6}]]], "2" -> 
          Association[
           "Type" -> "DotPlus", "Arrays" -> 
            Association[
             "Weights" -> NeuralNetworks`TensorT[2, {2, 6}], "Biases" -> 
              NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[1, {2}]]], "Parameters" -> 
            Association["Size" -> 2, "$InputSize" -> 6], "Inputs" -> 
            Association["Input" -> NeuralNetworks`TensorT[1, {6}]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`TensorT[1, {2}]]], "3" -> 
          Association[
           "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
            Association["Size" -> 2], "Inputs" -> 
            Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`TensorT[1, {2}]]]], 
         NeuralNetworks`NetGraph`PackagePrivate`vports$$ = {
          NetPort["Inputs", "class"], 
          NetPort["Vertices", "1"], 
          NetPort["Inputs", "age"], 
          NetPort["Inputs", "sex"], 
          NetPort["Vertices", "2"], 
          NetPort["Vertices", "3"], 
          NetPort["Outputs", "survived"]}}, 
         TagBox[GridBox[{
            {
             TemplateBox[{TagBox[
                GraphicsBox[{{
                   GrayLevel[0.7], {
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-4., 1.0000000000000002`}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-4., 2.0000000000000004`}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-3., 1.0000000000000002`}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999,
                     1.}}], 
                    
                    LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}}, {
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    0.6000000000000002}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    1.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000000002`}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.3999999999999999, 1.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                   GrayLevel[0], {
                    AbsolutePointSize[5], {{
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-4., 2.4492935982947064`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    RGBColor[0.9, 0., 0.], 
                    TagBox[
                    PointBox[{-3., 1.0000000000000002`}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-4., 1.0000000000000002`}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-4., 2.0000000000000004`}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.35], 
                    TagBox[
                    PointBox[{-2., 1.0000000000000002`}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    RGBColor[0.78, 0.64, 0.98], 
                    TagBox[
                    PointBox[{-0.9999999999999999, 1.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{6.123233995736766*^-17, 1.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}}}, {{
                    InsetBox[
                    FormBox["\"class\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{0, -5.5}, {-4., 2.4492935982947064`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-3., 1.0000000000000002`}], 
                    Offset[{0, -5.5}, {-3., 1.0000000000000002`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"age\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-4., 1.0000000000000002`}], 
                    Offset[{0, -5.5}, {-4., 1.0000000000000002`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"sex\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-4., 2.0000000000000004`}], 
                    Offset[{0, -5.5}, {-4., 2.0000000000000004`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-2., 1.0000000000000002`}], 
                    Offset[{0, -5.5}, {-2., 1.0000000000000002`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-0.9999999999999999, 1.}], 
                    Offset[{0, -5.5}, {-0.9999999999999999, 1.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"survived\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {6.123233995736766*^-17, 1.}], 
                    Offset[{0, -5.5}, {6.123233995736766*^-17, 1.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, 
                   StyleBox[{
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    Offset[{-3.889087296526011, 3.889087296526011}, {-3.4, 
                    0.6000000000000002}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071067811865475,
                     0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-3.4, 1.0000000000000002`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    
                    Offset[{3.8890872965260117`, 3.889087296526011}, {-3.4, 
                    1.4000000000000004`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067811865475, -0.7071067811865476}], 
                    InsetBox[
                    FormBox["\"6\"", TraditionalForm], 
                    
                    Offset[{0., 5.5}, {-2.4000000000000004`, 
                    1.0000000000000002`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -2.220446049250313*^-16}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {1., 0.}]}, 
                    FontColor -> GrayLevel[0.5], FontSize -> 8, FontWeight -> 
                    "Thin", StripOnInput -> False]}, 
                  
                  DynamicModuleBox[{
                   GeneralUtilities`Graphics`PackagePrivate`vpos$180518 = \
{{-4., 2.4492935982947064`*^-16}, {-3., 1.0000000000000002`}, {-4., 
                    1.0000000000000002`}, {-4., 2.0000000000000004`}, {-2., 
                    1.0000000000000002`}, {-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}}, 
                   DynamicBox[
                    Typeset`ToBoxes[
                    If[
                    Not[
                    IntegerQ[
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]], {}, {
                    AbsolutePointSize[10], 
                    Opacity[0.2, Black], 
                    Point[
                    Part[
                    GeneralUtilities`Graphics`PackagePrivate`vpos$180518, 
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]]}], 
                    StandardForm, Graphics], 
                    TrackedSymbols :> {
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$}], 
                   DynamicModuleValues :> {}]}, ImageSize -> {304., 148.5}, 
                 AspectRatio -> Full, PlotRangePadding -> 0, 
                 ImagePadding -> {{19.5, 28.5}, {15.5, 5}}, 
                 ImageMargins -> {{0, 0}, {15, 15}}, 
                 BaseStyle -> {TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                
                
                EventHandlerTag[{
                 "MouseClicked" :> (
                   NeuralNetworks`NetGraph`PackagePrivate`selection$$ = None),
                   Method -> "Preemptive", PassEventsDown -> Automatic, 
                  PassEventsUp -> True}]],FormBox[
                TemplateBox[{
                  StyleBox["CatenateLayer", 
                   GrayLevel[0.35], StripOnInput -> False], 
                  StyleBox["DotPlusLayer", 
                   GrayLevel[0.35], StripOnInput -> False], 
                  StyleBox["SoftmaxLayer", 
                   GrayLevel[0.35], StripOnInput -> False]}, "PointLegend", 
                 DisplayFunction -> (FormBox[
                   StyleBox[
                    StyleBox[
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.9, 0., 0.]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.9, 0., 0.]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #}, "RowDefault"], 
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.78, 0.64, 0.98]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.78, 0.64, 0.98]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #3}, "RowDefault"]}, {
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.35]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.35]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #2}, "RowDefault"], "\"\""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], Alignment -> Left, AppearanceElements -> None, 
                    ImageMargins -> {{2, 2}, {2, 2}}, ImageSizeAction -> 
                    "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
                    FontFamily -> "Arial"}, Background -> Automatic, 
                    StripOnInput -> False], TraditionalForm]& ), 
                 InterpretationFunction :> (RowBox[{"PointLegend", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.9, 0., 0.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0.6000000000000001, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.9, 0., 0.]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.9, 0., 0.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.9, 0., 0.], Editable -> False, Selectable -> 
                    False], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.35], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.23333333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "GrayLevel[0.35]"], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.35]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.35], Editable -> False, Selectable -> False], 
                    "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.78, 0.64, 0.98], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.52, 0.4266666666666667, 0.6533333333333333], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.78, 0.64, 0.98]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.78, 0.64, 0.98]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.78, 0.64, 0.98], Editable -> False, Selectable -> 
                    False], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "12"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", "2"}], ",", 
                    
                    RowBox[{
                    "LegendLayout", "\[Rule]", 
                    "GeneralUtilities`Graphics`PackagePrivate`legendTable"}]}]\
, "]"}]& ), Editable -> True], TraditionalForm]},
              "Legended",
              DisplayFunction->(GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> Automatic, 
                BaselinePosition -> {1, 1}]& ),
              Editable->True,
              InterpretationFunction->(RowBox[{"Legended", "[", 
                 RowBox[{#, ",", 
                   RowBox[{"Placed", "[", 
                    RowBox[{#2, ",", "Below"}], "]"}]}], "]"}]& )]},
            {
             DynamicBox[ToBoxes[
               If[
                IntegerQ[NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                
                Item[
                 NeuralNetworks`NetGraph`PackagePrivate`vportInfo[
                  Part[
                  NeuralNetworks`NetGraph`PackagePrivate`vports$$, 
                   NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                  NeuralNetworks`NetGraph`PackagePrivate`inputs$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`outputs$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`vertices$$], 
                 Alignment -> Center], 
                Item["", ItemSize -> {0, 0}]], StandardForm],
              ImageSizeCache->{0., {0., 6.}},
              
              TrackedSymbols:>{
               NeuralNetworks`NetGraph`PackagePrivate`selection$$}]}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"],
         DynamicModuleValues:>{},
         Initialization:>{NetGraph}],
        Deploy,
        DefaultBaseStyle->"Deploy"],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.753358997746163*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "trainingDataset", ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "400"}], ",", 
    RowBox[{"BatchSize", "\[Rule]", "256"}]}], "]"}]}]], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       TagBox[
        DynamicModuleBox[{NeuralNetworks`NetGraph`PackagePrivate`selection$$ =
          None, NeuralNetworks`NetGraph`PackagePrivate`outIndex$$ = 6, 
         NeuralNetworks`NetGraph`PackagePrivate`inputs$$ = Association[
         "class" -> NeuralNetworks`EncodedType[
            NetEncoder["Class", 
             Association[
             "Parameters" -> 
              Association[
               "Labels" -> {"1st", "2nd", "3rd"}, "OutputForm" -> 
                "UnitVector", "Count" -> 3], "Output" -> 
              NeuralNetworks`TensorT[1, {3}]]], 
            NeuralNetworks`TensorT[1, {3}]], "age" -> 
          NeuralNetworks`EncodedType[
            NetEncoder["Scalar", 
             Association[
             "Parameters" -> Association[], "Output" -> 
              NeuralNetworks`TensorT[1, {1}]]], 
            NeuralNetworks`TensorT[1, {1}]], "sex" -> 
          NeuralNetworks`EncodedType[
            NetEncoder["Class", 
             Association[
             "Parameters" -> 
              Association[
               "Labels" -> {"female", "male"}, "OutputForm" -> "UnitVector", 
                "Count" -> 2], "Output" -> NeuralNetworks`TensorT[1, {2}]]], 
            NeuralNetworks`TensorT[1, {2}]]], 
         NeuralNetworks`NetGraph`PackagePrivate`outputs$$ = Association[
         "survived" -> NeuralNetworks`DecodedType[
            NetDecoder["Class", 
             Association[
             "Parameters" -> 
              Association[
               "Labels" -> {"died", "survived"}, "Dimensions" -> 2], "Input" -> 
              NeuralNetworks`TensorT[1, {2}]]], 
            NeuralNetworks`TensorT[1, {2}]]], 
         NeuralNetworks`NetGraph`PackagePrivate`labels$$ = {
         "class", "1", "age", "sex", "2", "3", "survived"}, 
         NeuralNetworks`NetGraph`PackagePrivate`vertices$$ = Association[
         "1" -> Association[
           "Type" -> "Catenate", "Arrays" -> Association[], "Parameters" -> 
            Association["$InputCount" -> 3, "$Rank" -> 1], "Inputs" -> 
            Association["Input" -> {
                NeuralNetworks`TensorT[1, {3}], 
                NeuralNetworks`TensorT[1, {1}], 
                NeuralNetworks`TensorT[1, {2}]}], "Outputs" -> 
            Association["Output" -> NeuralNetworks`TensorT[1, {6}]]], "2" -> 
          Association[
           "Type" -> "DotPlus", "Arrays" -> 
            Association[
             "Weights" -> NeuralNetworks`TensorT[2, {2, 6}], "Biases" -> 
              NeuralNetworks`TensorT[1, {2}]], "Parameters" -> 
            Association["Size" -> 2, "$InputSize" -> 6], "Inputs" -> 
            Association["Input" -> NeuralNetworks`TensorT[1, {6}]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`TensorT[1, {2}]]], "3" -> 
          Association[
           "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
            Association["Size" -> 2], "Inputs" -> 
            Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`TensorT[1, {2}]]]], 
         NeuralNetworks`NetGraph`PackagePrivate`vports$$ = {
          NetPort["Inputs", "class"], 
          NetPort["Vertices", "1"], 
          NetPort["Inputs", "age"], 
          NetPort["Inputs", "sex"], 
          NetPort["Vertices", "2"], 
          NetPort["Vertices", "3"], 
          NetPort["Outputs", "survived"]}}, 
         TagBox[GridBox[{
            {
             TemplateBox[{TagBox[
                GraphicsBox[{{
                   GrayLevel[0.7], {
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-4., 1.0000000000000002`}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-4., 2.0000000000000004`}, {-3., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-3., 1.0000000000000002`}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999,
                     1.}}], 
                    
                    LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}}, {
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    0.6000000000000002}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    1.4000000000000004`}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000000002`}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.3999999999999999, 1.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                   GrayLevel[0], {
                    AbsolutePointSize[5], {{
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-4., 2.4492935982947064`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    RGBColor[0.9, 0., 0.], 
                    TagBox[
                    PointBox[{-3., 1.0000000000000002`}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-4., 1.0000000000000002`}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-4., 2.0000000000000004`}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.35], 
                    TagBox[
                    PointBox[{-2., 1.0000000000000002`}], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    RGBColor[0.78, 0.64, 0.98], 
                    TagBox[
                    PointBox[{-0.9999999999999999, 1.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{6.123233995736766*^-17, 1.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}}}, {{
                    InsetBox[
                    FormBox["\"class\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{0, -5.5}, {-4., 2.4492935982947064`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-3., 1.0000000000000002`}], 
                    Offset[{0, -5.5}, {-3., 1.0000000000000002`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"age\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-4., 1.0000000000000002`}], 
                    Offset[{0, -5.5}, {-4., 1.0000000000000002`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"sex\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-4., 2.0000000000000004`}], 
                    Offset[{0, -5.5}, {-4., 2.0000000000000004`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-2., 1.0000000000000002`}], 
                    Offset[{0, -5.5}, {-2., 1.0000000000000002`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-0.9999999999999999, 1.}], 
                    Offset[{0, -5.5}, {-0.9999999999999999, 1.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"survived\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {6.123233995736766*^-17, 1.}], 
                    Offset[{0, -5.5}, {6.123233995736766*^-17, 1.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, 
                   StyleBox[{
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 3.889087296526011}, {-3.4, 
                    0.6000000000000002}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071067811865475,
                     0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-3.4, 1.0000000000000002`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    
                    Offset[{3.8890872965260117`, 3.889087296526011}, {-3.4, 
                    1.4000000000000004`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067811865475, -0.7071067811865476}], 
                    InsetBox[
                    FormBox["\"6\"", TraditionalForm], 
                    
                    Offset[{0., 5.5}, {-2.4000000000000004`, 
                    1.0000000000000002`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -2.220446049250313*^-16}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {1., 0.}]}, 
                    FontColor -> GrayLevel[0.5], FontSize -> 8, FontWeight -> 
                    "Thin", StripOnInput -> False]}, 
                  
                  DynamicModuleBox[{
                   GeneralUtilities`Graphics`PackagePrivate`vpos$180605 = \
{{-4., 2.4492935982947064`*^-16}, {-3., 1.0000000000000002`}, {-4., 
                    1.0000000000000002`}, {-4., 2.0000000000000004`}, {-2., 
                    1.0000000000000002`}, {-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}}, 
                   DynamicBox[
                    Typeset`ToBoxes[
                    If[
                    Not[
                    IntegerQ[
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]], {}, {
                    AbsolutePointSize[10], 
                    Opacity[0.2, Black], 
                    Point[
                    Part[
                    GeneralUtilities`Graphics`PackagePrivate`vpos$180605, 
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]]}], 
                    StandardForm, Graphics], 
                    TrackedSymbols :> {
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$}], 
                   DynamicModuleValues :> {}]}, ImageSize -> {304., 148.5}, 
                 AspectRatio -> Full, PlotRangePadding -> 0, 
                 ImagePadding -> {{19.5, 28.5}, {15.5, 5}}, 
                 ImageMargins -> {{0, 0}, {15, 15}}, 
                 BaseStyle -> {TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                
                
                EventHandlerTag[{
                 "MouseClicked" :> (
                   NeuralNetworks`NetGraph`PackagePrivate`selection$$ = None),
                   Method -> "Preemptive", PassEventsDown -> Automatic, 
                  PassEventsUp -> True}]],FormBox[
                TemplateBox[{
                  StyleBox["CatenateLayer", 
                   GrayLevel[0.35], StripOnInput -> False], 
                  StyleBox["DotPlusLayer", 
                   GrayLevel[0.35], StripOnInput -> False], 
                  StyleBox["SoftmaxLayer", 
                   GrayLevel[0.35], StripOnInput -> False]}, "PointLegend", 
                 DisplayFunction -> (FormBox[
                   StyleBox[
                    StyleBox[
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.9, 0., 0.]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.9, 0., 0.]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #}, "RowDefault"], 
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.78, 0.64, 0.98]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.78, 0.64, 0.98]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #3}, "RowDefault"]}, {
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.35]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.35]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #2}, "RowDefault"], "\"\""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], Alignment -> Left, AppearanceElements -> None, 
                    ImageMargins -> {{2, 2}, {2, 2}}, ImageSizeAction -> 
                    "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
                    FontFamily -> "Arial"}, Background -> Automatic, 
                    StripOnInput -> False], TraditionalForm]& ), 
                 InterpretationFunction :> (RowBox[{"PointLegend", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.9, 0., 0.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0.6000000000000001, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.9, 0., 0.]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.9, 0., 0.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.9, 0., 0.], Editable -> False, Selectable -> 
                    False], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.35], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.23333333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "GrayLevel[0.35]"], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.35]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.35], Editable -> False, Selectable -> False], 
                    "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.78, 0.64, 0.98], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.52, 0.4266666666666667, 0.6533333333333333], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.78, 0.64, 0.98]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.78, 0.64, 0.98]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.78, 0.64, 0.98], Editable -> False, Selectable -> 
                    False], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "12"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", "2"}], ",", 
                    
                    RowBox[{
                    "LegendLayout", "\[Rule]", 
                    "GeneralUtilities`Graphics`PackagePrivate`legendTable"}]}]\
, "]"}]& ), Editable -> True], TraditionalForm]},
              "Legended",
              DisplayFunction->(GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> Automatic, 
                BaselinePosition -> {1, 1}]& ),
              Editable->True,
              InterpretationFunction->(RowBox[{"Legended", "[", 
                 RowBox[{#, ",", 
                   RowBox[{"Placed", "[", 
                    RowBox[{#2, ",", "Below"}], "]"}]}], "]"}]& )]},
            {
             DynamicBox[ToBoxes[
               If[
                IntegerQ[NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                
                Item[
                 NeuralNetworks`NetGraph`PackagePrivate`vportInfo[
                  Part[
                  NeuralNetworks`NetGraph`PackagePrivate`vports$$, 
                   NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                  NeuralNetworks`NetGraph`PackagePrivate`inputs$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`outputs$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`vertices$$], 
                 Alignment -> Center], 
                Item["", ItemSize -> {0, 0}]], StandardForm],
              ImageSizeCache->{0., {0., 6.}},
              
              TrackedSymbols:>{
               NeuralNetworks`NetGraph`PackagePrivate`selection$$}]}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"],
         DynamicModuleValues:>{},
         Initialization:>{NetGraph}],
        Deploy,
        DefaultBaseStyle->"Deploy"],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.753359001434884*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"p", "[", 
    RowBox[{"class_", ",", "age_", ",", "sex_"}], "]"}], ":=", 
   RowBox[{"net", "[", 
    RowBox[{
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<class\>\"", "->", "class"}], ",", 
       RowBox[{"\"\<age\>\"", "->", "age"}], ",", 
       RowBox[{"\"\<sex\>\"", "->", "sex"}]}], "|>"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Probabilities\>\"", ",", "\"\<survived\>\""}], "}"}]}], 
    "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"p", "[", 
      RowBox[{"\"\<1st\>\"", ",", "x", ",", "\"\<female\>\""}], "]"}], ",", 
     RowBox[{"p", "[", 
      RowBox[{"\"\<3rd\>\"", ",", "x", ",", "\"\<female\>\""}], "]"}], ",", 
     RowBox[{"p", "[", 
      RowBox[{"\"\<1st\>\"", ",", "x", ",", "\"\<male\>\""}], "]"}], ",", 
     RowBox[{"p", "[", 
      RowBox[{"\"\<3rd\>\"", ",", "x", ",", "\"\<male\>\""}], "]"}]}], "}"}], 
   ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "100"}], "}"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<female, 1st class\>\"", ",", " ", "\"\<female, 3rd class\>\"", ",", 
      " ", "\"\<male, 1st class\>\"", ",", " ", "\"\<male, 3rd class\>\""}], 
     "}"}]}], ",", " ", 
   RowBox[{"Frame", "\[Rule]", "True"}], ",", 
   RowBox[{"FrameLabel", "\[Rule]", " ", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Age (years)\>\"", ",", " ", "\"\<Survival probability\>\""}], 
     "}"}]}]}], "]"}]], "Input"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{{}, {}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJwl0HlQE3cUB/BgFdQpU7SK4DAYKa0mY4cAaSoovgjlMoQjxQo6aAqFBBDk
rEcRo1aUQjm82g6CZAziMQMKUooMhVABCVJsijMVbAmdTbKbYG1RjIKB7r79
Y2f3M+/9vu/tb33yAVnqIg6HI6Uf5u1Vab9S56ndRn9yOz+yQvtS3ros5WWg
rdpHW3uoSbNR2czY8BbtfkGuwlHZzVgeJbTC/XJ9xIxiBP2nnxUGA092TCkm
GHPmfaygqx7PJRXPGIu38K2wo8sp2qRYwDyNpxWGnUXLFie5iGnXi5ZYIbgy
tKcxxo1xj+tTC6T6zDr7OnMZc1c9soCUl/qfa7g3Y476rgVaRo8WDm7eyFhe
pbbAlpX85sXHNjFWzZ2ygGLubG1DggDrRzIscKDf7N8s9cN5ObEW+Ga34/v2
/ULG4kF/C6QMfJXmqxThfI2bBbRO7nGZiZvx/HU7Bb4rVBepgkDc59UEBfLn
QZui92/F+sQvFKjr+jxs327D/DcaClorAsf1MjHmBZZQUHA3KLY2ajtjw4Z0
Crp1DdOle4Kx7hdJQXp4QFd6Qgibz6fg0jXftsyMT7B/YBkF1c+7juccDMV+
LUmC6Ubhl8q8MLyPikES7oWd/f7EiXDslzSS4BAz9nelKgL3oUpI4Gz/0aH+
cCTm69JIOLPGJtWf3oH9p0JIyNmd0ms7KcG8AC8SJo8Lv4ALUTjvjt0Mq879
MFaqluJ9ZT82w1UX/uGBmmg8L2o3gzZvXeiGmzF4H63VZqjj1nsExcfiPGm2
GbqKZjnKh2hVkMQM6yVOb97bFYfzRrzNcGeEV/Z4lPV5jhnK++cF3CQZ9pN/
mOBcPpUhf4LmqlpNULTa8x2vxE+xv6jCBNd5S3QFBtYzqSZwfOHgrt0bj/ve
BxM0Cm4X15nR8uWuJuAl34i2Z+1E354ywnhkR8tOK+uhPiPorxz5EPI/w/kh
NUZ41Rq31Wsa3ROUb4SFn/LaSrJ3YX6bxAgSQVho0Qyae4xrhIEkn/TM/AQ8
b7ARsDJF2VlbiObyae9Vqp0fHkTLC14S8DLv3RZhEVtfOkOA9xnbrP1rtu4z
TYCqpbu86iKbd3SKgECn2FttHWjO6kkCSt4uXUR2onuSDAT8tqI3fu3PbH/j
BAFKD+Hr4l60IeAvAr7zdQuOGGLn7Rsn4MUew+9jT1g3PiJA/Ln7B84T7Pln
owSUpckOwSSbH0DbK/eeh8bI7jekJyCu5Fpq1j/o+qcjBFwqm2y//C/bL6JN
Vq1drp9m5xf/Sv9PTXmTyIYWuwwT8KC+j5P+ms1LfEDAmqvzspo5Nk89REDy
zY8bhu3sPlYdAU23cmwLC6z9af8PGcvjuA==
         "]]}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJwl0HswXHcUB/BlhLaTbZFKyJgQVc2m6WQ3NZpKOEix8Vh2SUmEbim7Xs16
RaIqK2klShHSRMdrJRZlBqGaigprhESbRjQzpvywz4tJJm2RbuMRdc/94869
nznnfM/v/nbHnhLFm7JYrODNh347la7fqN2l8tz8FEMTBbde4TikSuuAdksj
BaozbQ17pO20FTabHuamScyl/bQHnjRQcK94nP9c8hB97ToF990v9DyVzKKf
1VAwenkqbV7yF85XXqEgoM9CQEk2MJ/kU/CA7faqWbSl16YdlyIp8Cn1HWgK
saUtTjhAQfz+FTaP7Yh1/lYKgjnx/2z3d6atqNAaoPPxl1n3D+6hLQ/rNcAh
673tZuf20WbJygwgWS2vUUZyMW813gCnhufebw8+gPPbPA3wzQnzt9dTXHE+
x9oAcSNfJPCkbrTVOQt6UFnYCZOPH8R5M5UeeFbyqwuZ7rS9Hl3Rg3jJY58g
5TDuEyTrob72rr3xW0887xZPPXSVuE+Ni7xoD/Ct9JB52yO0Jsgb80RzOugf
VS4WRvlgXkmPDhL9P+xLjDyC9eoSHVQ387qTkz7C/IlPdHB5qS9flu2LeR08
HVAtWael6X54fpm5Dob8yivPn/dHR0xowSRkUlsq5+M8r1ULLO+fTBRnj2J+
/zktXNphDB6/GIDOCNWC7ETcoPFCIPa/66wFTb7rZ/BdENbNlzXwZsX3k4X1
wXg/dUMaaLTce3akSoD3GVSpAVW6g+87rSFYd5BqoNZRYe8RHorzloc00Je7
wpKOoQfGXtfA7kCLtbcihOhfZtTw40NO0Z+P0eKxm2ooHn7JdYwW4X1a5auh
ImMhSUzQrK/D1JBrs+sNp+NhuH/CRQ0/cLaMZqrRjneezoL5somdKiYc60fK
Z6GJezOvdg4tB+4scGJbBOupx3C/zdgMTB3t6Tz2BK3IOD0D4zdy3oOMj7H/
pM0M/NclPOy0iBZP3p6GjZ/Tuws+j8B+79hpCOT6+eY+R6uFptMwEr0/MTkj
Es+z1kzAOk7aW5OFlqc0EYiR1rPHstEDM0oC/6Zv63TNZay6TsD5knFl/SvG
F6sJyDv7i8uuor22lxFwtwjt6O5h6q7ZBAq2FprO96LVyiwCj6wGw3feQSts
MwlI7V1f5A0y/WsyAtd4tj78XxkPJxFYjlL/MUmY/ogYAl6f2rmwZ5m8eycJ
FCWIzoAGzfKMIuCUNmTfYGD+xymSgLCgOT71GZO3ICRQXaS5Vfc30x8dSmC+
bOdr44to8e+Czf+pKm5zMzL30xVI4DfFXVbiC2a/SwCBHY0vRVWrzHwln0Bs
6wfKB+vMPNufQFuHzLixwZwvz5fA/xN72j4=
         "]]}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJwt0HtQVFUcB/CLY2AJJfZQHAYXhGKNki2GjITfQvFQ5LViIgwO8tpdkYQF
EgTpqs0KQSA4YYYgjKCGDhBGCoaweC6wCyv7gk1wcjERnMSU1woGxP5uf9y5
9zPfc37ne6597CFBwgqKooKWH9PboXjhQqWdzGv50/Bhvx6ur+JuTBadh2XT
fyr1IMusr3EWNZjMKerTQ5drqtBc1I75hFwPPYWagBlhP/oq0YPc40TLE+F9
k/kurXpQlAynjgv/wf28Wj3saLMIfiRcwlyQrQellfurK6PX8JcdM8PRg0+x
b8elkPUmG+yUg5CwZd6KZ8UxmSPJHoQgbsLzd/wdcb1k0yA06Y5myLc6m8wf
VQ/AZ2s3N6z8xsXkKu6RARC+LK2ojXDFvMlxAA51jX3cEPSRyXTZgA6+izR3
Wjjohnk2rYO47uxEnsgd3cjTgczCJixp71a09agWeNZ02eN0D+xTU6qFmClP
l+CD20zuEPlpobqSsTV+72UyJZ3WwLUij2GNgI/3Ga/RQHqrZ2jFTm/sFxWl
gXZF7WR+lA/2ibTUgNj/0zZxxOfoiNtqOHeZ15x04AtcvzpDDSVTbcdSDvti
vuSshkd1GV+LJH7Yp/eBCohf6Y/Hj/tjn6NnVGAWMvSgmA7A82fDVEB5/2ZW
lbUd75P3ugry1hmDNCd3YJ5Y2A8pkXGdxhOBOH/WvB9GjrnFww87MV+VeQfe
On12KL86CC2ZUMLFNZuzusuD0a3JSpBJNvq+dyUE+0487INKTpWtZ3go9tEl
9kFbzjwlUqHp5ie9YB9o8e+mPWH4v0bEvfBrP7fgrg5N73+ugMKuRVdOtADn
Z6Uo4HTa4wMx91j/PieHnLft3nDYuws9IJXDz9xXFOkGdMzD1XIwnzazke0L
x/Nbf+qBS66/5FaOoSmtfQ9wY+uCF5J34/8wXO2G4e0tTbv/RtO7vLtBc+HI
B5D2Jd4n9k4XvLgWts1hEk3VxXfB0g1Js/SrPbg/Z5GBQFc/35wZNOVXwkB3
9BZxUloEnv+XCwNr40Q3KzLQtNP7DOwTVVupDqOrxFwGZiVvNrnloDnPnBhw
zDPOL3yLjlm0Y4Buai88Vcbud7BmwMMitLG5hZ2fO0NAapm/Yvwmu59MEVBb
d4ZvuMXacpKAyNZtLrcTbTj7lMAZ3nqfgF7WN8YITEcZtEP30PwXdwnw99u8
a3WfPQ/+IFCQKMiEETYvGCTgkEpsa0bZ/rZaAmHSywnJT1l79RE4VzBy/fwz
NJWvIDB+asNrmkl2nrqHAF1eWO9uZNfHMwT6qhhKPMfmDbcJrLu4KCh/+X8f
GYHYK5/UKhfY3LeDQH1jinFpiXXRLQL/AY4d4nk=
         "]]}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.922526, 0.385626, 0.209179], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJwl0ntMU3cUB/BilE4zNmUqYojWiihGJ2yEOQaeguOhWB4dTsQBFcQWEeU5
ZaCrsqEMFASnEKC2QQRxKcKPUsqrD9rCRQlS+EcgEbaImJExEe1AK+Oe+0dz
+8n5fc85v5u7Je6sIGEZi8XiL/3oJ7fIWi3dpNu39JeTPESB6iPXzcniO7Bk
XtUgBbrzirs7xA20x/sHKDC5pYpsxRrass8fU9BbaA56IxrA+isDBZRXrnpa
9Iw2J6eFgr4bo6lTohnakupyCg52skMmRYu0tV5CCvrtPFcuj17No/t98rwX
/Ir8tbWhG2hLatN7IWHPgp27HYe2dmFFL/BdE16tD3SmzWoo7oGm4QuZ1N4d
tHmUcw98Y7+zYfnPuzBf1GgC0buSqppINzy/3c8EZ00vvmzgf4HuHjXCb1G2
26ynPTAff8YI8T3ZJ93FnlgfXmkEHdsxPOnoXnRjnQHc10huvczwQk/yDCB8
7bMr5LQ35q9NdINcanSyXNuH8wezu4Fc9xo1C3joUsduyGjzCas65Iv3TdDo
QdNXM5t/zI+20CVWD4mBX3cmRu6nzTHa6qGyzl2ZdOpb9M06Hdx43Xkp5Zw/
zlPwdTBZn/mjOC2A9rj/ghYMASVlly8H4vlIuRZsQkf+LJIEodWhWmD5ttjI
sg7g/jY2WrjqYOGbrxzEvEOUBlKi4vWW3GD0Wm0XTFzyOAG/H8J9Vzl1wdrS
8pF8OR/rf13ohHurd2b1VITg/jPTHaBL2+y//UEo7pct6AApR+bkExGG88cM
7dCZs8ASP0EL473bYUsw+/3WI+H4fqbr26B5wLXg6TCaJd/WBoWmD26caAG6
7bYaStNfnhKOoWV169SQs27Tp9yj32H/2LJWuO+6oi9jHM2btW8F2zkbR11M
BH4/zWUqqHVrvCh9gZaQ9SpwjasPsSYfxnx+eQuMHlA3Hf4bLZlxaQFz9U+7
If177Gf9Qwn/kXBv7ixaEuKjhMXWNGXemSOY7x9shmC3AP+cN2hWTGwz9ETv
SUxKj8T5FW8J2MeL26sy0bxHcwRixHK7J+fQ4+9nCbxN+6zJIwctiZkh4HzV
smD9hclvnSIgadIUFt9i6qqnBLzYYQ+VasbzHQTyPs5fNtWOlu1uJzC4Rh+x
sQvNOaEmIHbymL+oRwsHlARuu2/wC3rEzL+vIDB3bHxoZIyZd1xGgHfc0cXu
GZMvkxIoOCk4DxNMfqiSADfV4HT3OeP95QTC8+oSkv9h+nFLCFQWTKju/Mv0
+6GYwFTxxlXmWcY3ry/dp6JQ4Wlh+rMLCDyWGVmJ88x9fPMJONz7IKh4x/TL
ukIg7sFXNf1W5rzqVwKKhymWxUWmPpNL4H/KK9bk
         "]]}}}, {}, {}}, {
    DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
     AxesOrigin -> {0, 0}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, DisplayFunction -> Identity, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> All, 
     DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{
        FormBox["\"Survival probability\"", TraditionalForm], None}, {
        FormBox["\"Age (years)\"", TraditionalForm], None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
       AbsolutePointSize[6], "ScalingFunctions" -> None, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
            Part[#, 1]], 
           (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
            Part[#, 1]], 
           (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0, 100}, {0., 0.8503089547157288}}, PlotRangeClipping -> 
     True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{
      "\"female, 1st class\"", "\"female, 3rd class\"", "\"male, 1st class\"",
        "\"male, 3rd class\""}, "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.6150173333333333, 0.25708400000000003`, 
                    0.13945266666666667`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.922526, 0.385626, 0.209179]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.922526, 0.385626, 0.209179]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.922526, 0.385626, 0.209179], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.753359007766157*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:4e00\:7ef4\:6d41\:5f62\:7684\:5b66\:4e60, \:8c6a\:592b\:66fc\:7f16\
\:7801", "Section",
 CellChangeTimes->{{3.753356885650607*^9, 3.753356892441575*^9}, {
  3.753357199686509*^9, 3.753357224222355*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"manifold", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"AngleVector", "[", 
       RowBox[{"{", 
        RowBox[{"x", ",", 
         RowBox[{"0.9", "Pi", " ", "x"}]}], "}"}], "]"}], "+", 
      RowBox[{
       RowBox[{"x", "/", "20"}], "*", 
       RowBox[{"RandomVariate", "[", 
        RowBox[{
         RowBox[{"NormalDistribution", "[", "]"}], ",", "2"}], "]"}]}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "1", ",", "0.001"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"plot", "=", 
  RowBox[{"ListPlot", "[", 
   RowBox[{"manifold", ",", 
    RowBox[{"PlotStyle", "\[Rule]", "Orange"}]}], "]"}]}]}], "Input"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[1, 0.5, 0], PointSize[0.004583333333333334], AbsoluteThickness[
     1.6], PointBox[CompressedData["
1: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
      
      "]]}, {}}, {}, {}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1.050191838276312, 
   0.2358477917652017}, {-0.00030141568614634235`, 0.7528387197038202}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.753359012298172*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"25", ",", "Ramp", ",", "1", ",", "25", ",", "Ramp", ",", "2"}], 
     "}"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "2"}]}], "]"}]}]], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"25"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"25"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["4", 
              GrayLevel[0.5]], {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"25"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "4"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["5", 
              GrayLevel[0.5]], {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "5"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"25"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "5"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["6", 
              GrayLevel[0.5]], {"Layers", "6"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "6"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "6"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Outputs", "Output"}, "Mouse"], 
            "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {25, 2}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {25}]]], "Parameters" -> 
             Association["Size" -> 25, "$InputSize" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {25}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Ramp, "$Dimensions" -> {25}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {25}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {25}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 25}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {1}]]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 25], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {25}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]], "4" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {25, 1}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {25}]]], "Parameters" -> 
             Association["Size" -> 25, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {25}]]], "5" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Ramp, "$Dimensions" -> {25}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {25}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {25}]]], "6" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {2, 25}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {2}]]], "Parameters" -> 
             Association["Size" -> 2, "$InputSize" -> 25], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {25}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Layers", "4", "Inputs", "Input"] -> 
           NetPort["Layers", "3", "Outputs", "Output"], 
           NetPort["Layers", "5", "Inputs", "Input"] -> 
           NetPort["Layers", "4", "Outputs", "Output"], 
           NetPort["Layers", "6", "Inputs", "Input"] -> 
           NetPort["Layers", "5", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "6", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`TensorT[1, {2}]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{232., {56., 61.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.753359015252926*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lossNet", "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"net", ",", 
      RowBox[{"MeanSquaredLossLayer", "[", "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "2"}], ",", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", 
       RowBox[{"NetPort", "[", 
        RowBox[{"2", ",", "\"\<Target\>\""}], "]"}]}]}], "}"}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", "[", 
     PanelBox[
      TagBox[
       DynamicModuleBox[{NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 
        None, NeuralNetworks`NetGraph`PackagePrivate`outIndex$$ = 3, 
        NeuralNetworks`NetGraph`PackagePrivate`inputs$$ = Association[
        "Input" -> NeuralNetworks`TensorT[1, {2}]], 
        NeuralNetworks`NetGraph`PackagePrivate`outputs$$ = Association[
        "Loss" -> NeuralNetworks`TensorT[0, {}]], 
        NeuralNetworks`NetGraph`PackagePrivate`labels$$ = {
        "1", "2", "Input", "Loss"}, 
        NeuralNetworks`NetGraph`PackagePrivate`vertices$$ = Association[
        "1" -> Association[
          "Type" -> "Chain", "Layers" -> 
           Association[
            "1" -> Association[
              "Type" -> "DotPlus", "Arrays" -> 
               Association[
                "Weights" -> NeuralNetworks`TensorT[2, {25, 2}], "Biases" -> 
                 NeuralNetworks`Nullable[
                   NeuralNetworks`TensorT[1, {25}]]], "Parameters" -> 
               Association["Size" -> 25, "$InputSize" -> 2], "Inputs" -> 
               Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
               "Outputs" -> 
               Association["Output" -> NeuralNetworks`TensorT[1, {25}]]], "2" -> 
             Association[
              "Type" -> "Elementwise", "Arrays" -> Association[], 
               "Parameters" -> 
               Association[
                "Function" -> Ramp, "$Dimensions" -> {25}, "$Rank" -> 1], 
               "Inputs" -> 
               Association["Input" -> NeuralNetworks`TensorT[1, {25}]], 
               "Outputs" -> 
               Association["Output" -> NeuralNetworks`TensorT[1, {25}]]], "3" -> 
             Association[
              "Type" -> "DotPlus", "Arrays" -> 
               Association[
                "Weights" -> NeuralNetworks`TensorT[2, {1, 25}], "Biases" -> 
                 NeuralNetworks`Nullable[
                   NeuralNetworks`TensorT[1, {1}]]], "Parameters" -> 
               Association["Size" -> 1, "$InputSize" -> 25], "Inputs" -> 
               Association["Input" -> NeuralNetworks`TensorT[1, {25}]], 
               "Outputs" -> 
               Association["Output" -> NeuralNetworks`TensorT[1, {1}]]], "4" -> 
             Association[
              "Type" -> "DotPlus", "Arrays" -> 
               Association[
                "Weights" -> NeuralNetworks`TensorT[2, {25, 1}], "Biases" -> 
                 NeuralNetworks`Nullable[
                   NeuralNetworks`TensorT[1, {25}]]], "Parameters" -> 
               Association["Size" -> 25, "$InputSize" -> 1], "Inputs" -> 
               Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
               "Outputs" -> 
               Association["Output" -> NeuralNetworks`TensorT[1, {25}]]], "5" -> 
             Association[
              "Type" -> "Elementwise", "Arrays" -> Association[], 
               "Parameters" -> 
               Association[
                "Function" -> Ramp, "$Dimensions" -> {25}, "$Rank" -> 1], 
               "Inputs" -> 
               Association["Input" -> NeuralNetworks`TensorT[1, {25}]], 
               "Outputs" -> 
               Association["Output" -> NeuralNetworks`TensorT[1, {25}]]], "6" -> 
             Association[
              "Type" -> "DotPlus", "Arrays" -> 
               Association[
                "Weights" -> NeuralNetworks`TensorT[2, {2, 25}], "Biases" -> 
                 NeuralNetworks`Nullable[
                   NeuralNetworks`TensorT[1, {2}]]], "Parameters" -> 
               Association["Size" -> 2, "$InputSize" -> 25], "Inputs" -> 
               Association["Input" -> NeuralNetworks`TensorT[1, {25}]], 
               "Outputs" -> 
               Association["Output" -> NeuralNetworks`TensorT[1, {2}]]]], 
           "Connections" -> {
            NetPort["Layers", "1", "Inputs", "Input"] -> 
             NetPort["Inputs", "Input"], 
             NetPort["Layers", "2", "Inputs", "Input"] -> 
             NetPort["Layers", "1", "Outputs", "Output"], 
             NetPort["Layers", "3", "Inputs", "Input"] -> 
             NetPort["Layers", "2", "Outputs", "Output"], 
             NetPort["Layers", "4", "Inputs", "Input"] -> 
             NetPort["Layers", "3", "Outputs", "Output"], 
             NetPort["Layers", "5", "Inputs", "Input"] -> 
             NetPort["Layers", "4", "Outputs", "Output"], 
             NetPort["Layers", "6", "Inputs", "Input"] -> 
             NetPort["Layers", "5", "Outputs", "Output"], 
             NetPort["Outputs", "Output"] -> 
             NetPort["Layers", "6", "Outputs", "Output"]}, "Inputs" -> 
           Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
           Association["Output" -> NeuralNetworks`TensorT[1, {2}]]], "2" -> 
         Association[
          "Type" -> "MeanSquaredLoss", "Arrays" -> Association[], 
           "Parameters" -> Association["$Dimensions" -> {2}, "$Rank" -> 1], 
           "Inputs" -> 
           Association[
            "Input" -> NeuralNetworks`TensorT[1, {2}], "Target" -> 
             NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
           Association["Loss" -> NeuralNetworks`TensorT[0, {}]]]], 
        NeuralNetworks`NetGraph`PackagePrivate`vports$$ = {
         NetPort["Vertices", "1"], 
         NetPort["Vertices", "2"], 
         NetPort["Inputs", "Input"], 
         NetPort["Outputs", "Loss"]}}, 
        TagBox[GridBox[{
           {
            TemplateBox[{TagBox[
               GraphicsBox[{{
                  GrayLevel[0.7], {
                   
                   LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-0.9999999999999999, 1.}}], 
                   LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEcBxjB9Af7kPM3jr6ezw7nb/KQrNhliuCL5xwU
yznIBue3WV5cyOCM4P/dANLACufXXVKvvaSO4HPMyzvL380C588UluUyeMIM
55sYgwCCfwWkvZYJzi+UOQ5EjHC+kCAIIPgbWKOBiOEAA5Q//4snEP3fD+Pf
uwsCf+F8sHGFf+D8aLABv+H8mWDwE84/Bwoe8x9w/ufDSqkPXn6D89nABnzd
D3MPG9i/X+DyX3ti9/yr/Azng4On9hOcPxekfMpHOD8i0a9E48AHOP8/GLyH
8wFZQpWv
                    "]], 
                   
                   LineBox[{{-3., 1.0000000000000002`}, {-2., 
                    1.2246467991473532`*^-16}}], 
                   
                   LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}}, {
                  InsetBox[
                   GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                   0.6}, {-0.25, 0}, 
                   Offset[8], {1., 0.9999999999999999}], 
                  InsetBox[
                   GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.7777777777777777`, 1.}, {-0.25, 0}, 
                   Offset[8], {0.1777777777777778, 0.}], 
                  InsetBox[
                   GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                   0.4000000000000002}, {-0.25, 0}, 
                   Offset[8], {1., -1.}], 
                  InsetBox[
                   GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.3999999999999999, 1.}, {-0.25, 0}, 
                   Offset[8], {1., 0.}]}, {
                  GrayLevel[0], {
                   AbsolutePointSize[5], {{
                    GrayLevel[0], 
                    TagBox[
                    PointBox[{-2., 1.2246467991473532`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    RGBColor[1., 0.4, 1.], 
                    TagBox[
                    PointBox[{-0.9999999999999999, 1.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-3., 1.0000000000000002`}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{6.123233995736766*^-17, 1.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}}}, {{
                   InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{0, -5.5}, {-2., 1.2246467991473532`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                   InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-0.9999999999999999, 1.}], 
                    Offset[{0, -5.5}, {-0.9999999999999999, 1.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                   InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-3., 1.0000000000000002`}], 
                    Offset[{0, -5.5}, {-3., 1.0000000000000002`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                   InsetBox[
                    FormBox["\"Loss\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {6.123233995736766*^-17, 1.}], 
                    Offset[{0, -5.5}, {6.123233995736766*^-17, 1.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, 
                  StyleBox[{
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 3.8890872965260117`}, {-1.4, 
                    0.6}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071067811865476,
                     0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-1.7777777777777777`, 1.}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {1., 0.}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    
                    Offset[{3.889087296526011, 
                    3.889087296526011}, {-2.4000000000000004`, 
                    0.4000000000000002}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067811865475, -0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"scalar\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {1., 0.}]}, 
                   FontColor -> GrayLevel[0.5], FontSize -> 8, FontWeight -> 
                   "Thin", StripOnInput -> False]}, 
                 
                 DynamicModuleBox[{
                  GeneralUtilities`Graphics`PackagePrivate`vpos$180925 = \
{{-2., 1.2246467991473532`*^-16}, {-0.9999999999999999, 1.}, {-3., 
                    1.0000000000000002`}, {6.123233995736766*^-17, 1.}}}, 
                  DynamicBox[
                   Typeset`ToBoxes[
                    If[
                    Not[
                    IntegerQ[
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]], {}, {
                    AbsolutePointSize[10], 
                    Opacity[0.2, Black], 
                    Point[
                    Part[
                    GeneralUtilities`Graphics`PackagePrivate`vpos$180925, 
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]]}], 
                    StandardForm, Graphics], 
                   TrackedSymbols :> {
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$}], 
                  DynamicModuleValues :> {}]}, 
                ImageSize -> {228., 89.67999999999999}, AspectRatio -> Full, 
                PlotRangePadding -> 0, 
                ImagePadding -> {{19.5, 16.5}, {15.5, 10.179999999999993`}}, 
                ImageMargins -> {{0, 0}, {15, 15}}, 
                BaseStyle -> {TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
               
               EventHandlerTag[{
                "MouseClicked" :> (
                  NeuralNetworks`NetGraph`PackagePrivate`selection$$ = None), 
                 Method -> "Preemptive", PassEventsDown -> Automatic, 
                 PassEventsUp -> True}]],FormBox[
               TemplateBox[{
                 StyleBox["NetChain", 
                  GrayLevel[0.35], StripOnInput -> False], 
                 StyleBox["MeanSquaredLossLayer", 
                  GrayLevel[0.35], StripOnInput -> False]}, "PointLegend", 
                DisplayFunction -> (FormBox[
                  StyleBox[
                   StyleBox[
                    PaneBox[
                    TemplateBox[{"   ", "\"   \"", 
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #}, "RowDefault"], 
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1., 0.4, 1.]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1., 0.4, 1.]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #2}, "RowDefault"]}, 
                    "RowWithSeparators"], Alignment -> Left, 
                    AppearanceElements -> None, 
                    ImageMargins -> {{2, 2}, {2, 2}}, ImageSizeAction -> 
                    "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
                   FontFamily -> "Arial"}, Background -> Automatic, 
                   StripOnInput -> False], TraditionalForm]& ), 
                InterpretationFunction :> (RowBox[{"PointLegend", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1., 0.4, 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.6666666666666667, 0.2666666666666667, 
                    0.6666666666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1., 0.4, 1.]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1., 0.4, 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1., 0.4, 1.], Editable -> False, Selectable -> 
                    False], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "12"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", "2"}], ",", 
                    
                    RowBox[{
                    "LegendLayout", "\[Rule]", 
                    "GeneralUtilities`Graphics`PackagePrivate`legendTable"}]}]\
, "]"}]& ), Editable -> True], TraditionalForm]},
             "Legended",
             DisplayFunction->(GridBox[{{
                 TagBox[
                  ItemBox[
                   PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                  "SkipImageSizeLevel"]}, {
                 ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
               False, GridBoxItemSize -> Automatic, 
               BaselinePosition -> {1, 1}]& ),
             Editable->True,
             InterpretationFunction->(RowBox[{"Legended", "[", 
                RowBox[{#, ",", 
                  RowBox[{"Placed", "[", 
                    RowBox[{#2, ",", "Below"}], "]"}]}], "]"}]& )]},
           {
            DynamicBox[ToBoxes[
              If[
               IntegerQ[NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
               Item[
                NeuralNetworks`NetGraph`PackagePrivate`vportInfo[
                 Part[
                 NeuralNetworks`NetGraph`PackagePrivate`vports$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                 NeuralNetworks`NetGraph`PackagePrivate`inputs$$, 
                 NeuralNetworks`NetGraph`PackagePrivate`outputs$$, 
                 NeuralNetworks`NetGraph`PackagePrivate`vertices$$], 
                Alignment -> Center], 
               Item["", ItemSize -> {0, 0}]], StandardForm],
             ImageSizeCache->{0., {0., 6.}},
             
             TrackedSymbols:>{
              NeuralNetworks`NetGraph`PackagePrivate`selection$$}]}
          },
          AutoDelete->False,
          GridBoxAlignment->{"Columns" -> {{Left}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"],
        DynamicModuleValues:>{},
        Initialization:>{NetGraph}],
       Deploy,
       DefaultBaseStyle->"Deploy"],
      BaselinePosition->(Top -> Scaled[3])], "]"}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.753359016758307*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"lossNet", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"lossNet", ",", 
     RowBox[{"<|", 
      RowBox[{"\"\<Input\>\"", "\[Rule]", "manifold"}], "|>"}], ",", 
     RowBox[{"BatchSize", "\[Rule]", "4096"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"trained", "=", 
  RowBox[{"NetExtract", "[", 
   RowBox[{"lossNet", ",", "1"}], "]"}]}]}], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"25"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"25"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["4", 
              GrayLevel[0.5]], {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"25"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "4"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["5", 
              GrayLevel[0.5]], {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "5"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"25"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "5"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["6", 
              GrayLevel[0.5]], {"Layers", "6"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "6"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "6"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Outputs", "Output"}, "Mouse"], 
            "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {25, 2}], "Biases" -> 
               NeuralNetworks`TensorT[1, {25}]], "Parameters" -> 
             Association["Size" -> 25, "$InputSize" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {25}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Ramp, "$Dimensions" -> {25}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {25}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {25}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 25}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 25], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {25}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]], "4" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {25, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {25}]], "Parameters" -> 
             Association["Size" -> 25, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {25}]]], "5" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Ramp, "$Dimensions" -> {25}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {25}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {25}]]], "6" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {2, 25}], "Biases" -> 
               NeuralNetworks`TensorT[1, {2}]], "Parameters" -> 
             Association["Size" -> 2, "$InputSize" -> 25], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {25}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Layers", "4", "Inputs", "Input"] -> 
           NetPort["Layers", "3", "Outputs", "Output"], 
           NetPort["Layers", "5", "Inputs", "Input"] -> 
           NetPort["Layers", "4", "Outputs", "Output"], 
           NetPort["Layers", "6", "Inputs", "Input"] -> 
           NetPort["Layers", "5", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "6", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`TensorT[1, {2}]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{232., {56., 61.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.753359045934146*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"xmin", ",", "xmax"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"ymin", ",", "ymax"}], "}"}]}], "}"}], "=", 
   RowBox[{"CoordinateBounds", "[", 
    RowBox[{"manifold", ",", ".2"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Show", "[", 
  RowBox[{"plot", ",", 
   RowBox[{"StreamPlot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"trained", "[", 
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}], "]"}], "-", 
      RowBox[{"{", 
       RowBox[{"x", ",", "y"}], "}"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "xmin", ",", "xmax"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "ymin", ",", "ymax"}], "}"}]}], "]"}]}], 
  "]"}]}], "Input"],

Cell[BoxData[
 GraphicsBox[{{{}, {{}, 
     {RGBColor[1, 0.5, 0], PointSize[0.004583333333333334], AbsoluteThickness[
      1.6], PointBox[CompressedData["
1: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
       
       "]]}, {}}, {}, {}, {{}, {}}}, {{}, {
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.37022033986595226`, -0.20030141568614634`}, \
{-0.3682811346027714, -0.19246722832972563`}, {-0.3642313978209849, \
-0.17483020477662997`}, {-0.36062314262083284`, -0.15755229860036174`}, \
{-0.3574563690023153, -0.14063350980092096`}, {-0.3547310769654323, \
-0.12407383837830763`}, {-0.352486175503721, -0.10786901425821441`}, \
{-0.3507605736107186, -0.09201476736633374}, {-0.34886490339796605`, \
-0.06228385438951074}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.3487666192213731, -0.05878829348598231}, \
{-0.34851123584679283`, -0.041416544932633706`}, {-0.34895151071544545`, \
-0.02208546024811709}, {-0.3497180854474564, -0.006141602400707954}, \
{-0.35065077287122176`, 0.009426043258577816}, {-0.3530144857940148, 
        0.03943269801277959}, {-0.3560426494838247, 
        0.06793450401448825}, {-0.35778833649834557`, 0.08069734136253631}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.3582623451113481, 
        0.08416285080323359}, {-0.3597352639406515, 
        0.09493146126370376}, {-0.36233343403842155`, 
        0.11168024194094148`}, {-0.36491545249148705`, 
        0.12793779960403423`}, {-0.36748131929984806`, 
        0.14370413425298212`}, {-0.3700310344635045, 
        0.15897924588778506`}, {-0.37508200985670376`, 
        0.18805580011495618`}, {-0.38006837867108484`, 
        0.21516746228554753`}, {-0.3813692684006828, 0.2221403023505928}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.38201076333572787`, 
        0.22557875027037783`}, {-0.38538077814207167`, 
        0.2436422138575116}, {-0.39015516299192066`, 
        0.27019046726165225`}, {-0.39440711531187117`, 
        0.294945829406555}, {-0.39815221719316257`, 
        0.3180419072008056}, {-0.401500398576742, 
        0.3395714353918723}, {-0.40456158940355713`, 
        0.3596271487272239}, {-0.40515442814711544`, 0.36355248515493915`}}]}, 
      {Arrowheads[{{0.01999999999999999, 1.}}], 
       ArrowBox[{{-0.4056767693942185, 
        0.36701103968976106`}, {-0.40584021015230715`, 
        0.3680932226079151}, {-0.4071690024759713, 
        0.3762726632343445}, {-0.41116676198203694`, 
        0.4021757394648931}, {-0.4148078348449302, 
        0.4254168760806536}, {-0.4182883096282689, 
        0.44745413950699087`}, {-0.42144758825249873`, 
        0.4670836565544819}, {-0.42432100712893495`, 
        0.4845598171859709}, {-0.4269439026688933, 
        0.5001370113643026}, {-0.42782437376874904`, 0.5051560917639805}}]}, 
      {Arrowheads[{{0.017082836731517885`, 1.}}], 
       ArrowBox[{{-0.4284287415451862, 
        0.5086012593128185}, {-0.43154738678391025`, 
        0.5263789367332292}, {-0.43594070420429215`, 
        0.5495792373140026}, {-0.439650598976078, 
        0.5673293441865418}, {-0.4455377016982484, 
        0.5920094717921565}, {-0.44943712841626665`, 
        0.6068091841471042}, {-0.45164636261922764`, 
        0.6152838505462057}, {-0.45308909967685357`, 
        0.6206984376417887}, {-0.45389909102519455`, 
        0.6236083096478987}, {-0.4543730333742093, 0.625187954715873}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.277834679201878, -0.20030141568614634`}, \
{-0.2736833952138839, -0.18698936924119933`}, {-0.26870837239472706`, \
-0.1704553452926385}, {-0.2639914461975386, -0.15418342784756603`}, \
{-0.25953261662231847`, -0.13817361690598187`}, {-0.2553318836690667, \
-0.12242591246788609`}, {-0.25138924733778323`, -0.10694031453327871`}, \
{-0.24770470762846813`, -0.09171682310215967}, {-0.24180150572083317`, \
-0.06516663782633819}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.2410448849994286, -0.06175168603753568}, \
{-0.2346803616804332, -0.03195407910757272}, {-0.22826281748759897`, \
-0.003342819900844996}, {-0.22181869879753258`, 
        0.023825844099748347`}, {-0.2153094189105264, 
        0.04960013912415891}, {-0.20864069615752828`, 
        0.0739964932017535}, {-0.20854808285239004`, 
        0.07430466929676845}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.2075414040046515, 
        0.07765445101298195}, {-0.20171824886948586`, 
        0.09703133436189941}, {-0.1944491336360167, 
        0.11869986349781018`}, {-0.18672840528078663`, 
        0.13902926132790783`}, {-0.17579166723198708`, 
        0.1638765506203942}, {-0.1672137399871308, 
        0.182235189168109}, {-0.15888113362570272`, 
        0.19978765919228156`}, {-0.1552998474579245, 0.20720341050819566`}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.15377875557327922`, 
        0.2103531278490421}, {-0.15079384814770283`, 
        0.2165339606929118}, {-0.14295188355313126`, 
        0.2324740936699995}, {-0.13535523984198794`, 
        0.24760805812354503`}, {-0.12800391701427283`, 
        0.26193585405354824`}, {-0.11403723400912744`, 
        0.2881729403429275}, {-0.10106133034630219`, 
        0.3117537164397937}, {-0.08908570183440409, 
        0.33324654624580324`}, {-0.08859183688325352, 
        0.3341197201231358}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.08686985365597803, 
        0.3371642584483576}, {-0.07811034847343332, 
        0.35265142976095604`}, {-0.0681352702633898, 
        0.36996836698525215`}, {-0.05481474441410712, 
        0.39286613122080594`}, {-0.043060306583705875`, 
        0.4131143951834993}, {-0.03287195677218606, 
        0.43071315887333217`}, {-0.02424969497954768, 
        0.4456624222903045}, {-0.016974432763666905`, 
        0.45836431371356867`}}]}, 
      {Arrowheads[{{0.012972437214579424`, 1.}}], ArrowBox[CompressedData["
1:eJwBUQGu/iFib1JlAgAAABQAAAACAAAAKsnJzAo0j7+G79qtkYfdPz8xuAcu
K4W/oFJzhrkT3j+gZ6H2xbgIP2hKPqjNQN8/bs1+FpykYj/BagDBUoLfP/JO
x32su3E/2F1pDBm/3z/DBwsCx3p5P3t15Rl8998/GptorAElez/64nEv1QHg
P9LdSyxJx3w/bUaSOtIH4D8t5sB/2/t9P4hC1yo/DOA/3m2tLm/djz8nu4IR
ZIzgP5LsNA8E2pQ/EqH6unXe4D92FRSpIhiVPxj4M0rL4uA/yzUMiFJUlT+y
gQ6Q/ebgPwpvg2tEyZU/43RtrCHv4D+jGD361hCWPwwSXnQb9OA/3bWWRIJV
lj/blTAt4PjgP9mZ4MDygZg/l4iVvUIf4T8Lb4HIWO+ZP0R/5SMAOOE/X7Jo
f0zimj99MIqW+0fhPz6cyxVYtJs/qFNIPBZV4T/UkJzW
        "]]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.6923666005002749, -0.20030141568614634`}, \
{-0.6927809656151471, -0.18727102756835015`}, {-0.6937145512768501, \
-0.1689976407719559}, {-0.6949146509734443, -0.1514466321201769}, \
{-0.6963207108472571, -0.1345408242416232}, {-0.6979327308982887, \
-0.1182802171362948}, {-0.699750711126539, -0.10266481080419157`}, \
{-0.7039130201267225, -0.07319796948016134}, {-0.7060323331270038, \
-0.0611833161743363}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.7066399395875865, -0.05773871834036198}, \
{-0.7087161058598348, -0.045968669290032814`}, {-0.7141082902966502, \
-0.02086767694074297}, {-0.7200067925814608, 
        0.002281245243577326}, {-0.7283622233122288, 
        0.03071756318677753}, {-0.7369016684237387, 
        0.056731189475069006`}, {-0.7443165763247763, 
        0.0767833955707477}}]}, 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-0.7455297013979095, 
        0.080064061266258}, {-0.7456251279159902, 
        0.08032212410845169}, {-0.7545326017889835, 
        0.10149036708692555`}, {-0.7635026329645359, 
        0.12064840470669778`}, {-0.7724137643644646, 
        0.13820872326397549`}, {-0.7812659959887698, 
        0.15417132275875872`}, {-0.7900593278374513, 
        0.16853620319104745`}, {-0.8011342533136366, 
        0.18546347126035023`}, {-0.8115265183550434, 
        0.20090176809511767`}, {-0.8126062276537289, 0.2024529349212807}}]}, 
      {Arrowheads[{{0.020000000000000007`, 1.}}], 
       ArrowBox[{{-0.8146044775846621, 
        0.20532372524143436`}, {-0.8212361229616719, 
        0.21485109369534988`}, {-0.8302630671335215, 
        0.2273114480610467}, {-0.8332274620961165, 
        0.23131006721248074`}, {-0.8361147525479259, 
        0.23517322140349714`}, {-0.8445992405874319, 
        0.24630332589579046`}, {-0.852286624876558, 
        0.2563813716102206}, {-0.8662086779134113, 
        0.2746201901253302}, {-0.8775078051698184, 
        0.2893974742764271}, {-0.886689252099195, 
        0.3013802871232637}, {-0.89876908492542, 0.3170711930467567}}]}, 
      {Arrowheads[{{0.005644546491030885, 1.}}], 
       ArrowBox[{{-0.9009028158754288, 
        0.31984276878660883`}, {-0.9037982865413694, 
        0.32360379416478086`}, {-0.9133553633235032, 
        0.33586696340957733`}, {-0.918879057819311, 
        0.34281518337551664`}, {-0.9222951178147071, 
        0.346979545067276}, {-0.9243388536297892, 
        0.3493423012805076}, {-0.9255796179681578, 0.3506549466665762}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-1.0050393733539755`, 
        0.9528387197038202}, {-0.9945728314202147, 
        0.9375275934773438}, {-0.9819276386318824, 
        0.9191592464663867}, {-0.9698083026514805, 
        0.9016742886379154}, {-0.9581813926017145, 
        0.8850080985416379}, {-0.9470259571855435, 
        0.8691235953157357}, {-0.9363210451059537, 
        0.8539836980984283}, {-0.9249916885406783, 0.8380925914466201}}]}, 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-0.92296119178797, 
        0.8352445179247454}, {-0.9214433691917724, 
        0.8331155461145873}, {-0.9073813156581416, 
        0.8135797743237012}, {-0.8941348845050616, 
        0.7953763827257704}, {-0.8817040757325321, 
        0.7785053713207946}, {-0.8700132730004094, 
        0.7627955126496351}, {-0.85898685996855, 
        0.7480755792531529}, {-0.8486248366369535, 
        0.7343455711313485}, {-0.8397931315377184, 0.7227430855226833}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.837670460050569, 
        0.7199630339063408}, {-0.8252747148739671, 
        0.7037628667595344}, {-0.8128071773157561, 
        0.6874850005074207}, {-0.8015245903309879, 
        0.6727718895278806}, {-0.7914269539196618, 
        0.6596235338209135}, {-0.7884615104046833, 
        0.6557655656081349}, {-0.7855888196398264, 
        0.6520300839211627}, {-0.7753192494232931, 
        0.638710199806111}, {-0.7662308814465288, 
        0.626950280539963}, {-0.7523696495952323, 0.6090631550221598}}]}, 
      {Arrowheads[{{0.011960423614100848`, 1.}}], 
       ArrowBox[{{-0.750227135487083, 
        0.6062983633220234}, {-0.7501630350197022, 
        0.6062156453415372}, {-0.7378026225776505, 
        0.5903776163045888}, {-0.7282612867102349, 
        0.5782632935193096}, {-0.7141453978584632, 
        0.5606895079898683}, {-0.7062736801395421, 
        0.5513677636483739}, {-0.7016298334986018, 
        0.5463156793169454}, {-0.6986977910988202, 
        0.5435315291958793}, {-0.6967734377345135, 0.5420856972062164}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.4442518787292698, -0.20030141568614634`}, \
{-0.44393715498433894`, -0.19842492845497364`}, {-0.4414329498503804, \
-0.1810656421704587}, {-0.4393986418762651, -0.16407965275859454`}, \
{-0.43785334439419027`, -0.1474677765345382}, {-0.43681617073635304`, \
-0.1312308298134467}, {-0.4362661948933919, -0.09988172488015849}, \
{-0.43773606601126436`, -0.07013679761414596}, {-0.43887738963399225`, \
-0.06093408315201513}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.4393078868816548, -0.05746290007293135}, \
{-0.4412131357538532, -0.042100507670825384`}, {-0.44663227409140577`, \
-0.015719381558775385`}, {-0.4537362432392737, 
        0.009039662922250957}, {-0.4610675448056347, 
        0.03016381258168983}, {-0.4687932255764264, 
        0.050033799279015204`}, {-0.47974667806170734`, 
        0.07586946886181245}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.481149613403302, 
        0.07907331462542132}, {-0.4919311324730804, 
        0.10297385607239028`}, {-0.5033629038225556, 
        0.12666808637553315`}, {-0.5147032204394626, 
        0.14851178461631287`}, {-0.5295328774280924, 
        0.17546219794051277`}, {-0.5437583616557682, 
        0.2002631751092242}, {-0.5455204414231118, 0.20319342321463382`}}]}, 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-0.5473229884173558, 
        0.2061909662388963}, {-0.55737967312249, 
        0.2229147161224472}, {-0.5703968118282579, 
        0.24341682098018178`}, {-0.5840918944775219, 
        0.26429219627961625`}, {-0.5968134954929496, 
        0.28358137590754534`}, {-0.6085616148745411, 
        0.30128435986396895`}, {-0.6193362526222962, 
        0.3174011481488871}, {-0.6231942698959464, 
        0.3231476153662778}, {-0.6234641131792973, 0.32354837340848464`}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.625417698516557, 
        0.32644974277118327`}, {-0.6269379173401591, 
        0.3287074973904844}, {-0.635143765191338, 
        0.34076938894867026`}, {-0.6428079506002733, 
        0.3519460521965022}, {-0.6571268941808087, 
        0.37264854237328016`}, {-0.6695738045880135, 
        0.3902870782278942}, {-0.6804189958241214, 
        0.40529920882089915`}, {-0.6958193243941102, 
        0.42600965629272225`}, {-0.7066436700800157, 0.4403414322227396}}]}, 
      {Arrowheads[{{0.008965462466248738, 1.}}], 
       ArrowBox[{{-0.7087495176629928, 
        0.4431342511074965}, {-0.7242340990874739, 
        0.463707557610743}, {-0.7340491936781803, 
        0.4769158646015577}, {-0.7396520902988742, 
        0.4845644843613063}, {-0.743155286666813, 
        0.4894655184077961}, {-0.7449722110338312, 
        0.49214207440928404`}, {-0.7459029364960512, 
        0.4936505727933375}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.18258174667715493`, 
        0.9528387197038202}, {-0.18353186645410846`, 
        0.9405319254211217}, {-0.1851766881353897, 
        0.9186210292357613}, {-0.18665327771514484`, 
        0.8982835179732844}, {-0.1879616351933739, 
        0.8795193916336912}, {-0.18912564165598392`, 
        0.8621247530621592}, {-0.19016917818888213`, 
        0.8458957051038665}, {-0.19189484146554284`, 
        0.8169343810269981}, {-0.19208788955477135`, 0.8132538701387585}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.1922711011096306, 
        0.809760895278424}, {-0.19319467153532396`, 
        0.7921527903683745}, {-0.19415500746687667`, 
        0.7708052123194254}, {-0.19512779996917698`, 
        0.7428831042232109}, {-0.19556791876936133`, 
        0.720764375396399}, {-0.19570221756472997`, 
        0.6895670054144346}, {-0.19569688725701392`, 
        0.6879496358891457}, {-0.1956918422393604, 
        0.6863833982383072}, {-0.1956902669414504, 
        0.6858807067447731}, {-0.195685080528882, 
        0.6841958512862962}, {-0.19568101150654976`, 
        0.682837557285724}, {-0.19567716548817096`, 
        0.6815195572067494}, {-0.19564925912878767`, 
        0.6702431687548018}, {-0.19564880809846272`, 0.6699173150744839}}]}, 
      {Arrowheads[{{0.003852331334795252, 1.}}], 
       ArrowBox[{{-0.19564396665637673`, 
        0.6664195420102041}, {-0.19563775011332668`, 
        0.6619283064553313}, {-0.19563829345540001`, 
        0.6557907843430133}, {-0.1956618639803683, 
        0.6481354253220241}, {-0.19570481758194228`, 
        0.6439850252525475}, {-0.1957577610589351, 
        0.6416459121901981}, {-0.19581610686285664`, 
        0.6402744802606712}, {-0.19587762414110046`, 
        0.6394748199110823}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.3363812903430856, -0.19046187956850646`}, \
{-0.3320918331174504, -0.17340591689014317`}, {-0.3260486021210821, \
-0.14720111908567102`}, {-0.32094486723392046`, -0.12169645566163362`}, \
{-0.3167806284559658, -0.09689192661803112}, {-0.3135558857872179, \
-0.07278753195486366}, {-0.31139678699018764`, -0.05295443377767123}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.3110182436029069, -0.04947720143675575}, \
{-0.31101063826056774`, -0.04940734011244242}, {-0.3088848849089064, \
-0.026775419531078565`}, {-0.30717862573223376`, -0.004891770210772417}, \
{-0.3058918607305499, 0.016243607848476158`}, {-0.3048701001216284, 
        0.03667912576974677}, {-0.3039588541232429, 
        0.05646319467611866}, {-0.3031581227353934, 
        0.07559581456759196}, {-0.3026143850817868, 0.09015487603730123}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.3024838445408234, 
        0.09365021565111953}, {-0.30246790595807993`, 
        0.09407698544416682}, {-0.30178701858989804`, 
        0.11193955875492975`}, {-0.3010142754294434, 
        0.1292163859489673}, {-0.30012661588317324`, 
        0.1459270055060627}, {-0.2991009793575482, 
        0.16209095590594308`}, {-0.2976570890721381, 
        0.17907692803782338`}, {-0.2960397043240525, 
        0.19551848274604705`}, {-0.2942488251132915, 
        0.21141562003061404`}, {-0.29228445143985493`, 
        0.22676833989152434`}, {-0.291325341633011, 
        0.23303536036133263`}}]}, 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-0.2907961999207384, 
        0.23649288098991833`}, {-0.2878352207049553, 
        0.255840527342375}, {-0.2826920121193538, 
        0.28273504509859915`}, {-0.2772768250148129, 
        0.3077239327638652}, {-0.2720116587230952, 
        0.3310792299418419}, {-0.2668965132442007, 
        0.3528009366325292}, {-0.2619313885781294, 
        0.37288905283592716`}, {-0.26182396108762324`, 
        0.37331310838502857`}}]}, 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-0.26096499184810185`, 
        0.3767037737613697}, {-0.2561845200466797, 
        0.39557404230403453`}, {-0.2509063300145299, 
        0.41648664602889895`}, {-0.24609681848167997`, 
        0.4356268640105204}, {-0.24175598544813004`, 
        0.4529946962488989}, {-0.2403007032583158, 
        0.4588355516091142}, {-0.23890146320282682`, 
        0.4644922828627599}, {-0.23544160563274383`, 
        0.4789228356248925}, {-0.23235605143526683`, 
        0.492154888406408}, {-0.2277410876361526, 0.5126064061435304}}]}, 
      {Arrowheads[{{0.015254343113371937`, 1.}}], 
       ArrowBox[{{-0.226971159763973, 
        0.5160183925034685}, {-0.22688261155139922`, 
        0.5164107997722732}, {-0.22270322329841646`, 
        0.5366262114853064}, {-0.21963601522961676`, 
        0.5534827802925483}, {-0.2168808294073497, 
        0.5734281642978394}, {-0.21592330816326302`, 
        0.5885894048939689}, {-0.21630494730909708`, 
        0.6094380891250138}, {-0.21648593462616275`, 0.621792378024775}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-1.250191838276312, 
        0.8635731149480151}, {-1.2426021225705592`, 
        0.8534854479344611}, {-1.2293594194315522`, 
        0.8358797433978367}, {-1.2166240277632312`, 
        0.8189437973579332}, {-1.2043959475655965`, 
        0.8026776098147514}, {-1.1926751788386485`, 
        0.7870811807682913}, {-1.181395512718466, 
        0.7720670927506784}, {-1.1704907403411302`, 
        0.7575479282940393}, {-1.1661255392256293`, 0.7517341260531198}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-1.1640253804720935`, 
        0.7489370252221327}, {-1.1599608617066397`, 
        0.7435236873983737}, {-1.1498058768149952`, 
        0.7299943700636818}, {-1.1400257856661966`, 
        0.7169599762899636}, {-1.130620588260244, 
        0.7044205060772188}, {-1.1129348746768764`, 
        0.6808263363346503}, {-1.09455926677508, 
        0.6562904073876522}, {-1.0801126036238895`, 0.6369828198834222}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-1.078017097976791, 
        0.6341822313860273}, {-1.0775647511867803`, 
        0.6335776817305818}, {-1.0619513279119774`, 
        0.6126881593634391}, {-1.047718996950671, 
        0.5936218402862242}, {-1.0426711706574592`, 
        0.5868545004323591}, {-1.0377836220608743`, 
        0.5802987311509215}, {-1.0271907998340262`, 
        0.5660652620948575}, {-1.017352448259723, 
        0.552827699358635}, {-0.9990827767012647, 
        0.5282098384154987}, {-0.9944613871921675, 0.521961447985433}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.9923814630219159, 
        0.5191492681734783}, {-0.9834246548200662, 
        0.5070391366768353}, {-0.9700051922639508, 
        0.4888232540512907}, {-0.9515806205359578, 
        0.4636445203396411}, {-0.9374684984016634, 
        0.44415684534429745`}, {-0.9265015753125159, 
        0.4288190427612149}, {-0.9180532933379297, 
        0.41680386076758125`}, {-0.9105114239202488, 0.40570437546941646`}}]}, 
      {Arrowheads[{{0.004302572943594294, 1.}}], 
       ArrowBox[{{-0.9085456196218493, 
        0.40281127102796316`}, {-0.906626943102555, 
        0.3999875252643579}, {-0.9003029599308203, 
        0.3898967105841286}, {-0.896565259049027, 
        0.3830169344062185}, {-0.8949820086245219, 
        0.37896770969517796`}, {-0.8945369734407117, 
        0.3764071372475629}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.01999999999999999, 1.}}], 
       ArrowBox[{{0.1033165579990482, 0.9528387197038202}, {
        0.09468161286106838, 0.936116392645276}, {0.082400225954246, 
        0.9116906473311336}, {0.07127260033400379, 0.8888574971300411}, {
        0.06129873600034172, 0.8676169420419985}, {0.05053012237899553, 
        0.8440916358777782}, {0.04267776862199312, 0.8267764328607161}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{0.041233152893211035`, 0.8235909148110234}, {
        0.040668102524751754`, 0.8223449238448098}, {0.03171267643761043, 
        0.8023768059430934}, {0.02366384411757153, 0.7841872821726286}, {
        0.02093311591507737, 0.777967547254995}, {0.018288274327787433`, 
        0.7719436904104098}, {0.011913012158491306`, 0.7574257978531859}, {
        0.006036607510911938, 0.7440456282873487}, {-0.0047929903927743465`, 
        0.719390821163196}, {-0.013924381544347192`, 
        0.6986090415566508}, {-0.01525171464213584, 0.6955893905602109}}]}, 
      {Arrowheads[{{0.01632975399431782, 1.}}], 
       ArrowBox[{{-0.0166592373812547, 
        0.6923873100509753}, {-0.021627868265684816`, 
        0.6810837938302859}, {-0.03133946928178714, 
        0.6590043941710517}, {-0.03875011522874107, 
        0.6421727136864617}, {-0.048977868915952114`, 
        0.6189856818888673}, {-0.055077086089640064`, 
        0.6052144878153294}, {-0.05854688875155735, 
        0.5974402071800792}, {-0.06070299332104868, 
        0.5926713335853242}, {-0.061883438828277106`, 
        0.590127752893795}, {-0.06255146729240449, 
        0.5887529372763766}, {-0.0629639639916393, 0.5879610425261732}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{0.4358477917652017, 0.7984976753209441}, {
        0.43080368341824626`, 0.7954569265227127}, {0.41524781049833137`, 
        0.7860387396587866}, {0.4002513934689379, 0.7769238566211376}, {
        0.3858144323300661, 0.7681122774097662}, {0.371936927081716, 
        0.7596040020246719}, {0.34586028425658044`, 0.7434973627333152}, {
        0.3220214649935313, 0.728603938747068}, {0.3166650966682655, 
        0.7252176988863552}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{0.31370858079719444`, 0.723348620569947}, {
        0.3001125813036725, 0.7147533723279564}, {0.279825745198108, 
        0.7017753057380071}, {0.2611609566768377, 0.6896697389772201}, {
        0.24411821573986173`, 0.6784366720455954}, {0.23753381457593722`, 
        0.6740569398275319}, {0.23117487679471452`, 0.6697997681277857}, {
        0.21136428985469632`, 0.6561476946588872}, {0.19709800927396187`, 
        0.6460727456719837}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{0.1942408755877388, 0.6440550175069892}, {
        0.19378278405162858`, 0.6437315100004934}, {0.1772060051797929, 
        0.6318767857895533}, {0.16263868017042143`, 0.6211449824735202}, {
        0.13865321187419646`, 0.6025981500695814}, {0.1202715491852745, 
        0.5872887518168807}, {0.10531681391135972`, 0.5736950054031547}, {
        0.09408113606249056, 0.5628047094935517}, {0.08645452502153864, 
        0.5551885370172555}}]}, 
      {Arrowheads[{{0.005810956251259551, 1.}}], 
       ArrowBox[{{0.08397953041328764, 0.5527169299413045}, {
        0.07839793970116012, 0.5471429787685762}, {0.06865685993725588, 
        0.5375704811058749}, {0.06291691080397431, 0.5318938046549587}, {
        0.05901343277605992, 0.5279908440916014}, {0.05694050340034827, 
        0.525868943217703}, {0.055839562294520306`, 0.5246919265095792}, {
        0.055225549294803555`, 0.5239874921259104}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{0.4358477917652017, 0.24992359328667313`}, {
        0.4269283328618988, 0.2522878281692565}, {0.40653532061382225`, 
        0.2573518787043489}, {0.3878171312647507, 0.26196361656503386`}, {
        0.3707737648146841, 0.2661230417513113}, {0.35540522126362256`, 
        0.26983015426318135`}, {0.33394379555694886`, 0.2749416340461007}, {
        0.3150007405628805, 0.27939055520961376`}, {0.2998683261709502, 
        0.2828381009527259}}]}, 
      {Arrowheads[{{0.01398904006743868, 1.}}], 
       ArrowBox[{{0.2964579371400298, 0.2836150736076761}, {
        0.28466974271255996`, 0.28630072167842113`}, {0.26187034281284943`, 
        0.2912313868942976}, {0.24482959065991147`, 0.29468350094779466`}, {
        0.22284796280707822`, 0.2984906628391787}, {0.21072088954815021`, 
        0.2997919644052621}, {0.20975452868623087`, 0.2998316822619519}, {
        0.20885257986353337`, 0.2998553097599328}, {0.20757223031274255`, 
        0.2998626128761134}, {0.20323003338635687`, 0.2995574896069814}, {
        0.20029603792447856`, 0.2987274079314055}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.17542708816214833`, -0.20030141568614634`}, \
{-0.17191537567046825`, -0.1917742430553644}, {-0.16570900093366614`, \
-0.17640938716527096`}, {-0.1597271741687919, -0.16129530116381086`}, \
{-0.15016378386976661`, -0.1372846997304256}, {-0.14074674147193433`, \
-0.11446944946638593`}, {-0.13147604697529508`, -0.092849550371692}, \
{-0.12235170037984885`, -0.07242500244634384}, {-0.12173072019222225`, \
-0.0711233077159973}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.12022468384666811`, -0.06796636388142684}, \
{-0.11324035469698697`, -0.053325857420353576`}, {-0.10400866293810072`, \
-0.03568216702373333}, {-0.09465662510319015, -0.019493931256483226`}, \
{-0.08518424119225529, -0.004761150118603272}, {-0.06615835224883981, 
        0.019743878569082482`}, {-0.047210913214381645`, 
        0.037238749339360167`}, {-0.03817181658320516, 
        0.043063842115203164`}}]}, 
      {Arrowheads[{{0.02, 1.}}], ArrowBox[CompressedData["
1:eJwBYQGe/iFib1JlAgAAABUAAAACAAAAtLttvOIJor9tneQ7zwSnP8SLVCay
9Ji/Ik5RLi+aqj9jtoN49Jd3v6+AuG3OTa4/OUvvQ343Xb/44pa6Aa6uP4Bl
i6n9eF8/AIulXZrrrj9vbcreNW53P6MFp6xFDq8/Zx49RVnUej8q7rXNehKv
P2IqHolqhH0/ee+o9RgVrz8+NPBldZyUPyMhh2C0664/mZdWLGRHoz+4tZkH
+9mtP+YEifRIP6o/mhM1ZI9crD9gtTKXdl+zP5AldRPvuqg/djGEwWOxsz/k
aBe814moPy6JT4SXALQ/p8NXHS9aqD8jBD4xwSK0P0oRzFyERag/odFIsBJE
tD/G/K6GUjGoPypJ+OlfdrQ/1vDtBsISqD8BNLlIg2G1PyW/J7CPgqc/GtB8
GAwztj8DHNpf3/+mP5BiN2mg7bY/5LZXo1GJpj9WcB0AfDu5P4cSGric+aQ/
Ipuf6A==
        "]]}, 
      {Arrowheads[{{0.0009849183201075685, 1.}}], 
       ArrowBox[{{0.10183843881433212`, 0.03974208754221986}, {
        0.1055261507088631, 0.038231884012142614`}, {0.10806523915528923`, 
        0.036820307974624676`}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{0.33604744511318774`, -0.20030141568614634`}, {
        0.33463542840283245`, -0.19640529482740948`}, {
        0.325435081702908, -0.17102085646847331`}, {
        0.31745692721388674`, -0.14900999791690675`}, {
        0.30997336406621684`, -0.12836510605316523`}, {
        0.3029546095615734, -0.10900386896884567`}, {
        0.2963708810016315, -0.09084397475554504}, {
        0.2901960402663818, -0.07381330657693073}, {
        0.28836585626024136`, -0.06876598394119651}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{0.28717351150186216`, -0.06547770873587562}, {
        0.2844039492358148, -0.05783974759667019}, {
        0.2816701954615457, -0.05030091904746717}, {
        0.2790031805733691, -0.04305627577943063}, {
        0.27225603535111403`, -0.027128345290360463`}, {
        0.26575568274431605`, -0.013269596069473527`}, {0.2532512165043478, 
        0.010733881834155811`}, {0.24170111939457362`, 0.02816124953161367}, {
        0.23104096062625515`, 0.04102087835671496}, {0.21691703042121466`, 
        0.05337648629317652}}]}, 
      {Arrowheads[{{0.009881449061379947, 1.}}], 
       ArrowBox[{{0.21428442392076316`, 0.05567948930284521}, {
        0.21251686918744006`, 0.057225745406785974`}, {0.19691235574483337`, 
        0.06648953259199998}, {0.18404764943602517`, 0.07089452876859995}, {
        0.174074629736158, 0.07299499665178072}, {0.16211263459300038`, 
        0.07526423708080958}, {0.1554095911132945, 0.07654666392506447}, {
        0.15165867558071092`, 0.07705762205495918}, {0.14960434098525563`, 
        0.07712170892627207}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.22106698548513457`, -0.20030141568614634`}, \
{-0.21846888267901401`, -0.19324099564096042`}, {-0.21204800705001953`, \
-0.17519809183863932`}, {-0.20595325185250463`, -0.15747904825464387`}, \
{-0.2001846170864696, -0.14008386488897437`}, {-0.19474210275191428`, \
-0.12301254174163068`}, {-0.18949611903806654`, -0.10631928337067216`}, \
{-0.18431707613415424`, -0.09005829433415831}, {-0.17920497404017732`, \
-0.07422957463208897}, {-0.1770077575342899, -0.06752427167441585}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.1759185795396488, -0.06420039876096804}, \
{-0.17415981275613573`, -0.05883312426446402}, {-0.16404660578032476`, \
-0.02947093722264002}, {-0.15374327640495933`, -0.0020775099191348498`}, \
{-0.14333860656022662`, 0.022833974703943438`}, {-0.13262352467920008`, 
        0.045647423215865825`}, {-0.12240961202500206`, 
        0.0648379841507126}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.12067730497353928`, 
        0.06787497752493886}, {-0.11026212480826546`, 
        0.08498021190624287}, {-0.0988396920810432, 
        0.10182738416454032`}, {-0.0875546178428988, 
        0.11723218447136743`}, {-0.0764069020938322, 
        0.1311946128267242}, {-0.06539654483384344, 
        0.14371466923061066`}, {-0.04582259597743878, 
        0.16369266916570624`}, {-0.032481438077270636`, 
        0.17566519852967616`}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.02987821542111822, 
        0.17800136454502208`}, {-0.02709573125230333, 
        0.18049840218337415`}, {-0.009181823217390197, 
        0.19444820138113228`}, {0.007953255568347455, 0.2058583998564984}, {
        0.024079321271042363`, 0.2149586119081101}, {0.03896619005682727, 
        0.22197845183460505`}, {0.04393457515820499, 0.22406078591024584`}, {
        0.0487513607778402, 0.22602050664386336`}, {0.059082228321984676`, 
        0.23005194997570472`}, {0.06870495064273278, 0.2336764697266452}, {
        0.08662970983019, 0.24015211848189552`}, {0.09318237264143375, 
        0.24227329891682894`}}]}, 
      {Arrowheads[{{0.014940926153753297`, 1.}}], 
       ArrowBox[{{0.09651013411804704, 0.24335053770351045`}, {
        0.10210310915218027`, 0.24516105497827662`}, {0.11547571088880305`, 
        0.24884728238138343`}, {0.13446522741117864`, 0.25235324679173055`}, {
        0.14926995547652078`, 0.25262414844441344`}, {0.17021670284850285`, 
        0.24832140967391814`}, {0.182957759801576, 0.2443026457461933}, {
        0.19033927399188327`, 0.24209441071713517`}, {0.19552843587218413`, 
        0.2403902429593}, {0.1980766760950225, 0.23937835655053247`}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.01999999999999999, 1.}}], 
       ArrowBox[{{-0.6729479155767705, 
        0.9528387197038202}, {-0.6659418645673489, 
        0.9327997017295561}, {-0.6582364667881977, 
        0.9105355923298026}, {-0.6511280431333079, 
        0.8897541860467578}, {-0.6446165936026792, 
        0.8704554828804217}, {-0.6365626309053006, 
        0.8462123331069846}, {-0.6292947132626172, 
        0.8239430871558283}, {-0.6281323782461297, 0.8203037087959848}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.6270682230054233, 
        0.8169717403879053}, {-0.6228128406746293, 
        0.803647745026953}, {-0.6171170131413367, 
        0.7853263067203585}, {-0.6153525208115348, 
        0.7795583087925553}, {-0.6136584829274256, 
        0.7739687553507041}, {-0.6087105132581659, 
        0.7569371184728316}, {-0.6044048977428959, 
        0.7415547495817653}, {-0.5969532407146467, 
        0.7137839793344114}, {-0.5912989254823174, 
        0.6914561952713916}, {-0.5890064506841345, 0.6823709561638067}}]}, 
      {Arrowheads[{{0.011139698175114197`, 1.}}], 
       ArrowBox[{{-0.5881506812879703, 
        0.6789794817662399}, {-0.5867781985637867, 
        0.6735402360523408}, {-0.5822479850254494, 
        0.6555814797237214}, {-0.5788656120822704, 
        0.64216678677638}, {-0.5744873105354646, 
        0.6247848119026485}, {-0.5719944270940596, 
        0.614866716244377}, {-0.570490089908779, 
        0.6088602551785717}, {-0.5696270988640281, 
        0.6053926980076922}, {-0.5691381795995746, 0.603406045842719}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.020000000000000007`, 1.}}], 
       ArrowBox[{{-0.3369648618331563, 
        0.9528387197038202}, {-0.3369185928541309, 
        0.9508238536673658}, {-0.33657793534861874`, 
        0.932653614460508}, {-0.3363404481850631, 
        0.915640419136505}, {-0.3362061313634639, 
        0.8997842676953566}, {-0.336048707023008, 
        0.8706792810116337}, {-0.3359073606041244, 
        0.8444748389593498}, {-0.3357820921068129, 
        0.8211709415385048}, {-0.3357380159774046, 0.8129348752679384}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.3357192975463933, 
        0.8094371489394354}, {-0.3356729015310737, 
        0.8007675887490985}, {-0.3355556663382577, 
        0.7787517942792608}, {-0.33545265305780964`, 
        0.7593026301801404}, {-0.33528929223401793`, 
        0.728104193094051}, {-0.3351702600643952, 
        0.7049056936051897}, {-0.33508299755363785`, 
        0.6874405478279155}, {-0.3350581646470693, 
        0.68232563592615}, {-0.3350361933996976, 
        0.6777259165197876}, {-0.3350167892189621, 
        0.6735894651207792}, {-0.3350131949626694, 
        0.6728142891680423}, {-0.33500969133687203`, 
        0.6720553884282697}, {-0.3350071227942249, 
        0.6714966875698951}, {-0.3349985335393055, 0.669527951826628}}]}, 
      {Arrowheads[{{0.003761036229228232, 1.}}], 
       ArrowBox[{{-0.3349832734885548, 
        0.6660302087000372}, {-0.3349496935315324, 
        0.6583333755908406}, {-0.33491971452095187`, 
        0.650124261063246}, {-0.3349171648322971, 
        0.6492862883906152}, {-0.3349152531988164, 
        0.6486153736612356}, {-0.33491302543040596`, 
        0.6477810940198194}, {-0.33491112268319767`, 
        0.6470050414955372}, {-0.3349095202833853, 
        0.6462831504875823}, {-0.3349049599141133, 
        0.6420264723017701}, {-0.33491118164448735`, 
        0.6397198335768316}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-1.0823561176440315`, -0.20030141568614634`}, \
{-1.0781616439966788`, -0.18724390592964554`}, {-1.0728690246975334`, \
-0.1705550080392279}, {-1.067812479390718, -0.15438818380418176`}, \
{-1.0629920080762325`, -0.1387434332245071}, {-1.0540592874242531`, \
-0.10902015303127233`}, {-1.046070862741595, -0.08138516745952354}, \
{-1.0418951627970716`, -0.06637965921695815}}]}, 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-1.040957440233281, -0.06300992387985518}, \
{-1.0388935138521849`, -0.055593139931045615`}, {-1.0323940205799498`, \
-0.03139873386762335}, {-1.0265723829248896`, -0.008801949269256787}, \
{-1.0214286008870044`, 0.012197213864054101`}, {-1.0189903956854185`, 
        0.022447806691020145`}, {-1.0166978638247268`, 
        0.03234105951189299}, {-1.0117854041222385`, 
        0.05567762382959219}, {-1.0084097272292103`, 
        0.07301773683081635}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-1.00774134695247, 
        0.07645105995199605}, {-1.007632064049692, 
        0.07701242229303835}, {-1.0038191900978837`, 
        0.0974258325458798}, {-1.0006872483875524`, 
        0.11599646637751182`}, {-0.9981583079139146, 
        0.13288251877809443`}, {-0.9961544376721871, 
        0.14824218473778764`}, {-0.9934778301903484, 
        0.17489836525214358`}, {-0.9922261259200571, 
        0.20179401638868427`}, {-0.9924259645340576, 0.21525316476781042`}}]}, 
      {Arrowheads[{{0.01190125193125588, 1.}}], 
       ArrowBox[{{-0.9924778930614225, 
        0.21875055569202925`}, {-0.9925384729452195, 
        0.22283061623933972`}, {-0.9956468225505216, 
        0.2525471554862984}, {-1.0003882673936555`, 
        0.27067090558222356`}, {-1.0050519856374958`, 
        0.2816196921083169}, {-1.0082491378116172`, 
        0.2902325361785054}, {-1.0093273259795923`, 
        0.2958021336536878}, {-1.0091455809599756`, 0.2995999658989484}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{0.4358477917652017, 0.5412353758644204}, {0.422933681435524,
         0.5374751934002957}, {0.4024068861690306, 0.5309926515424882}, {
        0.3835127333792202, 0.5245788185055188}, {0.36600161620997534`, 
        0.5182601364919573}, {0.3498735346612961, 0.5120366055018042}, {
        0.33512848873318235`, 0.5059082255350592}, {0.31717348731839, 
        0.498039699414254}, {0.3048607122403006, 0.4924876441529957}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{0.30167211135492106`, 0.49104984575178656`}, {
        0.3007827942692141, 0.49064883642827406`}, {0.27269433326771214`, 
        0.4773000998607907}, {0.26849417861388436`, 0.47521458044105447`}, {
        0.26442671120569505`, 0.4731943845344376}, {0.25263802780475186`, 
        0.4673321794331756}, {0.24196436376734606`, 0.4620189315252033}, {
        0.22264901198528478`, 0.45239285225239967`}, {0.2070022208656495, 
        0.44457298333138595`}, {0.1943169286485883, 0.4382112355029587}, {
        0.17624494708696667`, 0.42906994480319816`}}]}, 
      {Arrowheads[{{0.005041398257277359, 1.}}], 
       ArrowBox[{{0.1731237490905735, 0.4274911595372187}, {
        0.1715672087814422, 0.42670381989750367`}, {0.15811859531282685`, 
        0.41977637507988563`}, {0.15023994001531932`, 0.4155921004247781}, {
        0.1459423348171783, 0.41317175801238554`}, {0.14343448841898276`, 
        0.4116196759968966}, {0.1421537897391128, 0.41067287590078544`}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.8775864008711628, -0.20030141568614634`}, \
{-0.8767913966982926, -0.18941016017092405`}, {-0.8757472247737139, \
-0.17371163682444643`}, {-0.8740682205495183, -0.14374109514724615`}, \
{-0.8729350024919389, -0.11567256015771923`}, {-0.8723475706009756, \
-0.08950603185586563}, {-0.8721641421949776, -0.07480118960149472}, \
{-0.872109277775003, -0.06064478087852362}, {-0.872111791839172, \
-0.0605317552265709}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.8721895747107669, -0.05703484377878602}, \
{-0.8727131899200319, -0.03349449380239808}, {-0.8737296954067012, \
-0.008382902870887447}, {-0.8749331987490278, 
        0.01579454895117008}, {-0.8765106978026689, 
        0.03810372255432139}, {-0.8784228752067607, 
        0.058708695075890056`}, {-0.880630413600439, 
        0.07777354365319965}, {-0.8812910741516815, 0.082502340748281}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.8817750482281412, 
        0.08596647252147865}, {-0.8830937582310745, 
        0.09540537729549284}, {-0.8857733543460375, 
        0.11171130501201228`}, {-0.8890550194208557, 
        0.12896584970109318`}, {-0.892502695758856, 
        0.14483167797543992`}, {-0.8961163833600378, 
        0.1593087898350525}, {-0.8998960822244014, 
        0.17239718527993095`}, {-0.9076915669268222, 
        0.19524142876483808`}, {-0.9156272030502661, 
        0.2141980102695141}, {-0.9186838791977538, 0.2202981003207134}}]}, 
      {Arrowheads[{{0.015946865748110196`, 1.}}], 
       ArrowBox[{{-0.9202508512720528, 
        0.223425245723014}, {-0.9234906374192047, 
        0.2298907612996307}, {-0.9310695168581083, 
        0.2429435133608596}, {-0.9422086262043965, 
        0.25884562748327133`}, {-0.9513236502129006, 
        0.2712039903128496}, {-0.9636060440787712, 
        0.28969295703143966`}, {-0.9707804311808357, 
        0.30166528954766186`}, {-0.974647151327168, 
        0.3092053566997559}, {-0.9768999999689605, 
        0.3150386467771756}, {-0.9774750279181954, 0.3185712541978655}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-1.250191838276312, 
        0.5830787308573199}, {-1.2378082644864172`, 
        0.5672767645865368}, {-1.2236408921996909`, 
        0.5492430018024629}, {-1.2104046944816709`, 
        0.5324362552749009}, {-1.197972720364741, 
        0.5166889219684937}, {-1.1863449698489013`, 
        0.5020010018832415}, {-1.1755214429341514`, 
        0.488372495019144}, {-1.1634860174856996`, 0.47327408061815057`}}]}, 
      {Arrowheads[{{0.02000000000000001, 1.}}], 
       ArrowBox[{{-1.161305534711729, 
        0.4705391340651015}, {-1.1484099335785816`, 
        0.4544321717250067}, {-1.1365800417768033`, 
        0.4397336083603683}, {-1.1259007252256956`, 
        0.42654944385068316`}, {-1.122610867650112, 
        0.42250324153697666`}, {-1.1194201025867152`, 
        0.4185873805736815}, {-1.1091637264718373`, 
        0.4061277617177793}, {-1.0999177443325296`, 
        0.394995601255358}, {-1.0832511316030426`, 
        0.37512820898710114`}, {-1.0724041318287538`, 
        0.3625152288212337}}]}, 
      {Arrowheads[{{0.008552506171362056, 1.}}], 
       ArrowBox[{{-1.0701234639741641`, 
        0.3598632495630561}, {-1.069843829964292, 
        0.359538088846396}, {-1.0590041062594089`, 
        0.347312270101675}, {-1.039967554830735, 
        0.32722340991340987`}, {-1.0284953969778245`, 0.3169713173938774}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{0.32642619388704963`, 0.9528387197038202}, {
        0.31657384475688133`, 0.9434180012684694}, {0.3047514382461144, 
        0.9319402754178389}, {0.2824801290776612, 0.9099144448775899}, {
        0.2618442700295557, 0.8890315125389698}, {0.2428438611017979, 
        0.8692914784019792}, {0.22801947939379955`, 0.8534151930137469}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{0.2256323220523876, 0.8508586485341602}, {
        0.22547890229438772`, 0.850694342466617}, {0.21749344795069284`, 
        0.8419954081655855}, {0.20983126096703364`, 0.8335329588392146}, {
        0.190621371207392, 0.811229323209122}, {0.1734911281058778, 
        0.7905682514545521}, {0.1573025852228104, 0.7706705967004951}, {
        0.1429974427766365, 0.7522997759474631}, {0.13624281766673946`, 
        0.743300246405482}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{0.13414316162430093`, 0.7405027681924812}, {
        0.13029758543917405`, 0.7353791120426707}, {0.1189248978822409, 
        0.7198319278333319}, {0.10872045798430942`, 0.705564758631904}, {
        0.09952534362385204, 0.6924841397508439}, {0.08364200795729135, 
        0.6692982884979611}, {0.07085847063918271, 0.6498405007471141}, {
        0.060649556781587025`, 0.6335355093515549}, {0.05549475166859627, 
        0.6248630792598515}}]}, 
      {Arrowheads[{{0.008926256616679177, 1.}}], 
       ArrowBox[{{0.05370757887225802, 0.6218563446116341}, {
        0.0524900914965652, 0.619808047164536}, {0.04091447193882547, 
        0.5985107023350202}, {0.03172384592427075, 0.5783453343328424}, {
        0.026377691241666598`, 0.5657745170302051}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-1.250191838276312, 
        0.09014047999936754}, {-1.2485494104464703`, 
        0.09168444176431421}, {-1.2349528919726496`, 
        0.1044511762856817}, {-1.2221538027650132`, 
        0.11645723237258243`}, {-1.2101521428235613`, 
        0.1277026100250164}, {-1.198947912148294, 
        0.1381873092429836}, {-1.1834514731486585`, 
        0.1526692867050249}, {-1.1692452927492298`, 
        0.16592689371355523`}, {-1.156329370950008, 
        0.17796013026857463`}, {-1.1480014582274143`, 
        0.18570293960191137`}}]}, 
      {Arrowheads[{{0.01969026403751418, 1.}}], 
       ArrowBox[{{-1.145439805994262, 
        0.18808461499649162`}, {-1.1447037077509927`, 
        0.18876899637008313`}, {-1.1412439275668975`, 
        0.19198179774739213`}, {-1.1378883374373898`, 
        0.1950960787284789}, {-1.1267971353131285`, 
        0.2053651825766297}, {-1.1168424366118126`, 
        0.21456434709648525`}, {-1.0989876245000734`, 
        0.23103135842372569`}, {-1.084804580466895, 
        0.24405353737934524`}, {-1.0735196400378937`, 
        0.2543685487679777}, {-1.054411708060803, 
        0.2717017824403314}, {-1.043871857891013, 0.28112692889403673`}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.498421206911782, 
        0.9528387197038202}, {-0.49701334854460644`, 
        0.9433168537834417}, {-0.4928955829606987, 
        0.9154741022219455}, {-0.48905972782647317`, 
        0.8898870017467004}, {-0.48550578314193005`, 
        0.8665555523577062}, {-0.48223374890706927`, 
        0.8454797540549632}, {-0.48116255889326587`, 
        0.8386552475039162}, {-0.48011877359635324`, 
        0.8320473550338287}, {-0.4772811471345882, 0.8145354609001184}}]}, 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-0.47671301062230687`, 
        0.8110841367619498}, {-0.4744047180868345, 
        0.7971254240131611}, {-0.46929874815063916`, 
        0.7669055723225967}, {-0.4649134818781702, 
        0.7422004721693727}, {-0.46112727644740437`, 
        0.7219935096764597}, {-0.4567225579097485, 
        0.7002276303692765}, {-0.45306902353538464`, 
        0.6837937769561064}, {-0.4505982796625372, 0.6736683340469052}}]}, 
      {Arrowheads[{{0.003269192197421721, 1.}}], 
       ArrowBox[{{-0.4497691040072532, 
        0.6702702599480299}, {-0.44758345721796194`, 
        0.6613131834870276}, {-0.4442733846730167, 0.6480706838758873}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.028528024025117945`, -0.20030141568614634`}, \
{-0.021743705956715906`, -0.18870587153922788`}, {-0.012926754851531122`, \
-0.17391130831518503`}, {-0.004674435622593176, -0.16035688992948124`}, {
        0.009588318796586899, -0.1373157092339584}, {
        0.020496568890869003`, -0.11992955101352701`}, {
        0.033044037613782634`, -0.09589079790152}, {
        0.03429653595036438, -0.0923105410847626}, {
        0.03523346672640301, -0.088956385585018}, {
        0.03533434517227419, -0.08844602168237953}, {
        0.03550082849011536, -0.08752947440958822}, {
        0.03564566923672539, -0.08662762042583351}, {
        0.03576958204676292, -0.08574016461898556}, {
        0.036039345679593056`, -0.07763600682997146}}]}, 
      {Arrowheads[{{0.011072748808769562`, 1.}}], ArrowBox[CompressedData["
1:eJwBgQF+/iFib1JlAgAAABcAAAACAAAAQRy9BBsooj8ywCOx8P2yv+LlrZSa
16E/a1pSAh8Ssr9EByxzE7igP70EF9AXh7C/a/3N8Gv9mj8IJ35Y0OKrv+p/
sAlFFZQ/2Urx5hrep79SSLe9Iz2NP1D7AAMlhKS/+cR7ByQjhj8MVg0FKOWh
v64mYKct2oA/InxGUE1In7/UiEcvg/B5P1sO6AEiaZu/DO/CNbaUdT+XF3zx
vJ+Yv7gGGRhUlHI/tf0UEvcllr/ezN9okV5wP+KRhC/i+JO/X0Kou+ZkbT+A
eUsHOSeSv9W6SgHppmo/ZcEdRj6PkL/L4U9I62BoP1YYuqVNVI6/vo+vXv8o
Zj9t+vDbPH2Lv54HjjKNUmQ/PsXrvjQRib+2h2MEfcdiP0R7FFXcAIe/f0/4
G8RnYD95F7dXDciDvxi5011+a10/GYpJ8jdwgb9Nbkuo7fNaP6xC/hxAd3+/
kgIU59QVWD8PUhqVAaJ7v3t6v3WJPlY/ELOirDd5eb8B3LAV
        "]]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.39989601766869043`, 
        0.17449661305143094`}, {-0.40661518439666255`, 
        0.19746719112351882`}, {-0.41322632849687957`, 
        0.21923651091564444`}, {-0.41972944996934164`, 
        0.23980457242780792`}, {-0.4261245488140485, 
        0.2591713756600092}, {-0.43242596762447205`, 
        0.2774532974779034}, {-0.43864804899408427`, 
        0.2947667147471459}, {-0.44340606534325083`, 0.3074270767696686}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.44463656993961637`, 
        0.3107012634300601}, {-0.4447907929228851, 
        0.3111116274677367}, {-0.4508541994108745, 
        0.32648803563967566`}, {-0.46202477984779855`, 
        0.3548884982150141}, {-0.471441570088236, 
        0.38052126235057687`}, {-0.47918416878745623`, 
        0.4036118404113198}, {-0.4854621230078829, 
        0.4244959873986627}, {-0.49057757987403505`, 0.44274911801101113`}}]}, 
      {Arrowheads[{{0.01999999999999999, 1.}}], 
       ArrowBox[{{-0.49151486060457067`, 
        0.44611896453652267`}, {-0.49621573544139697`, 
        0.4632386355631932}, {-0.5006009445854888, 
        0.4796286284785195}, {-0.5043250890144704, 
        0.49403106728255325`}, {-0.510474643218227, 
        0.518324023479971}, {-0.5153488575437906, 
        0.5375682450786744}, {-0.515920616660203, 
        0.5398247372214862}, {-0.5164743610354381, 
        0.5420098977718063}, {-0.5199159370621651, 
        0.5555792045298354}, {-0.5226666954330633, 
        0.566413748061542}, {-0.5265214246211594, 0.5815761099996931}}]}, 
      {Arrowheads[{{0.0030797746574373398`, 1.}}], 
       ArrowBox[{{-0.5273848358672267, 
        0.5849656464408542}, {-0.5295581036313566, 
        0.5934750865811658}, {-0.5310925708256087, 
        0.5994397518928632}, {-0.5321572650865664, 
        0.6035278863090057}, {-0.5327698974411079, 0.6058264090704565}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.21180811894261672`, -0.03926429796491834}, \
{-0.20363772028934018`, -0.00916947963923806}, {-0.1953552197073939, 
        0.019216980836613405`}, {-0.1869564145930046, 
        0.045972614933689704`}, {-0.17928530940552145`, 
        0.06829542441289721}, {-0.1712449879254042, 
        0.08929869955003891}, {-0.16927268770268994`, 0.09391515379557076}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.1678984848147904, 
        0.09713167462896373}, {-0.16283545015265288`, 
        0.10898244034511484`}, {-0.15405669608726744`, 
        0.12734664679812496`}, {-0.14514613268592697`, 
        0.14458971895822176`}, {-0.1363411669053106, 
        0.16091005687455762`}, {-0.12764179874541826`, 
        0.1763076605471326}, {-0.11904802820624996`, 
        0.19078252997594666`}, {-0.11061635282186896`, 
        0.2044605422341766}, {-0.10240327012633851`, 
        0.21746757439499909`}, {-0.10089527536888011`, 
        0.21976260802129619`}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.09897452531310552, 
        0.222685818426314}, {-0.0866328828018292, 
        0.24146869842442192`}, {-0.07167591520777064, 
        0.2628891842678505}, {-0.057605725116524065`, 
        0.2820346703722603}, {-0.03878097201107842, 
        0.3064350662296004}, {-0.02171961712321192, 
        0.32700211158561376`}, {-0.01497904354975678, 
        0.33440317529558183`}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.012623825963822397`, 
        0.3369891741300108}, {-0.006170113869412528, 0.34407526759906193`}, {
        0.008119084333831801, 0.3579939954287064}, {0.0289418433223021, 
        0.37585228938526477`}, {0.04661336743949773, 0.38895144888625965`}, {
        0.04902176520473941, 0.3905553996661612}, {0.05136574619686595, 
        0.39208867456671936`}, {0.06085193042314421, 0.3976327406248914}, {
        0.06937073855032404, 0.4020418329811921}, {0.08431822390106027, 
        0.4095115032414615}, {0.09553920519804693, 0.41482725270177073`}, {
        0.10056633469204455`, 0.4171772662931216}}]}, 
      {Arrowheads[{{0.0016850133909129584`, 1.}}], 
       ArrowBox[{{0.10373498906469854`, 0.4186585054079924}, {
        0.10391566484215316`, 0.41874296524399884`}, {0.11446270664268428`, 
        0.4235435187991954}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.5597604897140597, -0.20030141568614634`}, \
{-0.5595062071648781, -0.1844394974732738}, {-0.5596562535721581, \
-0.16889305605439328`}, {-0.5611751134123485, -0.13910716458056727`}, \
{-0.5643189959533792, -0.11106392825865447`}, {-0.5672074920217838, \
-0.09122617859643439}, {-0.5704856650128354, -0.07236668717033075}, \
{-0.5732167245074209, -0.061435475236124734`}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.574064550478823, -0.05804200636622498}, \
{-0.5772051571163899, -0.04547156005215474}, {-0.5844450321016876, \
-0.020489441515288555`}, {-0.5919201804800707, 
        0.0035897480806704133`}, {-0.5998658756446245, 
        0.025863079794814947`}, {-0.6082310322539534, 
        0.046438291485007846`}, {-0.616964564966662, 
        0.06542312100911192}, {-0.621062584455266, 0.07340813630443077}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.6226596468402384, 
        0.07652002184012589}, {-0.6259651244294289, 
        0.08296076454069569}, {-0.6351313612889325, 
        0.0991944182533277}, {-0.6454005597887125, 
        0.11578663367752351`}, {-0.655549857789177, 
        0.13115814874508708`}, {-0.6653790031019273, 
        0.1455675910553426}, {-0.6746877435385654, 
        0.15927358820761414`}, {-0.6920095126128728, 
        0.18454424637370154`}, {-0.698680581044425, 
        0.19384736573854003`}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.7007188757025244, 
        0.19668986371312605`}, {-0.7080461706708354, 
        0.20690812191434138`}, {-0.7227915638242388, 
        0.22677660391271548`}, {-0.7362356344293992, 
        0.2445017163332951}, {-0.7484173749338329, 
        0.2603815957426174}, {-0.7594228759985231, 
        0.2746308087499307}, {-0.7697375258523925, 
        0.2879158041666935}, {-0.779003223571904, 
        0.29974333895608285`}, {-0.785485492866997, 0.3079850498975406}}]}, 
      {Arrowheads[{{0.016180098288669793`, 1.}}], 
       ArrowBox[{{-0.7876472252654009, 
        0.3107348406527823}, {-0.7947887028664444, 
        0.3198433559137088}, {-0.8074938783866359, 
        0.3360664586714246}, {-0.8177459986242794, 
        0.34904918680452746`}, {-0.832751678999353, 
        0.3677503433763635}, {-0.8425756051534959, 
        0.3796037628257378}, {-0.8507519495650668, 
        0.3889289942931597}, {-0.8554740559397941, 
        0.39368290474074086`}, {-0.8583701245733907, 
        0.3960151040761078}, {-0.8603510325254694, 0.3971282303761227}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{0.4358477917652017, 0.05469549816507474}, {
        0.43018288882497935`, 0.060303223610046586`}, {0.41699234532960955`, 
        0.07261970761998013}, {0.40118163779148275`, 0.08654395495619009}, {
        0.3864975041764075, 0.09877387880115182}, {0.37293994448438383`, 
        0.10930947915486539`}, {0.3605089587154118, 0.11815075601733072`}, {
        0.3357300794955765, 0.13359998658481032`}, {0.32490519852207245`, 
        0.13898467547666687`}}]}, 
      {Arrowheads[{{0.01850894882142874, 1.}}], 
       ArrowBox[{{0.32177348729229643`, 0.14054250236758173`}, {
        0.3145814744337155, 0.14412007073479813`}, {0.31095410570889653`, 
        0.14563145547325176`}, {0.3074163456916815, 0.14701708623619722`}, {
        0.29508826600140264`, 0.1504867608830357}, {0.28407107707785745`, 
        0.15343391926971525`}, {0.2649412228828546, 0.1585651660257734}, {
        0.2499522724899636, 0.1626185799166742}, {0.23819138160404843`, 
        0.16583695450756825`}, {0.21919177253464975`, 0.17117334461104558`}, {
        0.20896746828860246`, 0.17424014675153415`}, {0.20328695243407646`, 
        0.17613213838556416`}, {0.2000105577755419, 0.17740290571256886`}, {
        0.19814953675192426`, 0.1783082772869137}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.01999999999999999, 1.}}], 
       ArrowBox[{{-1.250191838276312, -0.16448553837591767`}, \
{-1.2441792429519278`, -0.15407892447919153`}, {-1.2356342940460567`, \
-0.13922902441482873`}, {-1.2274196827101465`, -0.12489059065018257`}, \
{-1.2195354089441968`, -0.11106362318525301`}, {-1.2045986840686607`, \
-0.08471129288861012}, {-1.1906649293659282`, -0.05993923925896656}, \
{-1.1811178104280915`, -0.042816175106927826`}}]}, 
      {Arrowheads[{{0.020000000000000007`, 1.}}], 
       ArrowBox[{{-1.1794144649578966`, -0.039761170351132975`}, \
{-1.1777341448360001`, -0.03674746229632228}, {-1.1658063304788762`, \
-0.015135962000677282`}, {-1.1601099431359612`, -0.004755853049386805}, \
{-1.1546279803882673`, 0.005281999185610955}, {-1.1419842655792425`, 
        0.028822243157079357`}, {-1.1304980077651918`, 
        0.0504745064318163}, {-1.1195428358394728`, 
        0.07125405729602778}, {-1.1131893797250971`, 
        0.08347810285032499}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-1.1115762801017688`, 
        0.08658170550755746}, {-1.109649835690418, 
        0.09028818333918837}, {-1.1007241925749174`, 
        0.10771864723960141`}, {-1.0926710917498603`, 
        0.12368721167557026`}, {-1.0788747595024322`, 
        0.15170557769953866`}, {-1.0713912746640695`, 
        0.16738633006054687`}, {-1.064942049389579, 
        0.18127097450260826`}, {-1.0593505620573105`, 
        0.19362997743761162`}, {-1.0544402910456137`, 
        0.20473380527744553`}, {-1.0510550611464182`, 
        0.2126889344247782}}]}, 
      {Arrowheads[{{0.0035018150968154993`, 1.}}], 
       ArrowBox[{{-1.049685465243035, 
        0.21590741961352747`}, {-1.0464236479215903`, 
        0.22357253507681302`}, {-1.0404126198928183`, 0.2385803627111268}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-0.8193898412254967, 
        0.9528387197038202}, {-0.8189542632295601, 
        0.9518647438860266}, {-0.8121031415278618, 
        0.9365711742144668}, {-0.80549696314771, 
        0.9218512177837199}, {-0.7991357280891049, 
        0.9077048745937863}, {-0.7871480879365347, 
        0.8811330279363591}, {-0.7761402210701512, 
        0.8568556342421848}, {-0.7721289871943783, 
        0.8480345004973412}, {-0.7682376004339351, 
        0.8394931699047292}, {-0.7617493164323712, 0.8253533290961376}}]}, 
      {Arrowheads[{{0.020000000000000007`, 1.}}], 
       ArrowBox[{{-0.7602871176575341, 
        0.822175844439002}, {-0.7548037416033944, 
        0.8102738452320141}, {-0.7427831093674011, 
        0.7843346424778552}, {-0.731397572644362, 
        0.7598659804157801}, {-0.7212822269472311, 
        0.7383383997378722}, {-0.7122934682582862, 
        0.7194114650984117}, {-0.7042876925598052, 
        0.7027447411516787}, {-0.7007705770626695, 0.6955579318575069}}]}, 
      {Arrowheads[{{0.017602244298971323`, 1.}}], 
       ArrowBox[{{-0.6992330607808089, 
        0.6924161992890384}, {-0.6907922996466469, 
        0.6751685028121145}, {-0.6796504743202108, 
        0.653020142836092}, {-0.6710116744845741, 
        0.6361001121399718}, {-0.6590192648584684, 
        0.6124034093036052}, {-0.6521269860131631, 
        0.5980622748765085}, {-0.6484969247630814, 
        0.5898549656655635}, {-0.6464745483053166, 
        0.5845947855725447}, {-0.6456529768659741, 0.5816422395732325}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-1.16259450656981, 
        0.9528387197038202}, {-1.1555819406282237`, 
        0.9435676378200784}, {-1.1428384347340064`, 
        0.9267190658534801}, {-1.1305499083822257`, 
        0.9104712037158303}, {-1.1187163615728815`, 
        0.8948240514071293}, {-1.1073377943059735`, 
        0.8797776089273767}, {-1.0974600464354858`, 
        0.8667153613461669}, {-1.0878899517393261`, 
        0.8540593096720557}, {-1.0782022212590103`, 0.8412455037057183}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-1.0760927882307476`, 
        0.8384553904198395}, {-1.074463920286302, 
        0.8363009128745236}, {-1.0616643303224156`, 
        0.8193695996587931}, {-1.04941805648864, 
        0.8031688164479591}, {-1.0377494739046504`, 
        0.7877307477676564}, {-1.0260568401576742`, 
        0.7722609281193568}, {-1.0148937953345103`, 
        0.7574903210655941}, {-1.004260339435159, 
        0.7434189266063688}, {-0.9941564724596202, 
        0.7300467447416803}, {-0.9917324382446733, 0.7268380308265671}}]}, 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-0.989624044174393, 
        0.724047132352389}, {-0.9753457907698702, 
        0.7051468915471624}, {-0.9582700357551499, 
        0.6825376342332875}, {-0.9427753912928972, 
        0.6620158795094657}, {-0.9287080412605498, 
        0.6433785340851069}, {-0.913875597329591, 
        0.6237193555261717}, {-0.9053264055838515, 0.6123824088778766}}]}, 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-0.9032204188024644, 
        0.6095896934384906}, {-0.9007426138264805, 
        0.6063039158289745}, {-0.8890430730581079, 
        0.5907809835215825}, {-0.8785109573313628, 
        0.5767993271320627}, {-0.8605880730713855, 
        0.5529832882569004}, {-0.8462521051838093, 
        0.5339026915040079}, {-0.8347533395893163, 
        0.5185676646621524}, {-0.8256657754125466, 
        0.5064157570273425}, {-0.8191965712233408, 0.4977190757044782}}]}, 
      {Arrowheads[{{0.006026014216339542, 1.}}], 
       ArrowBox[{{-0.8171089311127484, 
        0.494912619109872}, {-0.8128290121259403, 
        0.48915903792317017`}, {-0.8030108202752233, 
        0.47580453245299426`}, {-0.7978004598314683, 
        0.46853096364393015`}, {-0.7950393723726745, 
        0.4644883938973847}, {-0.7935099194339874, 
        0.4620690455902747}, {-0.7926854316542653, 0.4605775813472075}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.046270971218346134`, 
        0.9528387197038202}, {-0.04640143997775591, 
        0.9523260138932099}, {-0.05359893101578655, 
        0.9246293073692631}, {-0.0603514899116223, 
        0.8992684844170382}, {-0.06665911666526314, 
        0.8762435450365348}, {-0.06889162784127462, 
        0.8682246949272718}, {-0.07107260860500175, 
        0.8604668434330414}, {-0.07608606443991607, 
        0.8432021666089645}, {-0.08083207398312743, 
        0.8272351200103297}, {-0.08363666918411007, 0.8180226295165094}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.08465535127629056, 
        0.8146764784972287}, {-0.08981964054854281, 
        0.7977129017887992}, {-0.0978587907318427, 
        0.7726498774512344}, {-0.10506179028069533`, 
        0.7513770350846206}, {-0.11547545623113276`, 
        0.7230241027228943}, {-0.12419240580248327`, 
        0.7015831254801961}, {-0.1314526538247628, 
        0.6850431691058405}, {-0.13227168461769506`, 0.6832344948982524}}]}, 
      {Arrowheads[{{0.007410229149432891, 1.}}], 
       ArrowBox[{{-0.13371455624983858`, 
        0.6800481864853837}, {-0.13723558916399245`, 
        0.6722726529268722}, {-0.14516074593675998`, 
        0.6546879155691994}, {-0.14976280819528334`, 
        0.6445490928926214}, {-0.15269458202084876`, 
        0.6382428326483465}, {-0.154362156914272, 
        0.6348200599315481}, {-0.15535076809921808`, 
        0.6329461296590432}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{0.4358477917652017, 0.3977419737768943}, {
        0.4246837712076024, 0.39711553557110296`}, {0.4041519259471754, 
        0.395735980161887}, {0.38531870970246496`, 0.3942242710611059}, {
        0.368184122473471, 0.3925804082687598}, {0.36172191983819535`, 
        0.3919018825464772}, {0.35548353054107007`, 0.3912094148025258}, {
        0.3416221263166294, 0.3893954128607678}, {0.3288732429726214, 
        0.38753948051310916`}, {0.30543662786775405`, 0.3837643111622554}, {
        0.2969311388566496, 0.3820923168003212}}]}, 
      {Arrowheads[{{0.016826452345679033`, 1.}}], 
       ArrowBox[{{0.2934990470859089, 0.3814176421187329}, {
        0.2857964784832692, 0.379903484466044}, {0.26935645854209783`, 
        0.37602902535595406`}, {0.24891493095604125`, 0.36995139356878204`}, {
        0.23363923926742014`, 0.3641367338741187}, {0.21300853887589707`, 
        0.35438748801415715`}, {0.2005129426036947, 0.34806715952226447`}, {
        0.1930170803394003, 0.344375680929567}, {0.18825068573051063`, 
        0.3420278167327499}, {0.18551989065441202`, 0.34068204390449897`}, {
        0.1839373357343966, 0.33990157192699577`}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{0.4358477917652017, 0.6639405394589256}, {
        0.42379328111029335`, 0.6584728665816408}, {0.3991655651149701, 
        0.6469305546539992}, {0.37676239230100134`, 0.6360255516391813}, {
        0.36783320504737355`, 0.6315857448118982}, {0.3591839386461824, 
        0.6272841887601551}, {0.3337164748282766, 0.6146067585133234}, {
        0.3106766892081735, 0.6031290657869176}, {0.3100151424833822, 
        0.6027993756879296}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{0.30688458836136095`, 0.6012392248177064}, {
        0.28874211016908014`, 0.5921976934988301}, {0.2690179442920063, 
        0.5823589620873791}, {0.25128694137011504`, 0.5735037392618779}, {
        0.23533185119656932`, 0.5655228927316395}, {0.2080678082558209, 
        0.5518487511175494}, {0.1836353460891792, 0.5395343196134815}, {
        0.1817819864893467, 0.5385943053920171}}]}, 
      {Arrowheads[{{0.01339700714722973, 1.}}], 
       ArrowBox[{{0.17866250919824928`, 0.537012122950233}, {
        0.16444074435899575`, 0.5297989187752691}, {0.13696103935757237`, 
        0.5157001132749778}, {0.11981432760491716`, 0.5066898875442193}, {
        0.10946765828193343`, 0.501028999590041}, {0.1020837388387025, 
        0.49671306397400583`}, {0.09824477523246544, 0.4941446788449457}, {
        0.09628876173049294, 0.49250558559794766`}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-1.250191838276312, 
        0.335814326253305}, {-1.2377760406725724`, 
        0.3279093488381177}, {-1.2234544841395667`, 
        0.3197542731460491}, {-1.209918504489346, 
        0.31270667431672394`}, {-1.1852032758372597`, 
        0.30193390724630403`}, {-1.1819384564479112`, 
        0.3007266991346832}, {-1.1787321378369062`, 
        0.2995832584218388}, {-1.159994627394194, 
        0.29420223346615265`}, {-1.143395687412039, 
        0.29043225907371356`}, {-1.1206278684123037`, 
        0.2865981499079556}}]}, 
      {Arrowheads[{{0.006047693160292577, 1.}}], 
       ArrowBox[{{-1.1171786576309983`, 
        0.28601730153282634`}, {-1.1140663313963075`, 
        0.28549318464032136`}, {-1.091721173723807, 
        0.28437424082229856`}, {-1.0749530950109225`, 
        0.28494095334933284`}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.38288840992309475`, -0.11988333017658609`}, \
{-0.3815064969937123, -0.09844234577827203}, {-0.3808622393158748, \
-0.07763372007103246}, {-0.3809398756824183, -0.05749253690485212}, \
{-0.3817137793764763, -0.03803963248863604}, {-0.383126260774649, \
-0.019249538197779806`}, {-0.38511963025353657`, -0.001096785407679407}, \
{-0.38763619818973916`, 0.016444094506269283`}, {-0.38818566020507195`, 
        0.019568038349608394`}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.3887915736333679, 
        0.023012934395380043`}, {-0.3906182749598569, 
        0.033398570168670406`}, {-0.3940081709404901, 
        0.04979211020412798}, {-0.39774819650823884`, 
        0.06565018323724639}, {-0.40426389304428967`, 
        0.09033491236432012}, {-0.41117275803795983`, 
        0.11378628524036649`}, {-0.41847479148924965`, 
        0.1360043018653858}, {-0.4261699933981587, 
        0.15698896223937786`}, {-0.4263975541655698, 0.157561549635097}}]}, 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-0.42768937808474133`, 
        0.16081203126258217`}, {-0.43407111094426826`, 
        0.1768697192365853}, {-0.4419908913071592, 
        0.19577602573125072`}, {-0.4499293344868315, 
        0.21370788172337413`}, {-0.45788644048328525`, 
        0.23066528721295554`}, {-0.4658288233532246, 
        0.2467184035910496}, {-0.473723097153354, 
        0.26193739224871093`}, {-0.4815692618836731, 
        0.27632225318593945`}, {-0.4877296999863462, 0.2870272874742506}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.4894773081059097, 
        0.29005715897543294`}, {-0.5043121529836696, 
        0.31489721346549476`}, {-0.5181066239121727, 
        0.33754679110201724`}, {-0.5266613625904717, 
        0.3514291173451072}, {-0.5347414886680144, 
        0.3645172829830154}, {-0.5494779030208311, 
        0.3883111324432867}, {-0.5625047463093933, 
        0.40928414342307934`}, {-0.5625542327390005, 0.40936374377148677`}}]}, 
      {Arrowheads[{{0.01999999999999999, 1.}}], 
       ArrowBox[{{-0.5644009663907643, 
        0.4123342680801242}, {-0.5740108978724715, 
        0.42779211986264165`}, {-0.5831779318848015, 
        0.4425235738273166}, {-0.5914874531751919, 
        0.45586465409401233`}, {-0.605533957590154, 
        0.47837569353346654`}, {-0.6072968773201001, 
        0.4811963544779195}, {-0.609004600943985, 
        0.4839275030847064}, {-0.6167284008257873, 
        0.4962444433073289}, {-0.623329090080158, 
        0.5067390563848758}, {-0.6345793113642779, 
        0.5245615256153286}, {-0.6386380510608781, 0.5309250420721188}}]}, 
      {Arrowheads[{{0.004505151050203923, 1.}}], 
       ArrowBox[{{-0.6405189647388979, 
        0.5338740425103352}, {-0.6425333370916434, 
        0.5370322868361628}, {-0.6482075518454702, 
        0.545797695625576}, {-0.6541467111299193, 
        0.5552663000403643}, {-0.6570411006484467, 0.5606940315081964}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.330748691102057, 
        0.10766321371650092`}, {-0.3320305104159347, 
        0.13179003909126347`}, {-0.3334714790060929, 
        0.15476502381096705`}, {-0.3348250162261121, 
        0.1766892374365531}, {-0.33584454142957254`, 
        0.19766374952896293`}, {-0.33653005461647406`, 
        0.21768856008819654`}, {-0.3368815557868168, 
        0.2367636691142539}, {-0.3368836755180565, 0.24741362552758644`}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.33688437170360896`, 
        0.2509114018732221}, {-0.33688517957590103`, 
        0.2549703148791914}, {-0.3365270606190271, 
        0.2723897356550655}, {-0.3358071989161952, 
        0.2890219314418762}, {-0.334725594467405, 
        0.3048669022396233}, {-0.3323311060719493, 
        0.33439567556176286`}, {-0.3303265582484006, 
        0.3612991917961603}, {-0.32927677948228345`, 
        0.3778749790002851}, {-0.32860007163547394`, 0.3905435633684905}}]}, 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-0.32842260684103963`, 
        0.39403676786246705`}, {-0.3274151072208958, 
        0.4219582404036742}, {-0.3271008461114432, 
        0.4470501970399634}, {-0.3273526284279717, 
        0.4691924852866303}, {-0.3277789448388963, 
        0.4868089426529596}, {-0.32810332321513425`, 
        0.502769009085281}, {-0.3284462658635504, 
        0.5297199691479012}, {-0.3284661530654036, 
        0.5331003443928605}, {-0.3284709579116105, 0.533915545847496}}]}, 
      {Arrowheads[{{0.013003686691802121`, 1.}}], 
       ArrowBox[{{-0.3284916483173379, 
        0.5374132610649899}, {-0.32857338577083833`, 
        0.5511140406493219}, {-0.32864934852731637`, 
        0.5636917433043848}, {-0.32878045033903264`, 
        0.5850885752166104}, {-0.3288763333357122, 
        0.6001311644257393}, {-0.3289477884354633, 
        0.6107703861287812}, {-0.32903196423499137`, 
        0.622178333600437}, {-0.3290873154446657, 0.6283792603445683}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{0.4358477917652017, -0.13070843161574755`}, {
        0.4307691262213818, -0.12131147150794269`}, {
        0.4202671919866562, -0.1018742804791875}, {
        0.410289817995005, -0.08357101954599179}, {
        0.4008000608962471, -0.06650233721979523}, {
        0.3917979206903825, -0.05066823350059782}, {
        0.38328339737741113`, -0.036068708388399554`}, {
        0.37754637584851863`, -0.026369862623418894`}, {
        0.3720103778594025, -0.017261151262211335`}, {
        0.36666421845060315`, -0.009145388911155402}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{0.36474006447779656`, -0.006224417953118501}, {
        0.3614293060803126, -0.0011985056483867183`}, {0.3515776952563113, 
        0.01293398663988548}, {0.3331090027914853, 0.03772572002275233}, {
        0.3165711293711353, 0.056567404680441684`}, {0.30148679526573813`, 
        0.071238609883467}, {0.2886183703963636, 0.0822322198875394}, {
        0.27690404972435456`, 0.09085512997351855}, {0.26983471638753875`, 
        0.09494525808511668}}]}, 
      {Arrowheads[{{0.012871103500514298`, 1.}}], 
       ArrowBox[{{0.2668071578970855, 0.09669692284632148}, {
        0.25660313142340685`, 0.10260070097404562`}, {0.23989308737273787`, 
        0.10903234669599031`}, {0.2181368663852671, 0.11508107896797655`}, {
        0.20420759967242588`, 0.11892265594669622`}, {0.19524132506820077`, 
        0.12148048943186665`}, {0.18805838650190237`, 0.1236546001731081}, {
        0.18414727942429976`, 0.12498276213780969`}, {0.18196198717736667`, 
        0.12586498623573303`}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.01999999999999999, 1.}}], 
       ArrowBox[{{0.4358477917652017, 0.9148058321182554}, {
        0.43041048745802857`, 0.9110083944257006}, {0.4157042190111962, 
        0.9006686429460118}, {0.4015584339947627, 0.8906515079076275}, {
        0.3879564316103011, 0.8809830097490516}, {0.37482936337429457`, 
        0.8715854643596579}, {0.3599282083313595, 0.8606219188746462}, {
        0.34569929876317845`, 0.8500205934454989}, {0.332068514161886, 
        0.8397497494432136}, {0.3226692221848164, 0.832574682663926}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{0.3198889348020716, 0.8304523156084636}, {
        0.3190605613634373, 0.829819966410791}, {0.30602830092847694`, 
        0.8198797859168083}, {0.29357025702333694`, 0.810259871469568}, {
        0.28168642964801727`, 0.8009602230690702}, {0.270376818802518, 
        0.7919808407153147}, {0.24928687483866946`, 0.7749002703237053}, {
        0.23010705326948014`, 0.758935556470414}, {0.21267866153732462`, 
        0.7440158706526444}, {0.21104889640592608`, 0.74258063680389}}]}, 
      {Arrowheads[{{0.01999999999999999, 1.}}], 
       ArrowBox[{{0.20842389971372835`, 0.7402689637701948}, {
        0.19684300708457747`, 0.7300703843676001}, {0.17931896675416986`, 
        0.7140666222094048}, {0.16390112501060375`, 0.6993970598837176}, {
        0.15026928175334348`, 0.685914697414048}, {0.1381032368818532, 
        0.6734725348239059}, {0.11758741865375452`, 0.6515030871258018}, {
        0.10905713906101969`, 0.6419167616352264}}]}, 
      {Arrowheads[{{0.006488513989881258, 1.}}], 
       ArrowBox[{{0.10673195736599929`, 0.6393037231866182}, {
        0.10119142304145086`, 0.6330772724766012}, {0.08786700898351252, 
        0.6176996575267999}, {0.07702978002179423, 0.6049819587649741}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.0936678779392926, 
        0.058262951523933855`}, {-0.08159219564394118, 
        0.07384056273827073}, {-0.06937924467968384, 
        0.08742844006821524}, {-0.05429267642168781, 
        0.10246314376732642`}, {-0.039553075780062376`, 
        0.11538811028066354`}, {-0.025342242807504554`, 
        0.12605435968760997`}, {-0.011841977556711358`, 0.1343129120675491}, {
        0.0030548647999149112`, 0.14102108066449895`}, {0.013674556336706537`,
         0.14423885666837022`}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{0.01702602564344371, 0.14523720533299975`}, {
        0.031013165509834822`, 0.1480090603804792}, {0.05446048461147645, 
        0.15083452396026265`}, {0.07384710395850014, 0.15123307349569348`}, {
        0.08973393116476557, 0.1494598341262778}, {0.09259693256981129, 
        0.14889767152901248`}, {0.09533886916977875, 0.14825695677635023`}, {
        0.1057947833201235, 0.14563029343732722`}, {0.11494760983643997`, 
        0.14334082057872727`}, {0.1309448478650751, 0.1393591974823573}, {
        0.14292738810416253`, 0.13641641939531418`}, {0.15193236135188867`, 
        0.13424414542096244`}, {0.154486884791473, 0.13365092199278508`}}]}, 
      {Arrowheads[{{0.0023891497669298848`, 1.}}], 
       ArrowBox[{{0.15789399757488726`, 0.1328597062637594}, {
        0.16395778963465107`, 0.1314515439984591}, {0.17051576689873982`, 
        0.1300741179404587}, {0.17424752658068918`, 0.12942846997715166`}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-1.250191838276312, 
        0.7194921283976062}, {-1.2445737530105903`, 
        0.7121239267037167}, {-1.2340686222751898`, 
        0.698349690867814}, {-1.2239705906566734`, 
        0.68511276960488}, {-1.2142796581550412`, 
        0.672413162914915}, {-1.206242183748166, 
        0.661881972355631}, {-1.1984545685017907`, 
        0.6516805383347299}, {-1.1868754290994157`, 
        0.6365246354895167}, {-1.175867678233331, 
        0.6221227869635828}, {-1.165361240875643, 
        0.6083824907508861}, {-1.1652884294027082`, 0.6082873134460576}}]}, 
      {Arrowheads[{{0.020000000000000007`, 1.}}], 
       ArrowBox[{{-1.1631631738251618`, 
        0.6055092334294147}, {-1.155379475368983, 
        0.5953345808534406}, {-1.145374628351744, 
        0.58225619273683}, {-1.1358482901643754`, 
        0.5698092344971408}, {-1.1268004608068767`, 
        0.5579937061343729}, {-1.1182311402792482`, 
        0.5468096076485262}, {-1.102343749931301, 
        0.5260924024082825}, {-1.0880018433382326`, 
        0.5074143208770961}, {-1.0780466361250265`, 0.4944675046631313}}]}, 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-1.0759145266032075`, 
        0.4916946814023137}, {-1.075059782770036, 
        0.490583081102984}, {-1.0633719304967046`, 
        0.47540640113396304`}, {-1.051368592759768, 
        0.4598513813940741}, {-1.0407872123673547`, 
        0.4461719580374908}, {-1.031392298096981, 
        0.43405722254110585`}, {-1.022948358726164, 
        0.42319626638181196`}, {-1.0086120743568006`, 
        0.4048378820828675}, {-0.9971756986064655, 
        0.390301185157398}, {-0.9899806202498066, 0.3812863756220521}}]}, 
      {Arrowheads[{{0.0073241312525862655`, 1.}}], 
       ArrowBox[{{-0.9877986788836802, 
        0.37855259221374243`}, {-0.9807837605764019, 
        0.3697635076045944}, {-0.9705687018223773, 
        0.3573538067277086}, {-0.9628850769674636, 
        0.34847360971185515`}, {-0.9584561324834742, 
        0.3438526712298326}, {-0.9557648702341427, 
        0.3414892751907363}, {-0.9539541792935422, 0.3402528932220511}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.27037851655613077`, 
        0.12582641593831642`}, {-0.2649051245211292, 
        0.15175175253225062`}, {-0.25924118426829756`, 
        0.17624983678372075`}, {-0.25344459280643045`, 
        0.19940874261050215`}, {-0.2472064407591812, 
        0.22315852724257446`}, {-0.24116097963457195`, 
        0.2455872749599123}, {-0.23672225600613492`, 0.2615953004672541}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.235787651754599, 
        0.264965902007302}, {-0.23530820943260278`, 
        0.26669498576251593`}, {-0.2296481301532736, 
        0.28648165965038525`}, {-0.22417618818304846`, 
        0.3050908624890665}, {-0.21888782990839134`, 
        0.32266616014410604`}, {-0.21378305532930225`, 
        0.3392075526155038}, {-0.20886186444578117`, 
        0.35471503990325987`}, {-0.19964048916111732`, 
        0.3831221510701416}, {-0.19451424774863912`, 0.3986357518702836}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.19341681982517228`, 
        0.4019569100721099}, {-0.19129395945007427`, 
        0.4083813457870461}, {-0.18374883656047805`, 
        0.43074793842847775`}, {-0.17688968820005804`, 
        0.45062300100704733`}, {-0.17051800673974948`, 
        0.46861776370227376`}, {-0.16464261240699002`, 
        0.48477423404982867`}, {-0.15438068512411832`, 
        0.5115722977019241}, {-0.1458815745912816, 
        0.5324699500493704}, {-0.14550056441455095`, 0.5333706476133647}}]}, 
      {Arrowheads[{{0.011007928277481345`, 1.}}], 
       ArrowBox[{{-0.14413785519696637`, 
        0.5365920546719453}, {-0.13892294904831856`, 
        0.5489199491782039}, {-0.13808772981157633`, 
        0.5508399940205012}, {-0.13727908394527827`, 
        0.5526994322525098}, {-0.13205274278324014`, 
        0.5647449520845387}, {-0.1279326670788749, 
        0.5742675258801515}, {-0.12153153350230343`, 
        0.5891186405488937}, {-0.11796997661525169`, 
        0.5974938323191493}, {-0.11593317794180782`, 
        0.6023918264028157}, {-0.11465174328190186`, 
        0.6055919506890035}, {-0.11396464421928565`, 
        0.6074368654709794}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.18513659598280477`, -0.020370490475973405`}, \
{-0.17556493530615672`, 0.008228527803262779}, {-0.16557211572050928`, 
        0.034858968606526944`}, {-0.15526526904172622`, 
        0.05963560766176587}, {-0.1447515270856712, 
        0.0826732206969263}, {-0.13525226562818973`, 
        0.10182837292447894`}, {-0.13156455300182238`, 
        0.10866725836512259`}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.1299044308540216, 
        0.1117459649609423}, {-0.1256653293664599, 
        0.11960740439020014`}, {-0.1159907183004819, 
        0.1360103150940899}, {-0.10622843243025559`, 
        0.15103710503614812`}, {-0.09653851416336054, 
        0.16492231121580692`}, {-0.08708100590737627, 
        0.17790047063249825`}, {-0.06886321942813993, 
        0.20113564917697885`}, {-0.05158739003980137, 
        0.2212010819282355}, {-0.048146393130685784`, 
        0.2248597713508201}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.04575005497345515, 
        0.22740771234012166`}, {-0.03526583478961544, 
        0.2385552101449137}, {-0.019854614801478276`, 
        0.25340793596711264`}, {-0.005251990679736942, 0.2660379750212504}, {
        0.013163732593555124`, 0.280057632483942}, {0.030204035306816198`, 
        0.2911555390440883}, {0.045799018785478735`, 0.30001763732241216`}, {
        0.05987878435497519, 0.3073298699396366}, {0.06581734507393545, 
        0.3102430395237601}}]}, 
      {Arrowheads[{{0.014447968007687344`, 1.}}], 
       ArrowBox[{{0.06895762980900107, 0.31178351076058225`}, {
        0.08188389991228448, 0.3181245113301011}, {0.0995132444971378, 
        0.3267649973881953}, {0.1017016002872879, 0.3278368798082431}, {
        0.10382090332608587`, 0.3288747688397076}, {0.11359709321213969`, 
        0.3336572850091268}, {0.12190652599187089`, 0.3377177493728529}, {
        0.1359835087842431, 0.3445873465061477}, {0.14578347031844072`, 
        0.3493514616978511}, {0.1526541380892788, 0.3526736108254965}, {
        0.15979860538431626`, 0.3560926132068942}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02000000000000001, 1.}}], 
       ArrowBox[{{-1.250191838276312, 
        0.4540546220719987}, {-1.239158991560639, 
        0.44064519943589475`}, {-1.2258275649189962`, 
        0.4245606500209203}, {-1.2136968487391149`, 
        0.4100540433153783}, {-1.2097296772957526`, 
        0.40533431151557114`}, {-1.2058793832456507`, 
        0.4007680319004711}, {-1.1951730454690057`, 
        0.38823679352990664`}, {-1.1853553808127688`, 
        0.3768705732880892}, {-1.1673089249527506`, 
        0.35629245853636343`}, {-1.1593182555770467`, 
        0.3476985181382117}}]}, 
      {Arrowheads[{{0.006757623859210445, 1.}}], 
       ArrowBox[{{-1.1569364965761006`, 
        0.345136943639944}, {-1.1519283586367501`, 
        0.3397507066511672}, {-1.1383122509700085`, 
        0.32674454920707674`}, {-1.121851862045908, 0.3135614945992784}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{0.20043922103084322`, 0.9528387197038202}, {
        0.1929255121310672, 0.9422619735203118}, {0.17775324517522859`, 
        0.9200964292687955}, {0.17066146518692674`, 0.9095170994537797}, {
        0.16388112085380446`, 0.8992252069648307}, {0.15490043920301025`, 
        0.8851187379384047}, {0.1464082703800249, 0.8716114177237885}, {
        0.13071445488461986`, 0.8462246268250433}, {0.12420226531695448`, 
        0.8355649517460508}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{0.12237876902024075`, 0.8325801065064055}, {
        0.11583206044218468`, 0.8218639279379198}, {0.10257250810568916`, 
        0.7995554130740395}, {0.09078023533383837, 0.7791249941813826}, {
        0.08029967958533732, 0.760398583207929}, {0.07100645879860622, 
        0.7432349041152004}, {0.06277619091206528, 0.7274926808647189}, {
        0.05430121614818033, 0.7105570389341762}, {0.05424397016517518, 
        0.7104371715133566}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{0.05273659094171034, 0.7072808686563055}, {
        0.047051971445014426`, 0.695377838231468}, {0.0407949073944198, 
        0.6817100501836288}, {0.035296474588248604`, 0.6693086462176928}, {
        0.026170713116679636`, 0.6480001269393434}, {0.018865107845313665`, 
        0.6308425532120446}, {0.008012871567540832, 0.6061019150793202}, {
        0.001128721329622704, 0.5904112162248176}, {-0.0037517175513729515`, 
        0.5792916239687033}}]}, 
      {Arrowheads[{{0.0016656224082321938`, 1.}}], 
       ArrowBox[{{-0.005158039565772808, 
        0.5760890159753685}, {-0.007292472910902235, 
        0.5712299839793061}, {-0.008907392700259528, 
        0.5675592458359473}, {-0.009849383839803678, 
        0.5654232212515514}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.2587278717996385, -0.01600022390843551}, \
{-0.25524349054043544`, 0.0026071132902328216`}, {-0.2518804489173852, 
        0.02067575761969186}, {-0.24848569587988226`, 
        0.03814989383879451}, {-0.24494625014588348`, 
        0.05499298782855433}, {-0.24127935718117383`, 
        0.07123116911700653}, {-0.23750226245153805`, 
        0.08689056723218651}, {-0.22968644956062734`, 
        0.11657753205487219`}, {-0.2285318711986876, 0.12054849370143192`}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.22755531499212944`, 
        0.12390718062107704`}, {-0.22163677519943012`, 
        0.14426291852089526`}, {-0.2143319984678961, 
        0.16755039790825027`}, {-0.20696121568283452`, 
        0.18949750243871682`}, {-0.19952442684424546`, 
        0.21010423211229495`}, {-0.1920216319521288, 
        0.2293705869289847}, {-0.18464120759847508`, 
        0.2475098968391416}, {-0.18122871652255654`, 0.2558245888967845}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.17990066844599475`, 
        0.25906043934992706`}, {-0.17757153037527476`, 
        0.26473549179312106`}, {-0.17081260028252787`, 
        0.28104737179092326`}, {-0.16436441732023438`, 
        0.29644553683254804`}, {-0.15242178229627223`, 
        0.3249156828074179}, {-0.14176511481265297`, 
        0.3505608904778831}, {-0.1323015092818259, 
        0.37359606048851735`}, {-0.1262536964663357, 0.3882771011889125}}]}, 
      {Arrowheads[{{0.01999999999999999, 1.}}], 
       ArrowBox[{{-0.12492141429975853`, 
        0.39151121066099026`}, {-0.12376972208310018`, 
        0.3943069387734383}, {-0.11519788740154559`, 
        0.4147793057402944}, {-0.10741153292277603`, 
        0.43320228209305733`}, {-0.1004106586467915, 
        0.449575867831727}, {-0.09419526457359198, 
        0.4639000629563034}, {-0.08364742886785062, 
        0.4879961387364474}, {-0.07529453763785456, 
        0.50708636680676}, {-0.0743155252133321, 
        0.5093245803315526}, {-0.0733675129800104, 
        0.5114920929530488}, {-0.06963464638714269, 0.5200320426878119}}]}, 
      {Arrowheads[{{0.00563339548699409, 1.}}], 
       ArrowBox[{{-0.06823373064330736, 
        0.5232370192754701}, {-0.06814478506526606, 
        0.5234405065276139}, {-0.06386087563250643, 
        0.5332478143170052}, {-0.05688379906875206, 
        0.5492345789409735}, {-0.05247731974746371, 0.5593587851458862}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.01999999999999999, 1.}}], 
       ArrowBox[{{-0.2614685535436249, 
        0.9528387197038202}, {-0.261471821569832, 
        0.9521554404847191}, {-0.2614304637437984, 
        0.9262237375755215}, {-0.26138256193552045`, 
        0.9171425715384742}, {-0.26133624700312985`, 
        0.9083471320935251}, {-0.2612326666387589, 
        0.8885606066681255}, {-0.2611370942017647, 
        0.8702200436811707}, {-0.26104524837697995`, 
        0.8525519035346605}, {-0.26096085577661426`, 
        0.8362286090690395}, {-0.26084148810884616`, 0.81292923495746}}]}, 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-0.26082356848870003`, 
        0.8094315044452597}, {-0.26081221065534255`, 
        0.8072145690435691}, {-0.26068706414848497`, 
        0.7824400595365406}, {-0.2605993746662929, 
        0.7647997832865231}, {-0.2605243847341078, 
        0.7494499029693048}, {-0.2604599542518599, 
        0.7360053237668327}, {-0.26040394311947934`, 
        0.7240809508610532}, {-0.26031411876570465`, 
        0.7042401954767954}, {-0.26024879139555257`, 
        0.6888223798909776}, {-0.2601783459909243, 0.6695219503701021}}]}, 
      {Arrowheads[{{0.003603889907675515, 1.}}], 
       ArrowBox[{{-0.2601677158828127, 
        0.6660241909254178}, {-0.26014327078888505`, 
        0.6552749894946365}, {-0.2601436959239617, 
        0.6473665296636814}, {-0.2601644195440431, 
        0.6431252578867074}, {-0.2601958145571437, 0.6408132802709527}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-1.240091158092268, 
        0.9528387197038202}, {-1.2367071505114786`, 
        0.948354512300861}, {-1.2253768301614132`, 
        0.9333388955927469}, {-1.2143700318495945`, 
        0.9187504132083959}, {-1.2036781058985406`, 
        0.9045776447542818}, {-1.1932924026307696`, 
        0.8908091698368774}, {-1.183204272368799, 
        0.8774335680626555}, {-1.1734050654351469`, 
        0.8644394190380891}, {-1.1558380783226943`, 0.8411403672558402}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-1.1537324641754028`, 
        0.8383473708611635}, {-1.1369244774340788`, 
        0.8160489425658334}, {-1.1197604665777716`, 
        0.7932718924762641}, {-1.1035297801757205`, 
        0.7717270486801668}, {-1.0882324182279244`, 
        0.7514144111775419}, {-1.0738683807343845`, 
        0.7323339799683894}, {-1.0695501373345044`, 0.7265956885124567}}]}, 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-1.0674469466968346`, 
        0.7238008666951702}, {-1.0603390177402712`, 
        0.7143555056481392}, {-1.047545679290756, 
        0.6973487388122213}, {-1.0354883653858387`, 
        0.6813136794606355}, {-1.0241670760255195`, 
        0.6662503275933822}, {-1.013504229428401, 
        0.652056247397886}, {-1.0034222438130862`, 
        0.638629003061572}, {-0.9850008555278673, 
        0.6140750219664903}, {-0.9834042114241003, 0.6119441861439459}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.9813067923883377, 
        0.6091450303359953}, {-0.9687090698958382, 
        0.5923324680961328}, {-0.9542428290396855, 
        0.572999886592046}, {-0.9414676849023872, 
        0.5559016661971675}, {-0.9299644487542787, 
        0.5404824407707899}, {-0.9197331205953605, 
        0.5267422103129135}, {-0.9107737004256323, 
        0.5146809748235383}, {-0.8976744962345548, 0.49698146015368955`}}]}, 
      {Arrowheads[{{0.0112406476139866, 1.}}], 
       ArrowBox[{{-0.8955941882616267, 
        0.4941695652786053}, {-0.8838294578525246, 
        0.4781747942673316}, {-0.8824397188593843, 
        0.47627687253499645`}, {-0.8810948371718291, 
        0.4744381592083351}, {-0.8726682716915164, 
        0.4628043400856988}, {-0.8660133522882826, 
        0.45350802946910745`}, {-0.8556575100787106, 
        0.43881237560926445`}, {-0.8499012848011955, 
        0.4301831821890102}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.11139004358502469`, -0.20030141568614634`}, \
{-0.10257848806455663`, -0.1824510989303457}, {-0.0894141327084621, \
-0.1562867614486937}, {-0.07650616658536319, -0.13241168993679972`}, \
{-0.06358526543611423, -0.11154635210379939`}, {-0.05556791757341108, \
-0.09953929677834318}, {-0.047685927463258004`, -0.08926622064280938}, \
{-0.04038810778246908, -0.08163404850010328}, {-0.039599151045007566`, \
-0.08088785333937291}}]}, 
      {Arrowheads[{{0.004617413009654927, 1.}}], 
       ArrowBox[{{-0.03705794160842842, -0.0784843778458004}, \
{-0.03363785505064405, -0.07524966050640745}, {-0.021659318177739282`, \
-0.0645628971658321}, {-0.012619287721207682`, -0.05738833487258478}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.020000000000000014`, 1.}}], 
       ArrowBox[{{-1.250191838276312, 
        0.2215742329500793}, {-1.2363894167015443`, 
        0.22508875292435565`}, {-1.2182368701418977`, 
        0.22991045690994838`}, {-1.213588507631776, 
        0.2311747842915266}, {-1.209051498235898, 
        0.23241951563837002`}, {-1.1892719656057291`, 
        0.23806834488382966`}, {-1.1716263533213125`, 
        0.24327198769687888`}, {-1.1549425843441843`, 
        0.24826526044683822`}, {-1.1401825019816334`, 
        0.25283779307061777`}, {-1.1158970974173288`, 0.2607117492703084}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{0.4358477917652017, 0.16235398488639366`}, {
        0.4267703518754501, 0.16754986780333708`}, {0.41212017213722013`, 
        0.17523121995099541`}, {0.3985268071869838, 0.18160331615344327`}, {
        0.3922364059890377, 0.18435611262043564`}, {0.38615533138032637`, 
        0.1868806617762033}, {0.373103165196019, 0.19135954852610368`}, {
        0.3610178026790386, 0.19488752674284154`}, {0.33857548912650987`, 
        0.20109594643656595`}, {0.31931542560725595`, 0.20606341530009029`}, {
        0.3048979065890069, 0.20975214206479129`}}]}, 
      {Arrowheads[{{0.01406738541348859, 1.}}], 
       ArrowBox[{{0.30150876147676686`, 0.21061708581194705`}, {
        0.2811998403039005, 0.21577785988993012`}, {0.2642696190028662, 
        0.2200543028739952}, {0.24064879691445407`, 0.22595552522697226`}, {
        0.2259892573907926, 0.22954219550885854`}, {0.2152663300715534, 
        0.23206966037910223`}, {0.20931606852251858`, 0.23336795316884792`}, {
        0.20592910347131982`, 0.23400859173210714`}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.49440994031627167`, -0.20030141568614634`}, \
{-0.4942273795105577, -0.19856446430085442`}, {-0.4925785732691524, \
-0.17712646835066445`}, {-0.49175675774643063`, -0.15642753429107772`}, \
{-0.49186022626374815`, -0.13651725257115555`}, {-0.4928105561455821, \
-0.11736607718727107`}, {-0.49452932471640965`, -0.09894446213579741}, \
{-0.49693810930070825`, -0.0812228614131074}, {-0.4999584872229547, \
-0.06417172901557394}, {-0.50062725643593, -0.0610833673354699}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.5013675249499038, -0.057664823438431045`}, \
{-0.5035120358076265, -0.047761518939570036`}, {-0.5075203323792007, \
-0.03196268518146849}, {-0.5152811223695867, -0.005224130203485321}, \
{-0.5235369534712961, 0.01965130339054201}, {-0.5322878256843294, 
        0.04266361560061376}, {-0.5415337390086862, 
        0.06381280642672982}, {-0.5466314247665701, 0.07437189020840804}}]}, 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-0.5481521274639788, 
        0.07752179546965898}, {-0.5510109745359766, 
        0.08344346408282202}, {-0.5604558133578106, 
        0.10190017678282244`}, {-0.5698682554741881, 
        0.119182944526731}, {-0.579248300885109, 
        0.1352917673145476}, {-0.5884882007020928, 
        0.1504191857893909}, {-0.5974802060366586, 
        0.16475774059437953`}, {-0.6062243168888066, 
        0.17830743172951347`}, {-0.6147205332585365, 
        0.1910682591947926}, {-0.6193177609146008, 0.19782741869614848`}}]}, 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-0.6212848879970472, 
        0.2007196238911975}, {-0.6307662630552022, 
        0.2146597919891837}, {-0.6454781533288366, 
        0.23607206041107465`}, {-0.6631876497840691, 
        0.261521901055326}, {-0.6790008688707031, 
        0.28386674056780387`}, {-0.6931237836447588, 
        0.3034399882228995}, {-0.7017645614442818, 0.3151549315678909}}]}, 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-0.703840795893373, 
        0.31796983660379696`}, {-0.7057623671622564, 
        0.32057505329500446`}, {-0.715927249124916, 
        0.3341452008541735}, {-0.7251635866369108, 
        0.34641458825916027`}, {-0.740850628308908, 
        0.36705108260658714`}, {-0.742827193187525, 
        0.369628625484968}, {-0.7447418017750859, 
        0.37212434983437653`}, {-0.7534000284290724, 
        0.3833806619453322}, {-0.7607967767829062, 
        0.3929710374911011}, {-0.7733984459286091, 
        0.4092570982355187}, {-0.7822966358518839, 
        0.42065186925564224`}, {-0.7886319452653854, 
        0.42866128993814445`}, {-0.7889289490767899, 0.4290275622820304}}]}, 
      {Arrowheads[{{0.000991598274784599, 1.}}], 
       ArrowBox[{{-0.7911319729227949, 
        0.43174438501873874`}, {-0.7955010022128108, 
        0.4371323784959699}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.6246058566266323, -0.20030141568614634`}, \
{-0.6254249076826954, -0.17886440880716428`}, {-0.6266944251851387, \
-0.1573798352152272}, {-0.6302799708424118, -0.12742034063254412`}, \
{-0.6346711394432853, -0.0995766400840185}, {-0.6393407734703214, \
-0.07265593415514084}, {-0.6416368983070216, -0.06164015589674338}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.6423506335491513, -0.05821597397212187}, \
{-0.6445673383496827, -0.04758121746555917}, {-0.6502804972325444, \
-0.024232517753203734`}, {-0.6564099132700814, -0.0024898627560047647`}, \
{-0.6629056081666802, 0.017743647683801437`}, {-0.6697176036267276, 
        0.03656491372397869}, {-0.678785962026133, 
        0.05861890965631071}, {-0.6860600293354218, 0.07432392650388699}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.6875300645305507, 
        0.07749779423488096}, {-0.6881084844681715, 
        0.07874662717511358}, {-0.6975292905217428, 
        0.09720564586611144}, {-0.7068924997557462, 
        0.1142535453150285}, {-0.7161333685853137, 
        0.13001984053837368`}, {-0.725239231623425, 
        0.14456086679881855`}, {-0.7341323257357503, 
        0.15802443405133137`}, {-0.7427348877879603, 
        0.17055835225088042`}, {-0.7589914088248251, 
        0.19313530028702042`}, {-0.7612586233842105, 0.19614829216672489`}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.7633617217162916, 
        0.19894318344446005`}, {-0.7738547809596024, 
        0.21288782849910506`}, {-0.7872488897935268, 
        0.23032721973340395`}, {-0.799263009461766, 
        0.24576839601158434`}, {-0.8164493566392126, 
        0.26809692805682084`}, {-0.830509437450683, 
        0.2865429149428847}, {-0.8422309601156205, 
        0.3015645273912168}, {-0.8486839730993507, 0.3098241257381503}}]}, 
      {Arrowheads[{{0.008674397482067137, 1.}}], 
       ArrowBox[{{-0.8508374001224219, 
        0.3125804261399696}, {-0.8518587968145928, 
        0.31388777302606574`}, {-0.8665821161074897, 
        0.33194333355898803`}, {-0.8767991502396199, 
        0.34404166696997346`}, {-0.8839339716108042, 
        0.3520687947853087}, {-0.8903015870259889, 
        0.35864040457111346`}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{0.4358477917652017, 0.32534124226567807`}, {
        0.43462296860438243`, 0.3254554629577614}, {0.41478481143156054`, 
        0.3271634917300639}, {0.4073108558931621, 0.3277762548985264}, {
        0.40008366022791275`, 0.32834925795570796`}, {0.3855494193511324, 
        0.3293784285732902}, {0.3720173846262733, 0.33025557797180266`}, {
        0.34682750989954875`, 0.33173149521090933`}, {0.3251242945175328, 
        0.3327068969482503}, {0.3064256039048744, 0.33328137729265533`}, {
        0.2962022775082091, 0.33336665619055106`}}]}, 
      {Arrowheads[{{0.008563607190743902, 1.}}], 
       ArrowBox[{{0.29270462277858283`, 0.333395832226705}, {
        0.28058418589722556`, 0.3334969360611276}, {0.26061253811391116`, 
        0.3330697443594611}, {0.2328645623565393, 0.3312120433615232}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-0.5899697404388718, 
        0.9528387197038202}, {-0.5857607643226835, 
        0.9368737988936368}, {-0.5805959381622592, 
        0.9171924002871669}, {-0.5757487548273625, 
        0.8986418488807912}, {-0.5712192143179937, 
        0.88122214467451}, {-0.5670073166341526, 
        0.8649332876683232}, {-0.5593880675251686, 
        0.83524260698068}, {-0.554859985969673, 0.8174051913105506}}]}, 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-0.5539993619074509, 
        0.8140149455860806}, {-0.5527426252825255, 
        0.809064298542309}, {-0.5469507963580709, 
        0.7860939068523556}, {-0.541847803847846, 
        0.7658504050244669}, {-0.5376563462367527, 
        0.7492186122042279}, {-0.5338795870351001, 
        0.7342285130802695}, {-0.5275701638601163, 
        0.7091733959211948}, {-0.5226076602198144, 
        0.689450428101693}, {-0.5198160603634864, 0.6783440115086924}}]}, 
      {Arrowheads[{{0.008116834331569149, 1.}}], 
       ArrowBox[{{-0.5189634149038374, 
        0.6749517503794598}, {-0.518680202011114, 
        0.6738249841762145}, {-0.518219894304295, 
        0.6719922658269285}, {-0.5177742192200809, 
        0.6702174659356105}, {-0.5176443357936328, 
        0.6697001187040161}, {-0.5172081532050015, 
        0.6679625095025037}, {-0.5168554985554622, 
        0.6665573788415081}, {-0.5165124127451313, 
        0.6651901208165636}, {-0.5135392996009742, 
        0.6533296831471203}, {-0.5112881575416808, 
        0.644327376802209}, {-0.5095837877094666, 
        0.6374895844085227}, {-0.5072193831712967, 
        0.6279390205980084}, {-0.5059597044107149, 
        0.622761909420204}, {-0.5052711673255195, 0.6198459412751506}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{0.4358477917652017, 0.4674285994915407}, {
        0.42653503590955405`, 0.465806681777514}, {0.4059383801678832, 
        0.4618197469887294}, {0.39764408611419605`, 0.46012174703170855`}, {
        0.3896431203727631, 0.4584198811344362}, {0.3654391238577447, 
        0.45244993294422137`}, {0.3439550191556016, 0.44654495329887567`}, {
        0.32369526210385213`, 0.4406842745612352}, {0.3058842003528901, 
        0.43491219763900557`}, {0.3004553765738511, 0.4328445730742979}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{0.2971866475172041, 0.43159964327587785`}, {
        0.2765229295988062, 0.42372964923937373`}, {0.25382835044548735`, 
        0.41336505835408793`}, {0.23428566882443289`, 0.40293194300306173`}, {
        0.21922415540869275`, 0.39470616821100346`}, {0.1974960271218296, 
        0.3838948035473374}, {0.1842323036997414, 0.37725050843123753`}, {
        0.17648423384941322`, 0.3733219503007415}, {0.17138223336322767`, 
        0.3706827396647585}}]}, 
      {Arrowheads[{{0.0001998730929374851, 1.}}], 
       ArrowBox[{{0.1683072649849304, 0.3690160033431435}, {
        0.16709733203961782`, 0.3683152257658087}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{0.02429428180451509, 0.9528387197038202}, {
        0.02009337033395166, 0.9408077056417435}, {0.010743654560165353`, 
        0.9148891127802832}, {0.007177639985284373, 0.9051825372435648}, {
        0.003687956944427236, 0.8957967540047336}, {-0.002296942417252096, 
        0.8803489060506371}, {-0.008054601388267812, 
        0.8658091379128372}, {-0.0189525086605074, 
        0.8391222074895412}, {-0.025937184248233203`, 
        0.8222848682956321}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.02727743198665191, 
        0.8190540517040524}, {-0.02941543552850187, 
        0.8139001558101376}, {-0.03900840158800613, 
        0.7916078616185187}, {-0.04769017715667766, 
        0.7718665236246575}, {-0.05541953255217395, 
        0.7542973405385274}, {-0.0622968752571287, 
        0.7386713079533775}, {-0.06842261275417558, 
        0.7247594214624574}, {-0.07866192210703637, 
        0.7015227204981302}, {-0.08335927010874203, 0.6908766988822511}}]}, 
      {Arrowheads[{{0.010333010117042787`, 1.}}], 
       ArrowBox[{{-0.08477125767036944, 
        0.6876765846695124}, {-0.0867700255553539, 
        0.6831465975148577}, {-0.09824673041011096, 
        0.6572035626767905}, {-0.10551774886788272`, 
        0.6408523699081586}, {-0.11107214252574703`, 
        0.6284764599539719}, {-0.11419306047778749`, 
        0.6216506969155435}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.11585920663947417`, 
        0.9528387197038202}, {-0.11668677561268832`, 
        0.9475060837934864}, {-0.12068907556705227`, 
        0.9219839439227493}, {-0.12211508500763799`, 
        0.9129445507912954}, {-0.12350099116852735`, 
        0.9041916890936837}, {-0.12656177924468587`, 
        0.8850946684518128}, {-0.12942886948054977`, 
        0.8673626922381543}, {-0.13220529695260175`, 
        0.8502666719581691}, {-0.13480039889702994`, 
        0.8344425635455304}, {-0.13808639791088595`, 0.8147052907887595}}]}, 
      {Arrowheads[{{0.015578069030297676`, 1.}}], 
       ArrowBox[{{-0.1386608256015789, 
        0.8112550049053975}, {-0.13949577960698537`, 
        0.8062398740807758}, {-0.14360574492323985`, 
        0.7820734301766965}, {-0.14667219198700243`, 
        0.7644435085448276}, {-0.14940049109501954`, 
        0.749102896398893}, {-0.15184186134175176`, 
        0.7356705129588632}, {-0.1540475218216596, 
        0.723765277444708}, {-0.15782999016541915`, 0.7039802162759915}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.7382257385391924, 
        0.9528387197038202}, {-0.7349803796905299, 
        0.9445009931644422}, {-0.7307101303916523, 
        0.9335005354699167}, {-0.726581078268724, 
        0.9228432293834792}, {-0.7199448554423526, 
        0.9055944962530411}, {-0.7136909845123225, 
        0.8892770822696542}, {-0.7077686667205827, 
        0.8737687596144262}, {-0.7021948349864838, 
        0.859110270893655}, {-0.6913284680785785, 
        0.8304814606865906}, {-0.6882057331462873, 0.8221754033248035}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.6869748303058716, 
        0.818901366360104}, {-0.6817216664065404, 
        0.8049286528173958}, {-0.6732399809253108, 
        0.7821283605155553}, {-0.6657489625898321, 
        0.761757097010554}, {-0.6591449142752918, 
        0.7435651279961303}, {-0.6533241388568778, 
        0.7273027191660223}, {-0.6477581753974033, 
        0.7114612007832648}, {-0.6429963369462957, 
        0.6976086345013497}, {-0.6395294006790855, 0.6872890228828863}}]}, 
      {Arrowheads[{{0.013602082173597487`, 1.}}], 
       ArrowBox[{{-0.6384248406841823, 
        0.6839702494727973}, {-0.6352980349896045, 
        0.6744557668227086}, {-0.6294714945878259, 
        0.6560153705767987}, {-0.6251752391021583, 
        0.6414591374916967}, {-0.6197036254969495, 
        0.6210111390323902}, {-0.6167032662167183, 
        0.6088999457180186}, {-0.6146185486378604, 
        0.6006903093143229}, {-0.6134899680624271, 
        0.5962659032737515}, {-0.6128697081246605, 
        0.5938538885947826}, {-0.6125038993453974, 0.5924492441506023}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{0.4031778740239332, -0.20030141568614634`}, {
        0.4029503767274831, -0.19978022445067045`}, {
        0.39673574796501626`, -0.18564805282969077`}, {
        0.3907137188225688, -0.17198717527803578`}, {
        0.38416309953307326`, -0.15722304449142535`}, {
        0.3778471771912468, -0.14302949057468156`}, {
        0.3658609171389139, -0.11620581814856194`}, {
        0.35428857695079974`, -0.09040753739096268}, {
        0.34619569785710164`, -0.07252065413159213}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{0.34475385024565924`, -0.06933388220468233}, {
        0.34354407649112323`, -0.06666003997040419}, {
        0.3336070078159893, -0.04527100959475393}, {
        0.32445696298150295`, -0.026548129971879428`}, {
        0.3159150169148064, -0.010205978799193518`}, {0.3078022445430417, 
        0.00404086622589094}, {0.29565361259731177`, 0.02297876063928421}, {
        0.2842227080317544, 0.03798820030501601}, {0.2730597410848237, 
        0.049936434455642775`}}]}, 
      {Arrowheads[{{0.004639576326743833, 1.}}], 
       ArrowBox[{{0.27067185494017293`, 0.05249229822528062}, {
        0.2638302203889434, 0.05981521264218529}, {0.24668239984479215`, 
        0.07428142426777201}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.01999999999999999, 1.}}], 
       ArrowBox[{{-0.4004260088996125, 
        0.9528387197038202}, {-0.3995687585685685, 
        0.9401731196644688}, {-0.39848007182578066`, 
        0.9234442603005828}, {-0.3965760024240367, 
        0.8926515143104423}, {-0.3949727181474061, 
        0.8648444772127929}, {-0.3936702189958889, 
        0.8400231490076345}, {-0.3926685049694851, 
        0.8181875296949672}, {-0.3924715177419681, 0.8131579953380406}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.3923346284463835, 
        0.8096628986055427}, {-0.39171146677585555`, 
        0.793752156212002}, {-0.39100504562105864`, 
        0.7721725001422277}, {-0.39054924150509424`, 
        0.7534485614856444}, {-0.3903440544279625, 
        0.7375803402422522}, {-0.39020572482710303`, 
        0.7125687214128122}, {-0.39010099667825016`, 
        0.6936224630268903}, {-0.38996938529492264`, 0.6697835090776867}}]}, 
      {Arrowheads[{{0.003611568648612195, 1.}}], 
       ArrowBox[{{-0.3899501144960238, 
        0.6662857857489594}, {-0.38988493044985983`, 
        0.6544430219299258}, {-0.3898771813665844, 
        0.6530320989217354}, {-0.3898700243718207, 
        0.6517289510056761}, {-0.3898627956279478, 
        0.650410218715719}, {-0.3898600193889143, 
        0.6499033279561013}, {-0.3898312847457736, 
        0.6446392131331152}, {-0.3898117415663862, 0.6410212454136406}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-0.5052308232212002, 
        0.3735120154464473}, {-0.5181377795851041, 
        0.3981950773723231}, {-0.5292552409471161, 
        0.42015504600436343`}, {-0.5386500907959486, 
        0.4396339432281593}, {-0.5464592698277948, 
        0.45701081965311885`}, {-0.5582032520486637, 
        0.48564363770000785`}, {-0.5636198339988845, 0.5005058700480359}}]}, 
      {Arrowheads[{{0.011948321558469494`, 1.}}], 
       ArrowBox[{{-0.5648175441899866, 
        0.503792194765238}, {-0.5665529873468237, 
        0.5085539725174708}, {-0.5724794521069108, 
        0.5267395222100464}, {-0.5769536227135615, 
        0.5411979848822736}, {-0.5774595668597062, 
        0.5428981678107732}, {-0.5779447571591034, 
        0.5445457226035618}, {-0.578122655381286, 
        0.5451578516173589}, {-0.5785457375987275, 
        0.546624433370192}, {-0.5789158591118587, 
        0.5479211464282585}, {-0.5792725322638503, 
        0.5491840178780717}, {-0.5822275403484841, 
        0.5601841092031932}, {-0.5843489710578459, 
        0.5685815112068523}, {-0.5859638002139161, 
        0.5749734653107397}, {-0.5882407042234897, 0.5839853647822812}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-0.06769216455493338, 
        0.3133067620433975}, {-0.05280906162619348, 
        0.3352050557128886}, {-0.039317473135679695`, 
        0.3545157144687375}, {-0.027091957708865848`, 
        0.37144222146552514`}, {-0.015934908423576154`, 
        0.3863035963087495}, {-0.005574901816674917, 0.39944592266772716`}, {
        0.00405851101424534, 0.41105765466991684`}, {0.0166244533832725, 
        0.4247595345433411}}]}, 
      {Arrowheads[{{0.013361143838181624`, 1.}}], 
       ArrowBox[{{0.018988588716245154`, 0.4273373832542147}, {
        0.021145555348142893`, 0.42968933560393213`}, {0.035405294373029264`, 
        0.4437176491675544}, {0.04691679788381725, 0.45466160541754297`}, {
        0.048284870699959986`, 0.4559304055462048}, {0.049610883791162255`, 
        0.45715817890908816`}, {0.0576483519737318, 0.46449829947009524`}, {
        0.06417158590945674, 0.47036013995346865`}, {0.07468052088915077, 
        0.4796053480129944}, {0.08118007226728877, 0.48486306354840386`}, {
        0.08537923943364066, 0.4877028179841487}, {0.08870860079594756, 
        0.48916600956330686`}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{0.1937950589590179, -0.20030141568614634`}, {
        0.18825749381427467`, -0.17677889495359328`}, {
        0.18260203457704807`, -0.15845850419852753`}, {
        0.17710533838313708`, -0.14172469853751707`}, {
        0.1665882351252617, -0.11301684249766206`}, {
        0.1647481358280348, -0.10841014589624086`}, {
        0.16295892695295622`, -0.1039516125651865}, {
        0.15861641597288767`, -0.09333585849886789}, {
        0.15455464342505196`, -0.0835691381955799}, {
        0.14808667135743753`, -0.06831047102594628}}]}, 
      {Arrowheads[{{0.015897310060322353`, 1.}}], 
       ArrowBox[{{0.14671258372276433`, -0.06509397833280187}, {
        0.1402544728794353, -0.05056389679911624}, {
        0.13430535822690887`, -0.03798419493832574}, {
        0.11873790710913787`, -0.010957864941424837`}, {0.10357672216521827`, 
        0.002630873467086598}, {0.08865557588580145, 0.008137049501777955}, {
        0.08027209051175134, 0.011325750418503228`}, {0.07590411829475267, 
        0.013699615213702809`}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.016848837968520252`, 1.}}], 
       ArrowBox[{{0.08822158642395106, -0.20030141568614634`}, {
        0.0913980867088374, -0.18790925256985802`}, {
        0.09549367751158473, -0.16845944428723478`}, {
        0.09680713701201427, -0.16118588531150801`}, {
        0.097834708320418, -0.1544850443991853}, {
        0.09824257862171738, -0.14311865271740312`}, {
        0.09764169539031618, -0.13288415073906049`}, {
        0.0947102565545647, -0.11441014578206084`}, {
        0.08888521715897299, -0.0993855882498734}, {
        0.08120959915690346, -0.08698696151607638}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{0.26277640173547345`, -0.20030141568614634`}, {
        0.26269001235271583`, -0.2000300500170655}, {
        0.2552878583669116, -0.17753017373501973`}, {
        0.24843856507419068`, -0.15653185158376876`}, {
        0.2421421324745532, -0.13703508356331262`}, {
        0.23639856056799913`, -0.11903986967365124`}, {
        0.2341896242441648, -0.11207245123989537`}, {
        0.23205740160557367`, -0.10531265329932907`}, {
        0.22550345421475107`, -0.08401768246933332}, {
        0.22037408819004065`, -0.06697582862594612}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{0.21936552247192517`, -0.06362661460043016}, {
        0.21419240399788153`, -0.04646474208158869}, {
        0.20926073980130766`, -0.03016073182669371}, {
        0.19971077296443057`, -0.004323718165087588}, {0.1898462262127415, 
        0.013135552844533629`}, {0.1752640431288768, 0.03014398097667895}, {
        0.1630315292841154, 0.03902204556632754}, {0.15293696281364727`, 
        0.04301672307944834}, {0.14413588922991383`, 
        0.044797676013694526`}}]}, 
      {Arrowheads[{{0.0014267732865214907`, 1.}}], 
       ArrowBox[{{0.1406975024587563, 0.04542655230446845}, {
        0.13477600704357692`, 0.04607583436535487}, {0.13075207829254318`, 
        0.04611101004861347}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{0.4358477917652017, 0.7299478372579563}, {
        0.43168987605617914`, 0.7276991560305919}, {0.42005844441963097`, 
        0.7212797200957297}, {0.4087994859341688, 0.7150506247758187}, {
        0.39373368585545, 0.7066514853797166}, {0.37936029006513095`, 
        0.698607687380395}, {0.35248109874284633`, 0.6834813077837154}, {
        0.32677862893091447`, 0.6689615600616481}, {0.3137913722405355, 
        0.6615601927778239}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{0.31075244578619854`, 0.6598283250421426}, {
        0.30342960213968784`, 0.6556550760888055}, {0.2822283487110452, 
        0.6434590156034612}, {0.2629691989868651, 0.6322705383438887}, {
        0.24548551489568793`, 0.6220061160386819}, {0.22961065836605402`, 
        0.6125822204164347}, {0.2125955161017887, 0.6023356692039785}, {
        0.19756943543316052`, 0.5931346317757782}, {0.19032576802926804`, 
        0.5886236379987733}}]}, 
      {Arrowheads[{{0.012718250100951579`, 1.}}], 
       ArrowBox[{{0.18735666096593473`, 0.5867746266155669}, {
        0.18422811371096695`, 0.5848263238551942}, {0.1722672482860054, 
        0.5772579611655859}, {0.15205928349326214`, 0.5641232925384965}, {
        0.13609033538589796`, 0.5532950680129081}, {0.113693534158181, 
        0.5369346701413069}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.36389604524947605`, 
        0.27261634605903995`}, {-0.36516681800325257`, 
        0.29328053266573295`}, {-0.366192542087503, 
        0.3128375331483543}, {-0.36697321750222733`, 
        0.33128734750690386`}, {-0.3675088442474255, 
        0.3486299757413818}, {-0.3680501930336656, 
        0.3649785316846478}, {-0.3688480345715155, 
        0.38044612916956166`}, {-0.3712131959020447, 
        0.4087384487643328}, {-0.37159538200648473`, 0.412287978711045}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.3719698313860619, 
        0.4157656543012772}, {-0.37392047769594644`, 
        0.4338821619710794}, {-0.37628602941015404`, 
        0.456252496235186}, {-0.37831078619288855`, 
        0.4760789283010268}, {-0.3800133686946845, 
        0.4937214334856585}, {-0.3826156533578747, 
        0.5237061066550593}, {-0.3842660968660653, 
        0.5474683100110358}, {-0.38463198363549267`, 0.5550834463825925}}]}, 
      {Arrowheads[{{0.010149768276590731`, 1.}}], 
       ArrowBox[{{-0.3847998487107233, 
        0.5585771923901438}, {-0.38516503113964695`, 
        0.5661776694478462}, {-0.3855127880990106, 
        0.5810038108597491}, {-0.3855225303169636, 
        0.582743132957361}, {-0.3855319692564883, 
        0.584427469169076}, {-0.3855347784853989, 
        0.5849286968083275}, {-0.3855442116399448, 
        0.5866114265700415}, {-0.3855518363181323, 
        0.5879713029592728}, {-0.3855592548451238, 
        0.5892937538124199}, {-0.3856235417564328, 
        0.6007322283413851}, {-0.385672247543565, 
        0.6093617110537772}, {-0.38570924507552695`, 
        0.6158767941797164}, {-0.3857603182615625, 
        0.624756998424118}, {-0.3857888430487976, 0.6295668019182549}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{0.4358477917652017, 0.6006908939000926}, {
        0.4154759657496991, 0.5928780187443212}, {0.4057952535664896, 
        0.589019941225915}, {0.39647050401368117`, 0.5851903321093678}, {
        0.37103594139604834`, 0.5734997539101215}, {0.34826953804305744`, 
        0.5622078753818164}, {0.32653481534385875`, 0.5514239249591313}, {
        0.30869136190372076`, 0.5425635044325123}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{0.3055587933903038, 0.5410074022576767}, {
        0.2890643693691316, 0.5328095193955482}, {0.27294647709543474`, 
        0.5247909175507827}, {0.2451443361973423, 0.5109365805094621}, {
        0.21854942480619727`, 0.49764263902078154`}, {0.19763107258708798`, 
        0.4871435676884724}, {0.18091300879816408`, 0.47871259756896}, {
        0.18040903821366747`, 0.4784568717294426}}]}, 
      {Arrowheads[{{0.009087415412102982, 1.}}], 
       ArrowBox[{{0.17728984714937387`, 0.47687412508098825`}, {
        0.16766407280328655`, 0.4719897939287706}, {0.1489084558881018, 
        0.46235655944828297`}, {0.13751940156689418`, 0.45635102840637326`}, {
        0.12931225854963727`, 0.4518307574874651}, {0.12498906806890729`, 
        0.44922418385365126`}, {0.12272759996578335`, 0.4476342424128031}, {
        0.1214998160029768, 0.4465548056362645}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{0.03903712841529941, 0.18809668189148024`}, {
        0.05955127826349996, 0.1930320871803537}, {0.07757552485901256, 
        0.19623154684189195`}, {0.10034318030191272`, 0.19816431720004607`}, {
        0.11841818844649661`, 0.19698344207408436`}, {0.12089626774528003`, 
        0.1965521134136973}, {0.12327037004271255`, 0.1960537144903579}, {
        0.13377970200809247`, 0.19345924912619586`}, {0.14276197319176284`, 
        0.19125995185443345`}, {0.1580702909850713, 0.18754873811819495`}, {
        0.1688827045861361, 0.18500101502065835`}, {0.17636229314521495`, 
        0.18330910542512813`}}]}, 
      {Arrowheads[{{0.0017983665537072478`, 1.}}], 
       ArrowBox[{{0.17978595674872944`, 0.18259303513614875`}, {
        0.1849278872777754, 0.18152326081043468`}, {0.18952695357678942`, 
        0.1807576796496892}, {0.19218029424758415`, 0.1804963204023063}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-0.41926173879366435`, 
        0.028502625151253874`}, {-0.4246168531344542, 
        0.047607209325222714`}, {-0.43040563617217875`, 
        0.06587310539703316}, {-0.43656688339365346`, 
        0.08334162862390052}, {-0.44303939028569445`, 
        0.10005409426304086`}, {-0.4497619523351175, 
        0.11605181757167009`}, {-0.45667336502873873`, 
        0.1313761138070041}, {-0.4677074957579879, 
        0.15459220319518682`}, {-0.4697508530043508, 0.15870809030982758`}}]}, 
      {Arrowheads[{{0.020000000000000007`, 1.}}], 
       ArrowBox[{{-0.4713062176090277, 
        0.1618410251631689}, {-0.4785129159201428, 
        0.17635731044349323`}, {-0.4890896255152037, 
        0.19667143555192343`}, {-0.49943762454317037`, 
        0.21553457852047744`}, {-0.5095012641211292, 
        0.23315570660255858`}, {-0.519224895366166, 
        0.24974378705157035`}, {-0.528608518278281, 
        0.2652988198675126}, {-0.5376521328574744, 
        0.2798208050503854}, {-0.5400589722024056, 0.2836139286409946}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.5419329802038786, 
        0.28656732225837406`}, {-0.5463152021132405, 
        0.2934736034518785}, {-0.5545571890550739, 
        0.30642107592368173`}, {-0.5697779159969433, 
        0.3302000430782185}, {-0.5834311526002885, 
        0.35138909528825496`}, {-0.5957108172843247, 
        0.37034447099831547`}, {-0.6075066284391198, 
        0.3884420301041646}, {-0.6177947880944789, 0.4041243861786168}}]}, 
      {Arrowheads[{{0.01910569791367576, 1.}}], 
       ArrowBox[{{-0.6197220637376386, 
        0.4070432937363232}, {-0.6277387320382651, 
        0.41916497732005165`}, {-0.6361750244826155, 
        0.4317903654300895}, {-0.6505335731866833, 
        0.4529379958451505}, {-0.6621037286617814, 
        0.4695274486473897}, {-0.6634770284720185, 
        0.47145870843618093`}, {-0.6648110072541072, 
        0.473325509502322}, {-0.6730494962485473, 
        0.4845883204251326}, {-0.6796242656322642, 
        0.49365562422298453`}, {-0.6899885920334617, 
        0.5081152612847571}, {-0.6959711496494946, 0.5167943240468678}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.020000000000000004`, 1.}}], 
       ArrowBox[{{-1.0838937504011137`, 
        0.9528387197038202}, {-1.0726598105880376`, 
        0.9378364359902512}, {-1.0624006781148474`, 
        0.9242100318288072}, {-1.052424337428264, 
        0.9110375564795437}, {-1.0386083305080716`, 
        0.8928266856811785}, {-1.025425823910388, 
        0.8754522586703595}, {-1.0128037603700237`, 
        0.8588178138841944}, {-1.0007664923087087`, 
        0.8429555051769813}, {-0.9994809609430892, 0.8412614685108639}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.9973665344907241, 
        0.8384751374777127}, {-0.9887052072046765, 
        0.8270614867553626}, {-0.9771806834942587, 
        0.8118761849838845}, {-0.9661929211774558, 
        0.7973995998625474}, {-0.9557419202542674, 
        0.7836317313913509}, {-0.9457798292254105, 
        0.7705094008804383}, {-0.9362587965916016, 
        0.7579694296399522}, {-0.9271788223528412, 
        0.7460118176698933}, {-0.9185399065091288, 
        0.7346365649702609}, {-0.9127681175721002, 0.7270381093367893}}]}, 
      {Arrowheads[{{0.019999999999999997`, 1.}}], 
       ArrowBox[{{-0.9106523774048111, 
        0.724252775713454}, {-0.9024311396008458, 
        0.7134296649955818}, {-0.8877783854607505, 
        0.6941452573292209}, {-0.8721788073832561, 
        0.6736226207429425}, {-0.8583424717249675, 
        0.655428140350644}, {-0.8459965107741494, 
        0.6392015415006302}, {-0.8348680568190664, 
        0.6245825495412055}, {-0.8259582417448977, 0.6128884934741878}}]}, 
      {Arrowheads[{{0.017787814317651078`, 1.}}], 
       ArrowBox[{{-0.8238384293385225, 
        0.6101062578244737}, {-0.8158887037976391, 
        0.5996723110569346}, {-0.8006544804637513, 
        0.5797072744234518}, {-0.7883878235029578, 
        0.5636608079910146}, {-0.7786417908575388, 
        0.5509428106193124}, {-0.7647430210027144, 
        0.5328930926709587}, {-0.7539065735268528, 
        0.5189687687641216}, {-0.7479511988993519, 0.5114917348269944}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.9768630386375117, -0.20030141568614634`}, \
{-0.9745341384055546, -0.18755684985787074`}, {-0.9694053015061518, \
-0.1583438059653603}, {-0.9666042133626424, -0.14190350693334575`}, \
{-0.9640005715019102, -0.126053090267149}, {-0.9596170801941394, \
-0.09602447330790918}, {-0.9558964914195075, -0.06812926616575446}, \
{-0.9551353494922917, -0.06211076820023627}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.9546964914949447, -0.058640632250892624`}, \
{-0.9524898959430309, -0.04119264999547624}, {-0.9497112870628653, \
-0.016173215768951}, {-0.9475018519434707, 
        0.0070634188795125966`}, {-0.9458027777493072, 
        0.028651636315605862`}, {-0.9445647368151192, 
        0.04870097247375971}, {-0.9437384014756512, 
        0.06732096328840498}, {-0.9434448723503168, 0.08074633978058454}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.943368416099952, 
        0.08424328048504932}, {-0.9432568020836766, 
        0.0893482600627789}, {-0.9433430318568808, 
        0.10927137582856727`}, {-0.9438854792483639, 
        0.12734444079945303`}, {-0.9447725327112243, 
        0.1438215851891191}, {-0.9474217239855602, 
        0.17242510090171273`}, {-0.950973137948853, 
        0.19595590032018892`}, {-0.955104467283348, 
        0.21531022273769232`}, {-0.9573036217690987, 0.22298722494061682`}}]}, 
      {Arrowheads[{{0.0007088475219116448, 1.}}], 
       ArrowBox[{{-0.9582668530428137, 
        0.22634975752218384`}, {-0.9596324212456151, 
        0.23111680329776574`}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.7851561292919302, -0.20030141568614634`}, \
{-0.785138677301566, -0.19942392286780042`}, {-0.7850530797254061, \
-0.16988964275239357`}, {-0.7852296263026569, -0.15117739083290435`}, \
{-0.7856763939549056, -0.1332526173594825}, {-0.7876896996303737, \
-0.10409238072860141`}, {-0.7903657534898595, -0.07708177383457548}, \
{-0.7921511920549602, -0.060695700462576566`}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.7925300698708201, -0.057218504544971155`}, \
{-0.7932109080378467, -0.05097003182940339}, {-0.7963942639628373, \
-0.026656019601938995`}, {-0.7998713727677691, -0.0040230450195234205`}, \
{-0.8035977859555804, 0.017045584050502202`}, {-0.8075313590233081, 
        0.0366553721028855}, {-0.8116299474679892, 
        0.054911823632374096`}, {-0.8181915501808333, 
        0.0801721644442967}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.8191717064474172, 
        0.08352918133479452}, {-0.8255335554074945, 
        0.10443047028207995`}, {-0.8327790632163855, 
        0.12533449364964847`}, {-0.8400208578987628, 
        0.14426500092283379`}, {-0.8472247262829854, 
        0.16139754460588698`}, {-0.8544224115361634, 
        0.17675227125814263`}, {-0.861563211401968, 
        0.19054358487008088`}, {-0.868596423624071, 
        0.20298588943218185`}, {-0.8740816669556142, 0.21170871202342328`}}]}, 
      {Arrowheads[{{0.01354449426038775, 1.}}], 
       ArrowBox[{{-0.875943650025053, 
        0.2146697015367255}, {-0.8820237186420758, 
        0.22433843575383533`}, {-0.8940715635999857, 
        0.24183983891702962`}, {-0.9044958680910935, 
        0.2563771713351329}, {-0.9133844055572855, 
        0.26852332333347606`}, {-0.930513421846622, 0.29210072885376376`}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-1.1726610510546447`, -0.20030141568614634`}, \
{-1.1708934090572425`, -0.1963054992685065}, {-1.1642929175717331`, \
-0.18129801063260353`}, {-1.1579415096659278`, -0.16676712431200064`}, \
{-1.1511505511943272`, -0.15117977258706805`}, {-1.1446391749897358`, \
-0.1361061489250069}, {-1.1380937485219698`, -0.12061699093534181`}, \
{-1.1318465220474065`, -0.10568766923375982`}, {-1.120162439576214, \
-0.07736918088362213}, {-1.1178046742162246`, -0.07159949195893586}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-1.1164815328735538`, -0.06836163204286819}, \
{-1.1089912750903124`, -0.05003221805266139}, {-1.0988459465749927`, \
-0.024658306260054535`}, {-1.0896442681971583`, -0.0011114404123543763`}, \
{-1.0813040541237122`, 0.02074438458388632}, {-1.0737567579822658`, 
        0.04102465379069056}, {-1.06693383340043, 
        0.059844852270081364`}, {-1.0661245182932853`, 
        0.06215877817402321}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-1.0649697369151248`, 
        0.0654604322772594}, {-1.0588673716231918`, 
        0.08290780351704513}, {-1.0519205223321373`, 
        0.10366233188546747`}, {-1.0459192508805597`, 
        0.12240527864714582`}, {-1.0406895226217514`, 
        0.13943348507387743`}, {-1.0322809370627313`, 
        0.16883878237037064`}, {-1.026167248415651, 
        0.19286443467068703`}, {-1.0247243260169459`, 
        0.19937886147936532`}}]}, 
      {Arrowheads[{{0.001423039992374816, 1.}}], 
       ArrowBox[{{-1.023967913847928, 
        0.20279386960224352`}, {-1.0218151043134651`, 0.2125132558685246}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.9073877293731378, 
        0.9528387197038202}, {-0.9058832363491609, 
        0.9501730874334477}, {-0.8975639788066783, 
        0.9355095176549271}, {-0.8895550248238299, 
        0.921472071161498}, {-0.8829613850934723, 
        0.9099497986509204}, {-0.8765560565718516, 
        0.8988029368169126}, {-0.8667507237116743, 
        0.8819686904812176}, {-0.8573987840474049, 
        0.8660255409090327}, {-0.848446427766235, 
        0.8508599716914254}, {-0.8399115914724342, 
        0.8365098216313732}, {-0.8371393130642566, 0.8318461459178074}}]}, 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.8353520275892619, 
        0.828839478247506}, {-0.8313590260552445, 
        0.8221222364930356}, {-0.8231885223786459, 
        0.8084752003556825}, {-0.8154000804426386, 
        0.7955687132193138}, {-0.8079937002472224, 
        0.7834027750839294}, {-0.794204266520252, 
        0.7609778054913712}, {-0.7816973626398228, 
        0.7408855512532654}, {-0.7703666929887226, 
        0.7228868166393767}, {-0.7619921659184713, 0.7097101916900004}}]}, 
      {Arrowheads[{{0.018491575065352088`, 1.}}], 
       ArrowBox[{{-0.7601159857286963, 
        0.7067581775057089}, {-0.7601059619497389, 
        0.7067424059194701}, {-0.7498626853744141, 
        0.69084334731292}, {-0.7407426018420382, 
        0.6769083533842156}, {-0.7325766316179088, 
        0.6645991628110519}, {-0.7251956949673228, 
        0.6535775142711235}, {-0.7125374170148451, 
        0.6350013297921171}, {-0.7022647572407309, 
        0.6203887729494854}, {-0.6871299336810577, 0.599996041870484}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.01999999999999999, 1.}}], 
       ArrowBox[{{-1.250191838276312, -0.013210960934396455`}, \
{-1.24438701936316, -0.005550313661556668}, {-1.2292414507365341`, 
        0.014498339251721368`}, {-1.2224502185896584`, 
        0.02350346744016321}, {-1.2158850510147, 
        0.032220409549410495`}, {-1.1990577214570872`, 
        0.05467043283969198}, {-1.1837205665227126`, 
        0.07520667539586989}, {-1.1690668093879684`, 
        0.09486303648762164}, {-1.1662196115535415`, 
        0.09869801075144698}}]}, 
      {Arrowheads[{{0.01668321036336555, 1.}}], 
       ArrowBox[{{-1.1641345776100558`, 
        0.10150640411835173`}, {-1.1557798478524848`, 
        0.11275963465052102`}, {-1.143736788613931, 
        0.12904982550542426`}, {-1.1328147383699765`, 
        0.14388696467318768`}, {-1.1229147139889566`, 
        0.1573952781481484}, {-1.1139377323392063`, 
        0.16969899192464374`}, {-1.1039363273967198`, 
        0.18348871141660467`}, {-1.0951705334425306`, 
        0.19565785671909752`}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.02, 1.}}], 
       ArrowBox[{{-0.021087723326494404`, 
        0.09005832281209986}, {-0.003042177693881813, 0.09750062657973237}, {
        0.02184672895044932, 0.10321317937993987`}, {0.041812828452548446`, 
        0.10465948384234776`}, {0.06147856166316934, 0.10313787519649198`}, {
        0.0767894375238537, 0.10028713947725994`}, {0.07909470685930556, 
        0.09967011094963749}, {0.08132675781482218, 0.0990720083145381}, {
        0.09135031003308192, 0.09636655714997634}, {0.09989541265871082, 
        0.09404307233677864}, {0.11441531687163443`, 0.09006002358907109}, {
        0.11494184885886272`, 0.08991196902492743}}]}, 
      {Arrowheads[{{0.0019981210634220643`, 1.}}], 
       ArrowBox[{{0.1183090408727832, 0.0889651544759514}, {
        0.12458840606338531`, 0.08719947129060984}, {0.1317466617830612, 
        0.08511680487474482}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.012429569993048145`, 1.}}], 
       ArrowBox[{{0.03298396810067491, -0.20030141568614634`}, {
        0.036004445771432636`, -0.1934315030499949}, {
        0.04049929010417055, -0.1832926636457984}, {
        0.04519548632158323, -0.17261612373404517`}, {
        0.04925160327574169, -0.16299078291161245`}, {
        0.05629115911412677, -0.14553913443163366`}, {
        0.061348644591167865`, -0.13128517280743934`}, {
        0.06434205540561411, -0.11934957684849012`}}]}}, 
     {RGBColor[0.2947336, 0.4054232, 0.5678384000000001], 
      {Arrowheads[{{0.01999999999999999, 1.}}], 
       ArrowBox[{{-0.2938233715552279, 
        0.36576945921413934`}, {-0.2912460347329223, 
        0.38121494875296813`}, {-0.2864522961063537, 
        0.40949126014746723`}, {-0.2822915298443318, 
        0.43464132677224576`}, {-0.27891546162068, 
        0.45702512743512796`}, {-0.2763530328071669, 
        0.47686902075317217`}, {-0.2746014492421641, 
        0.4945290033826705}, {-0.2739722821134413, 0.5041966087164638}}]}, 
      {Arrowheads[{{0.016935777663957815`, 1.}}], 
       ArrowBox[{{-0.2737451275876225, 
        0.5076870013405338}, {-0.2726392576390656, 
        0.5246794882729849}, {-0.27207269076582574`, 
        0.5485555059628413}, {-0.27219311626127507`, 
        0.5673423244418063}, {-0.27229190176424395`, 
        0.5822252116994466}, {-0.27230377647565984`, 
        0.5839707932189557}, {-0.2723153438577595, 
        0.5856611892291761}, {-0.27231880619094123`, 
        0.5861634143465451}, {-0.2723304769010448, 
        0.5878495507937923}, {-0.2723399681059861, 
        0.5892122477543354}, {-0.2723492542487122, 
        0.5905374994944853}, {-0.2724322099644728, 
        0.6020027085869643}, {-0.2724995516561774, 
        0.6106563289773966}, {-0.27255515374869865`, 
        0.6171925893256596}, {-0.27264460965378906`, 
        0.6261173018966871}}]}}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1.050191838276312, 
   0.2358477917652017}, {-0.00030141568614634235`, 0.7528387197038202}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.753359049792921*^9},ImageCache->GraphicsData["CompressedBitmap", "\<\
eJysvXe0XtWZ5nmlGxQAAzbgVHa5ytXdU13dUz2zZtaaP3r1TFfPmp7VXTau
cqqycNkUGCWEEhKSQMFEAQKBEMEEgUDknARCYJDIOQgRRY4SEgJJJAlz5v3t
vZ+937O/7wrXzNy1BLpH33fOPvtNzxv3D/Y/dMxvJux/6NgD9v/ef52y/6Qx
Yw+Y+r3/a+IUu9Q7pKdnyJienp43vtfD3xv7a/pP+BnLf9IvXf7+1fC/4c0x
xxzTHHrooc3o0aOb6dOnN+eff3742JYtW5oTTjhhaPhYf7Nx48bmuOOOaw4/
/PDm9NNPbz777LOef51u0eXfut1i7dq1zZFHHhn+HH/88c0777zzL73F+++/
3yxYsKCZN29ec+KJJzYbNmzo+Td/3C36wsd6wy0mTpwYfotP3/XLvhr+/uGH
HzYHHXRQM2vWrKG8gt3q2GOPbdJPz8///7vV8Eigr3VZ8EDah3POOae58847
w+cvuuiiZsWKFelluv9bX/r2F1980UydOrV5+eWXw7+vWrWqOeWUU3b21f70
b+edd16zbt26/LVFixalre/+vWGD7vfOntPbrFy5sjnqqKOabdu29Yz6F35+
17hzI9M/Pfjgg83kyVOag8aM7xkKk9sOnHzyyY3/ScuLqx3WHHzwwdwp/NPz
zz8f+PSFV9c3E46+pGevdNtfz1zSbNi0Ja2tPAop4iHxUSNaj6rve8yxxzW/
OPRs+2YkDP82bty4/Pn169c3hx122K7p9pfc9GCz9Lr7wm9fSdcuuv6+ZsEZ
y8LDesN/h+/0kfYqYoNrbnu0GTvu4NbTZsyYoTuPnnNh8/Ib77WeNnH2ombS
pMnuBb/0afHddmnmLb6+OXXx2UG7zJw5k/cK2oa/f/TRR+ErBx5xQfP2hg8S
7/c2v7t8VXPt7Y+F33ZPq9YeGzkDWfm7LUG6Yfz4g+3FHvQrSPLSC8M0U6fP
ak67cEV+o42btzb/MOV3zaYPtvV8Kz0CqdTP6+9sav5x6tnNa29t/G76ypGn
39jcevea8Nvw9NguL57Erb/Zsu2T8Ihbbrm1Ofroo3lb24/Ao7ukWyKRxgjN
e+9vyczkRaY/PYyNqhmEDdy85WNWKd782aQzm20ffRp+i8wzrOtXD502vZky
//LMfywDpfrUU0+Fz9x6661Infhv7mnXNQ8++XKLIw5bcFXz2NrX3CoHBlul
+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
tySJgpcQgNw5xLOdKkdEF+FSTpy34fFa1fQFV5lReDfmv1uijQvIvsp7xgs5
96pYZOczpug5rOry1Wv0dcwUiJM6O2kQUKDKb1V0jgjCdLMWXt08aJaU6h4x
DBG+9Ru3hPc3kRY1MLiEVfxESqE1Qi3aTvhM5RNCcCAt6jRTVLzxZyXAiCqK
0LVwbl81kxrlBjCgJEFcOD+NQmP62h7uczolyfsFqHpUuD/Ia1ZqZu82M0F2
Ck7HFpJA+iKdVjhobrqnIxkWdoEYDiWZRP4B3+QgjV1SJFSEQgZ4EmPyRXtV
HfDWyiXodDSQHHfO090rzqsWo5ckIBxm57y9yWVbxfkIDrkuSCpQ5aEayYEy
ljGWsE0+9rLmtItDfMFnGYlb0ueuWwNrVevvI+Z4ykWP9AWGBc2iv+2Pvk66
Qq0ufiTq5OoIUQom7q6C5ZuTuFCyuae7piLI+KbD85FW0w+b0Rwwfnrz/uaA
RHSklTT++++/30ycODFYQduQbuyj+AvGAUCK/TSYVJnkau5OZ5tiX3pdpAds
gyWA5upVowQvJVS+lqjFR1AZyHcYLfzRp5md4tFw0fRKleA64lTgaRjVS2bX
cVJnyI0QGbaCNHJVkNUTky3A5XL4b19AF2p2uOH3T8hSY2VZqhiM+T0iJaoZ
TkBf+DN7NKXBdwSoeU1c5A/9M4jnjyUWjbRaNWn5ujmMjEJCUjekW9XcsIe7
H5/z8uLPoZo59/jmyBPP7NFRK2IdnklFRkrrhDCttgQvAkcSx5rqrOyEV2Tx
gwnBjiBKtofQUYrIqbwKjYxXph0xTZyZgiVgPwlTjHCvBZ+hd4qS8KNpiK2Z
Nc7aS6P+yF6ILmQk2FjSsLLMmhQAza+7/XGfrMAFIjEqWuksWrCvVDlelvLz
udPSOFi3NJdFX6e+dFnryMTeeBR6VR5LBFjc4z0lsYlIzWM1515unT/m6fEn
1jQHjJ0CHo2YYWRz6aWXNtOnTw/nVxx22GHN6NGjw9+fXfeG5peVE59i4w4o
CAVse7Zn3viOlkQp9cwytn0UuKGquQMxmpFtFsD9Jb3088m/y7mLDBy3fhzk
Ffj7jQ5yE76fVtWzEh5Fm9Q9n+g6lJKuwY/UGaMn/FhhnG5PGBav0jfRGk3V
Ot89xQegtYHNvD6IIlnV/dgEgcwSR/hCByu69GAZgChC+yOddklP56yucePG
6bPheKRJk6fikPRoQMsjjzzSXHhhYCTJeba6OCjIO3IeovJqyMObIUuHGbO/
6/M4jorUlkbFQfnAxz+QW9xoOnTKXPDcVIhuJpTG7s4/e7m0AJEDdfF9L90t
jMA2ZUSzU13gquoBmrW1mXTbSLp8PSRCzLARP/1D59eIiGAx1TT5WkV5FCIs
b4aT66/xGVVm5HPuDKio1UVK5mg3X0IMSrumRgQKGpAhVX3lyHTXbgyAKBPV
NLiho0bOPPPMcN5bor8uX7b8wQAPKMW31X4lcZUa/XkgLWr3P/Fy84PRC+lE
6ynSLwkm6IsLgV3AzUM5p9HOav4J56TEbHdYZY51uWBUf4jkhlrRYtB7iv0O
oEQtCtTkAltRnGZXRP3NaZYbYWxRHzui7Ih2lzy3zpXzh1jIjHpVTyQIR0Ri
SGZE9/Oz7VMJf76G06OzhzxHaEawqI89aIcRy3QRvGhRH49Z577vku7a5Ti/
kJb7dewYVvkLx51ySBrMkakfD56F+ihCNLRPL6OUCPL4M03PC12sX6RvN14d
txgCCEuVEKbkkgjfVFupl8E7nZ9CiEWPqFgR/IxWItkyaAVnQap75Bv0xFPh
cWY4AGiBbTWzOEtA0uvceRSAuDngfnqnL7muD7cIQ53NKlE7LDUBstfJJmKU
hHJbDJCYrnUNF1YD2/35Zgoe+HnhKrXTmrFNKqDSc1kfslhmAwzvOIOUg0f5
wSU1m6lgwn333dcsWbIkmAhxCXwHl7jT2vKj6EbiNeEPcQm+lM7RcIahE6tD
KUL/n3y6wzkbqtSGGpgK3EmCwaCtFJbW07EL41LpvOwF3hy97PjeBZIWrFiu
Ofe4PygJvaDKseqem/7EDU3QPgvixOQWyiDxTgmhP8okNclnypIeq5EiES44
ha2zl9L7BXfFtJlnDDQpfgW/+VGE9TQybsnMfT8UjyWOqmrDkHFNqJJwgo/V
W6tTADZt2hRUCKcqY0w4xoifDalfl3uKixYtWhScifhb3Do4iEgcGyxds0fa
BDQnmTg0IbkF6p75LAMCSo6xmw4AqMz8S1NS10vRVFUZw9t/s8/TewLXsxEG
w1M0U2ovxJpTyYrKzHEhznNH0eau5wr7FNZSHA5ToYZIU+UyXmACGS+7LFIA
kDRUWhzkh3D505tYIwcEyteCJfB7cUtxQyn10zshY5oKKvbAzB5SnVaE1m1P
HY/pH3WZ5c4A2z11w2qdyntg2MVG4UyGdPSfruHNKwzmywNgTd4fj58SiL3T
vwHz8AIQaygMrBu0vhsJnf3VZsGkXzajxh7dXDvtP4dnd+OGwNZDWOIQMHri
AlECNK+BRvukdyd0j5YWF8DE6s2pagsUjwEl4NKA98yIKBKCVkA0+YMWoSVH
+6hZQzSU6RqQTyX+oh8aUfBQ++hPECX8SZRYPECYsPZFgPiyO/78CaXEdA1w
o3478UAIhSZoq13jd0r4G6dKuP/KBIuLfYo+9ZPZpx5oJawJKFFsb7RXiQCK
9+KbHjBQEIbMlgRnS4m/fPi3m6MmHhiMM7oEx/CbkbI+hYwsMIGuBL38MZDE
6Si6sE+Uti29IrMS1s768/CbDJWflILHhOooddApi337Yy1RITBPk6ZIwZag
DcrpNTHF4WZqavfYGajpKYmXKgi5M0r60zRFSfQhERpPSThDaS9RMkzGShpD
13CMMMAlTNouPeAHycZDoOBNRjrlo8NvgZbdCu8EXtcd/ifNbyf+JmBa8+S+
0SZoHD93fZm90ApBkdDEW6Ma4O3Ze4X7aiNDjUdrKFOs+ga7fDR3uMcivIOG
nsDlvgiI2rM4vqRo7WXuMGfRCIlpS1tf0LjckzyPcaZWBoOGQjN9PfS8q1eg
G2HvcPNvZCb2izNBw2++SugXaZCxiPhFOqSMCig54xisFFPi33dWgkCai0cR
U3VA/I88mHDQD0umAb1fpDMQycdQI5La9HJ1rGE3Tef/RnoB4nFoaKCFUSbc
zbenrK7G/C0MJjlCHjmTkABNQHomt8C8+34++EXfRYI0ACvDNNtopMofhQu1
iTLjN2jzgXeqK9B3YVhNoNiZNKMgNKxGRMe5VGgiD+lYVsph9Fw/EUsTWXgP
xjo9//K76PGdFR/gsmDa8zT4rnmCbuUontByTgjak0FHFNSYiZqKx+IlscjO
IdAFE0kZ4DfSNY0BZD16nVD3NPW/NT8ec2K2GcX298RjcTVWSzRHnbCvnjfw
U8Bl5gi10P70dDqbP79KbU/+GTqNUuLN6+Lce1r6Y9X9tE3Slv4a6/1JGohV
OojXdLRmEAabUGlrnfq5IQt/XyjRBo7+2jxmw37daO7bydV9PGg7ZKnerPMB
A8HwHZeGwyjjctOdT8altKYK4/tz3ErJavrDadljCic0/gIVMengqc38Sb92
eKAcbKcXQLmzf+CoEnMQS4NMic76yDEO5tSQ6Ck5eFYAVShlEkvSRiZPX1Sm
TEQnl4l6xNMI6/trG1wRWjlLcknWCrLTNPYAETyVWQufJWeq3aAkUW1eGldA
dAIgyq4T7CEP3610ROQnhIRGA6EFGlSTaIvNjm8Rh1ppbBjm6zdmLZevCifF
Jr3bytKECsBldziDIQJTgaMThPVK4eTQNGVhn/Y3WgRmAef6Drey2ESkUUlN
i8CbXQe81ufnwuRDW02dy5ZKnHCBFN3Vd9Nwgi8lMN66Gq715pgLzSTx5xHJ
E/dulfpsJMYQGHFi+x986uVutFU/I4426jMVN5TwSDcaV38TtVHOeGMv2paC
aeBLLAre1m5tapOxQnmCxaWt8Ys0m1g0Jiky25Qgh8F1G7AgY49zq+bYTpUO
jtbYf38og8aFalUANkGA3INpKhMg5vfa14T5oRtEmPx3u9EYoK4uGT/nXrk6
rY8YWnIm82742eRay+pE47OvSIdJh3yN1AOFnGhnzqscxB0lpcACaHj7bG5/
tcFKKLjDQYPI4A+BUsg826un0dPaDF+6K/LqpCXSq3ohHbKCgS45YyEyohc6
vLO3WlGcE1QPY8QYgfngOBEVtgKl+xmwEFAHBGoj2Vw6rzxRWYFiqzsjKrug
KaR+5r3WpzeCCZVg8B4U3pInNPk3NdJ1q+jS+lAMrOXGO58Q8Rtf66MhRqzl
wHGzm7Mm/5h+mWCTFXeA/kQeET2ikOWUvHaBROqG+Ga6xqsJwhSf4YuQKqVI
tRpVUwXF3EzxiA5xr0AmJgbaLHBeGvzZyoAgFZyRlI8PN/CAmuE3ETicc5Rm
GGh1wAcCKX4DMWmKc+p+AAcI5a/BGBo45M9cwnJAOK2ZKloxgvekuB9r1hwH
/BbNvO5WkCPmJehBtp8dLSCq7jHqb14x+HD5LQ8FC0Cyu7QT9gdoEUKbRmAA
P/+WWi98PQOohICECMy4B3jQn22ChidwkWORLVMK2mN+SebaqvLMeXARHlLo
d/w5t+TdIwSG0QBg+Ppb5cb8eXdpSk9r1DNvz9K080BLnamh7+LmKXXfzXfW
NWA2asNzC5wHNG6cng5jFGxnCXZom4De4haJGdnpD8rBSSG1rvgCahCXDXnS
2apVMkKSDEPgCSr/kSKZJcsG9+qsNcjFHvW3qY3np2irtLPGNROP0WvIIBvm
HGTSGK3ZmYWraLfQBoAIFvZll6S266k0DIxMs74yEWBltYiL0IjOcS0fNX5X
+lKExkCfWx1e0Y3QgIN9zXD76YzeIOcxJsdfEYoe/XN1GAtIW4TGY0gMmwmt
ggciXvgpxGiZsN+ovbVWijEtRliBqlEqF66f9r/nr+hRhOAJUbBtICpQUiRP
xux4n6qxFa2BKvgqt5svJVrjX8HeWOdB3TgJOuqC05vv0lSWXm+YkZB4gubG
zigAvhMZTBPN4jTHk3kJ8I90TyB+x8YK4/GmNfrBUNbaAYZRwLkb4cVI6ST6
8Jt0Osw6v6rHhRH0DG0XQSGFViV5qsp/OtqdQHh1evA++CrTJxzSbJmzS1h+
f4plvXLEt0J8mn5TpqmicKW70S5oSSgMtMYWpqyE5EvdjGyVdDdbpQ4SLRml
J9NUKJynLl65Og9ZqMx0Txk9Qcyrwv3iE3hRZyv5I7M0w9n7eWBWSpHEAaHO
rfKj8G80+Uvfpc6hPvOK16+PZmAwlipiRFl1RHvKasAcwqFtImakym1l5lzR
PVTVMQy8CuYpAYvC624YQX9YoLwhWKluUoSNaLNNZO11ayO9w1wHkRXbJVWq
9XJLnUnYqaQJVoKhmAVSHRQzlOhQJ6zGZhLQp78yV0pt3paHPitIzfpYOmrR
aCIhJQzHfnjOg4Efrs4ypvJOSNhHQqclMCZSEsFCh/mi2nCkUira9xZFBWF6
LlqcnHy5FmnGkomGGilLPEDJWXwz+OS5MKN9c1+VThosJq2cPV8jXpTG3IQA
4hCsdiKvVCisxOd+d/kqJ0d1PJlcrt6G+CMCRg63mhjVQmGAiVT/5CTZjcCK
iphNTQMGtYc6fatp6QDtOoBfBarq48LuElzgbbFrrfPuDZ3g7PKbIk6gFxJj
Bxiw4n3IRYojiFhJCXjnGwVSrsXDy8++fFVgPjOOWh5zUcQAeiGiB/p6Dgua
dULz+/MrSO9zDY1dn8ARmzeZZPRPFPcc/t1SBd/bhrfaFFgAfU/gFsCAJtmr
TX1wDZyeDx4LNyhOzucBzSxf9VSHvx6nL5MoJJhR+K+3WkbMaeKMUaJeUmBh
V17OBU3aKaJbRJq2arptK/p2fxoPuj2PCusPb6eQLe5jKT+N6V0NCRTpcf/5
LOltgo5+Xv++7sQtfyqVEmMiPfZAzzQT5/OcQqJ5rNTnfwhGk3kPIjOQXBUK
ukaoLjleuSyRceocOSzOJopROTDx68MDMQjS81GCG6A1GBTGtd1KMc4kcuRP
YTNTp9LoIP75qRqwk9SgDjVDFY7rjHCyL5yNmQelthQCvufiVIQmBYNHr3N7
dS2OVj+vRPLt/hQ/6wAO0/itEfiTzmwdaazDxg3KZcLKwDZOo3cjLHKvtgqD
bsMSIbBFIDfykOwqKTIRmEpC4QMtwSejRWB8RQicc5tSgjh4WG/WYkqwKNI9
3Uum7qWutY6pk6UnpoIQSUqARNnYmnRBmXjeglvSvpSvdVPSst/wkVr7urmF
qVUTXQrshXOrXGnbYMnKqQEXZ94cJW0qtSBiFdGLOBkBxtKnERtgBbq0+ehv
6GfKopWr0nR93Y+gtOJiuoaS5rv0U4j42Bbs3c/TKQQE47VOmAJxg+H9uHNl
YISvIHzL2a9sZjLEmutQNF+86bAM8VgAQTqQAan9Tz/73NEf50lTdORkYeqU
AO8cCQm61RFFegHym4r+d6V1JKUSCd1DKk3VzMfr0ZWA+AQVEWeqyNRw+hIy
T5I8+1kGm+pTR3FqpWK1XhAxGw4Rcs3hc2+EnK0nLuhZ/pOuESFhT6nlU5nN
ienUE/6YN6GMGaE8lT0IxVFSzyFUOBKGlbQiyK1R75Vp7M+EL/bbqMFmQgti
jZ8n4dkn0Z7KbwSCcDcBhwOM4aA9IZdyPlsKGYfffSELINMfT6ojj/1r+ImW
Wq1zvrvnzaUzUXaht8Rk57lX3m2lQ4AfqH16o/1IDKkuPzNdMQ1tIm63Whb8
qZ31SVndyLotjTXKLJzahJRltBcWWVfetzbPjJThRWaI5AKNUDmMK5V3DW3D
iSqxwy7dvCvj70QsNPmAH9wNujl/Pva4ZtHkfwCB7JNWniajhZ+Q7Vh8g684
1pih3nwyu6c+gS0dYusjkShWAvXFkidYZnctUt6Can7pAl7HpzbieMLpdcF5
FY3BlTrQos4CRFWnmR9lWuzn+awTsSrBjR2tE/piPVN9irjnAN0vQXDHATFR
y2oxhSJ/aMZOCCLjLjNIAlM68i6QP6S0yhaVea5VNlIuN7YXTImGYkHEZr+V
HvJil3RH6jmS6QahYF1QikqlEijCZ01DMQsNFcNF/6Ml9h1zMimWP0uPg5NA
RqAb9DBRRn0FySODQ9j6vfe31IXCvSFDqqpuP2NReWgRzB8TIYJd6I67FOvA
AEzjWXpdyHu2MLufXOsPjqDUif3TRuiIeXLkxtUaKsV7anyF0dtLLT8oKzwI
7jS0rYoL/OloCyAl+dLh325Ou+j2EIvHp2DNoiWZDUKpo1KsGyZOLUbfyK+w
JaSuMAl6BayJxq6cOvkfi60V9CCIwWr5wImTfhlW9GfphsS08GGY6+Sn46FJ
jjeTZKrTD+vDHPnaETxopZ2lcXmcxkTI/aETRlpY5CPjCYuBnmalwTgiH1pb
Fdn+DCSRVHTCQGMxeD3TzD6AzhvYP/XUtOMHnEh8tvipg4ZDVHPND6145JWw
4bTUfTvdGuiDHsMNJULzUa48yVoUzYodQAlIQRDV1cmE/DFv3CElzW9ALSGm
+pSBVaco/KRVxRJFHBBY+5DI/vAZ3SkNmciyCDSGKP4eZBN5bU9gvCi1AY10
z1K6OQ+zMOdUzzpl6Uo9BnqptUy0/diJ/O5pqXgBiKtuAZrWEkBKahqJ25mq
q1PXDbE4ELxtS7fUXbcknnwJiioJ6dMk8ORzb4jGxLCI3qndK5dmFBqjo9SW
K+GE7nxtP1us6W9fhbhgya2BSe1hZY1+thtxUBIY1XyJRG0dIqOYvAwp6tkA
jm7kc/SiABkTWAp3TUoXaKi0s4gKr4MXPFGxHKKI+T66JeUGdWkfikAhNgms
JjGmHis9HZCh1sI9utCTH8zcNbc92s1wlqCTpAbbQDYFdw0Ej7v37bQGIBxe
Ae6YQYwUylQ7NmgMK0WcS8h2VZi4s6x59OlXCc+IikRAECKw6PJVT+kyNont
TWUahXyl5CdhNnAUhY4USpK7b1qgOBZE4M94lYs0Ksev7UOzPPGc75mNh1Gp
vE5qlZQYSBTmFeWICYBEPeVkZpqmYD6deEdTgZ6LlVVxaR2pqYrkjZB0Lvxy
3JHk/RxPd8OFLlIbex3ZUhZPBJBOkkDKIRQoDyFymkio+lY4SQVNOZGc0niv
vx0i7QG5KJgHT4+KRZ8a7eRMQ8qFafILf/CECh8GOzuQ/+Ync6NMQNovvb6h
aBpRiHhPPeUUYyqZ0S4DLFVdoe/CXwK1oi6xNSUc/LHPeH7+uzEJHoe5CMCy
ZfArk7H2cveT6qgyZArGVbXygZq/PeSg5uppfxOODOvomSf3AkhW2xkAHu95
/3S6CQdIxJMQytkwb8fTsTlFSvofpkOz5ZOlWmEmNgaHFWNboG29+tgafPVt
j4UMT0DCGpE8aAiiULn1QJCpDjGTPiZyF3Yvfl8EQadyEELhzVh0IXFLq6SZ
Mp5dQjRmcz5EOGbN6niGb3kRlbFEmu0kGY7n0F/f4i5fJN8yQVn/ulQ5UTkU
kqnxntYwaYQUPWsYwG20et41GQFlifNJ5DOi3pyUxKJDgzTSSltzskv9dhIa
6YlD6n3RRl0VGyd2ob/RcwYje9sfqNC6onIfzx0WSxSaEmjW4VQEiUp8I8kP
y9/u8jDsvnZb2RQogAYGSFOkvN4dbY5MCq/tjLK4xRrN4WPF6SdfQ2upa7V6
29YRMp2Ejok/wEmqiRuWPkqADZN6v0ZLORDaH+pH6NryZE6dTMK88AkYU5r0
zEvvzOtFyROB8/lgf8KsVDlWh/RcOoEhqPJC0mKHOpOJxMUOOXhaeBmRmSCI
jmAT66O2CS96OUErq3lGWWP4et+UKDj0hCt834SIIeKiIpa22o2jZ66WZr0w
L/dMOmmqo9OIeD3Tg3YeLO38127dLQhcaJgdvEEpmzE1DJv30M3BVnoFWAr9
yQrZVn29TXrcXQ7MFukprZBiknXmmnZC49cIObtURzxBg1ARQljE9o+YwuZ0
e3wvJoYeMG4O0lN3ckTXJxzKqs3Qq6N1JJPiDrSQcoQiLymFeLLbE1me+Z4c
5m7X9F3qNnDqm6b4ErwGCim1btfxtfhKalVXDqjMsI6jbzyk9jmXUMRdjyQZ
Wt8d9cTjDRBrpeBR0PTa3OA7EBQB2gwSIl/kfczF+5pniOgbsckEAMzSiRdk
21e6ei6dGUcnkkA5K71nxl8H9WCQovLufDAV7iLfUnWxQ8opfxdDIk3j2EaJ
Yg1GQal3a+0Sp2BaUkA8MwQKXpBAW0UFB8rfHyLUjSHYMjniYro4m9eBNpEF
nRQ+HBelHZs/8deh/KqRyA8u4wP+mucR/84KUlcxypZ6xeFD9lN5fmccrC9o
UWQCRWBelmbxIDr4+oRDoL2OTCLfvXuba1CkuM7bd/yB6KG4BhZUr7b2gBC1
oI2u4ViH831NqxSWka/Bi1NRjtnTYc6iwPOprALHULAZMHZUR42JnzcPeMdA
iS+65ZB50/owm2584Wdt6btEmHV0tN7R6YD83GcP/16omeeNCj+0VGUHmC9A
Tt0V0SFdorh4Td/YREzIfmY6TOzTz3ROzkCAvUp/JotJ8DnRV1tKzpBHFP87
1jGOS/llXSMuRib9I1ftBuKRW9A5qg/FMmPChPDsJ2f9q+JuYsnD3PyLNc++
FVsjRlyfFkgcDYjTOJFHE9YHURLowr/xZCR8JB9vZ6TFztV2BnZWv019/nn8
1/sed9N9C1ruS9PPfESlCwW7V8gSMdGRbkKy+CXod5gUOryQp2EOhICoEuiH
G1LDOprApRSzkBc2TqVdoiCBsVFV4TbX1AurfSANfkqaUlvHTGND6n5jj2Je
e0/L5SYGfWTKKPV6Zwe+Db3kruWZvAu99QzsljNKeFdiKTrBdTp8qBtu3xmN
b3ezsrKoGs9oBF4njQk6KXXV6YlmGZZ27+br9FZfixUrn3yaRwJIKlDL7Arc
ahKyW3ooRSj4sdvd7EuE/oV8JnmWHWAiuoDTEWop5Xi5+hpRee0DfI7RJ0Md
3r5UqPWkTkdb2wuvrG+XeLPNW1OfakuOyQroZEflOlDPhPNJRJic6tG8jZxn
kQqX6KXUNf0vJTNF1EQk+E2sRNoruW316KaeWAicfjK+do5a5ogWe18w9QfN
TdP/Y1DyoiHT4sjfUoL38hvvadquG2seZ5iagoOOAGtjwJFtMpIaiJC7WBnY
tl00HutbdaSbrj2fzgomHlTYWWTENU9noji+bPmnHadQVlpKm0wkQyWanr46
/S8PJ4pjI1A/TUuIpO4QegXN/qWUpl5VwF2UxtVSA0230VxlBV0pvRPsptcM
J3eYaUWETEHoNthIXhVPOWc3NbB0TZlZa9A9JY19lJmYnLfCiDo20lthckE8
1F8D9vBdrIWsug4/ME0yeIXYoPHgnngulTuKsfqSpEbkRt2I1ug2YlZNy1SI
1mBGze75Y2k9ol6szpYUwfFs2AGaGArBS2QiH5v7aqyiwTR37ADO6adzB7wO
6w/utfAT8VKeoC2CodkigqVmU/NYyhBifTrUABA2oawvpZX1cuG0BYO23hLn
M9zeLZaYlBzXqJz3AQuYiJMCBMaJHB+VakY6eiOdBpMrBwGIt6T5oFUxhCqX
IS4vkWprw7+Jv/im2qj0VigoTRxVkUImbVxAru5e+VieQNZBXRyBnHBvMQ8V
F1KBFUd2O6/XlysCmTD0rrsZGXH1sfOyOw07AX/jnOVFIdVnsFdSDhaFeqgt
87K70R0TTIlyykr7IA4euLfOamymILtup8JiS6zQKbBTSaREDcxCweQlCltJ
tG6ARPE2HBhWBW8Tse+Z8R9aGrCzGPi0yT/PXq7IDghe3TozclCyd3Oy6MpR
13yQOl8BwPe3mH/4D2OPC6rxjyC6n4AKRyLraq9gn0Njnhs433JZnkzTtVlU
aqfM7wTGAQLHGW6vKjpaiztNDEPbZC8BtHZbL0/hyKqvVtcYMymqAT+JbVDq
6Gc2A9AZCvZ9R10B9EK8BK06bViLqmPGzwqFMum7FQAmsSGPtxMAd9Pd3chM
AYOcum79Jy11TD2dWm/KI6teCUWcEBaUZyE0Lt8DGZp0tlgA5zGalKWw32Xy
VqxwITGHw2NQThoTKqM1SV3Z11IC1Pd31z40/EdEkmCWrlH5xDXfFE3wIAwx
ePkd966ldz7WAXOKZ33EUZ8f6F29ZJzeJcjVzfj3xOL29BM9VcFPNofIARHf
StoGZQgxE7x2vuFiP7K0G0MgFEoadx7P5PtsvpQD+GGj4vGv7QVFD/yTucMU
xlW5g5IGWDciojCDibhS0GwtSwRJA7oyEh+CUhiCuk5MoA3XkYHeqGs8DHE1
XXsu9UXj+uqaRllT4NnpXuugNw5LKdOL1L6Bj63IZ3l7rcofp1RnZOOBLynK
WW+odEYn6KOfRy0YohfYSGdVSe1xh9Mn/zQkLztT2YNF5pVpU32Ib7up2sPD
39ROGc6vNBifXNHKBe+JCaW2/xRP3iZljxG1fVAuGbeT6k94wiQ/tV/5abkQ
q7bioQH68XX5GjEKID9nLUqd+46dcrLg7R3HUxH4p1IFz/K76RpaQi1uvV3i
CoNHnOM1otZIZaurmgKGNOqig3fA3+pj70TyXxYxLVFzcSoMMimdYFNRsS89
ZOPsXZvjDv5RM2PGzOb0009vPvssFqqlQ2nis/vDxPkFCxY088b9pDnx4B80
GzZsyFoNJph9yFi6WTLLotDCaQgfbMtbzJkA+CmUQAju4/UQOyA8gh9dOkQy
9ckJajZkbcw5Cd0bcz639Lr7WnM7lHH186brI7wD54yb2/xm/BH5uf4E0WoG
te0eEUAQSPrpy9DOi3QqkdgpA/R56+MZoJtx70zwdDDAQHo+O0ux7aoHn+8p
U0goS534X5o7p/1ViFkuOf+CZsWKFXlcxXnnndesW7cucPOqaf+WGdAtMgPV
Lpj6gy6pEb5x1pQfh91XmRI2CwUN0pZrjn+HMgY6EYAqYybyJhCW3D81QYu4
+C/hlJDPy9gONmZmOmTLt4uq9VkEV3yGTtwSh1LxsNy7UJ9/yOgiKwrgsGLN
HShDe1pOlB/+36oaCT/VEeTUNWLr0TSy/44nnGr5f88VK8xEXXrzg+G38MrF
41TRPfxxtInQTyed6XNfZdDfwaP/udk2Z1jQlNOPPS+cStCmen8zefJk8XE4
lmDGjBmtnJt4hnL6u11gw0MFhj2nZM7e6XKckb80vKCtc/e0IrqaFBsgmQbZ
zIFIs8r07mhs9Urm0SjpmE1aQ3UNUI86Ilmpa6FZd+6FoVpc7KMAHt0t2n25
SbCjKjJJlf3KnhGrPu4qGyptjJLR5MYCrFxotz9Yq9WH/U8lhKB7DNJcpKYd
iAm0WDjpF1kRtcTz/xuD1aAzVkLoE7YJhcfE5TgIVI6wuy7YGRYcjzsZfUB4
FVDCvqNPbCZMnFI+Nix/DA566qk4w3b58uXYqJaN5d9jdMn+28rz4Iuq41SM
hVmiJoQoUu6k72/NhSd78vGn6tHJWiBAQkMo5ErqOCCTovw8CjgNr1RWiLiN
Zm/5kzlAO8QL8xGpBl6VK6nSGvY7paFgNQaYinBERFh0nttfg5M+uSRincyt
Dz4XAnCe0/qKG9sXIuJkqS899L82783eo7PmLLNUvMPIcguB0PwVPymZsMoF
19xLtKaTrfgAcXx8tlUPP19hb093cid4cO4fdqlFpHWsDuIBnx1w0PhQeRHN
2kDz6aefNmPHjm1uvvnm5phjjmkWL14M2vEVJYdNmND89pDfgFLzeJJ0iDGF
i36qafopo6jNjcUvRqm8+tZG5Q/5JA46WowsMkjC9MuubZ6DuupM8yl/5VZ1
Dd9AIQHvDcOv+HNCTcBBtRSWzs6nQ0U9ka9WopufZ8xzOsYwBFCIRXQ0MuMG
AeWppOvCg66mJ2GUlpXyZWTl2Tp1TIwEf/9w9MLm1SO+mWtPd8J7hDJSQrrF
e4xMkIybeheOw12DCpSttIpsuolTCXr1tJt7q4/0hHLCaEG3bQtlI1PHH9yM
Hj0uWH0ZhGnTpoVDIZvGR1cT0wE9Cb/OP3t5PnXK/AnpEe0h4ZPbq1HRxISx
qGV+5rAAc9LhjIEPiKvAN4S0Ui5MyyI4qOGcvh4Z4+ixFlxBghzOkKoDf8ll
kqrDuVPA0R+hDASEGthEAjSSI1xb9VL15h2XGkQgQIOsrjCNL1SWq1zC2eIB
z1LnXLnawfJIzsRW7qkKzVMgwHovvP7+Mj8zhigJ8Sbu6daK0xPbdlW3vnOP
v7pB8SoSR50z8W/CAUColQsm/R/NlHFjQhaqL23rTTfd1CxdGroymi/s89vm
DE8bFzW9sufb0tm6JrO+FgymIR3iD1qdd9oN7oDrvtxsh/qqUm7oIJQipiPn
tMuIJPZQ80HFQ/BGXerLNZ2G5PlPZ4sKmBElSqN6W3yFoXQnyraO/CY8gEos
nDPUvSuwHIjY3/GvZD0JCx5xyrV1mfZQr4FQc3wu1Rm08vZI9OGnhA7uDg7r
zaxke+taLlve5MHTmkMnTOpaEtoTwy2yAtVc0bJi57YMdJwGdO8jz5O0FzPt
2LGjWbZsWfjnuXPnNo8++mhXZuKHunnDgtJUkEqnnOkFCXtRUXTPYy9mZmJL
QDxYKjOpvnuXeDDg6p5HX0zTL0UL1UoS5vJpWtR4Of4gDi2g9fOt9ZtLddw7
7weDtXz1mrwIStt12PNJ59+mwPTzhmABgxDFhEJcRD1afUTgujT8l98UogbG
qO1okLw/P+0W/77gRgZ9HnWDoCECy7sAFwfRMvxQ6cGIqu4MdM6UHwHnyvl5
ZjsYzcFvhTGqAUctF4bV4piBvHZJ1PVs4A4LKuesxeMYycrq2ktpNhaRIElz
OFjSJKcE9PpCWS2URoGaZelv8wGydnwrtBfPTCfjDS3H/nbZnl0uGwF1f7We
pp6MEtVQCy8LxVJKnZDK29XdE0WIX2s30rs9nU69w9DLGaLWQoZbtkiOQprw
URSCP4gg/bQqQOSsF90ib5xQH0quw3vs4BMcHk5X7Mw10BmglshSX53cz9CQ
FW8+NDNX5Rm0zHHirvCb0InvxxnZhYf4wT8z8c2nc7/wZo64+ygRmhYAI+qz
cOQQxG18p0QxXIuC4OMoKioZ4gr1YuqkNIgjg0Z3NnXP7vCensH+rRSCxCFI
csv487vL73LbrIwYO0lPKEvSFCaJJZZ1YXXgKK6iUv3/T21n9+tpVd3x3zjn
QJoSZmi02ov+A15p2tteeemNFxUbxguIbRR1BqG8dxgxKpqqFNKmikUaxsQR
RTQxUiNgRZEYbKkaRkVseIlaNYNDglRhpnPcn733Z++19+85JwwdSbiY5zy/
59nPXmuv9/VdbaJTEk4ONZWruCdjwi0nXEuN2P44MiyyRYXHCIFMHbOGRhLz
yyV5F3Jiu+ObkO1KtyleuARSv9m2Zx3DD9XmvN2XdSe1ALrKBNpJMy/Fgbuu
DTll+70MhcOKbOuJ36IaEDGojCSATEEjjclp8uq7c67qlHiQq4JC/uY6jkAW
pNwIpgZZBYnTA9KbmTX31/HZSMo+VK/MfCCAbRCtT4TbyIXEcHud9N33068k
vkqXLDgLXqND6OIMX95RgDI8WBKBnIsOaHBfa5fWkIcJbqr1G6ETdLv+VpVG
baCtX7S1hiMxJI3ioyb8n3zLlOSYxNvANZwFqiwAtl16vDYbDQYZtThUHa6W
xyShjIZMbN09ZAf4fP6WsBgFpFSN6X2Td0DpEb+J7hLmanpuYCCcJcf/qMGw
ng68/1Nbt342+4BehtfQmvDWp+9+KOo7PA5ssOtu/oJxLnK2lCt/L+lVKi+w
hPvW+kEZPrRAakbNUSSlgJzJipNV0HiXTaM2OEiaFut9J+BB3l8rWKZA1xJL
9SVOtWYTI001KbtH3pgeuoaw2bTmQnZvsJJWBSqEeq6vfPP7C06AvU2/PvQH
7bt6/nAb1iLles00/pPAIQ+iz9CSGgiAyUz6JnnjEXAB64+qtCTBMoPtQgJ0
torz2pQvFkgRaUD6E8TxbzBRmWV6NFcuHG9jjDeyL3zT4XuykE/0V7fnxuTE
CjQmx8pzinHoqw/tGGXTkeocqnSTrMNxtJGw9+sXBPk2MGlgpwp6PrHThOI3
Xeu2bQ8yLnHI2dvx46qEyFXKPTPEJyebji97/8e+1OxbqoY/VwZnv0iOYDMp
yaAE0kC/kCN0bSWr6OxwK50ZdOLFChrkEI/4j0eeqDn1DkjxQOssjgC8N04t
Rhl499DtAxgUpiypxYjagLOF/UlGpA9Z2spuEDMStWBze/ijPxmoS+bkhksu
ypunroGfdan6aV4vxjh23Z5m6+7U5tGu+fI1spvj64l347DfvubV7VG7t+UH
rKGn8vSb3z5/cruV+PPoSKnP8SKz/r9+4O6l3lYyYSYcTWQSwHF6EPFYshI+
AzsGw5SUqhzARuBg4y/WxkWJTnnV2JRcql7m4mjEotDxMsd9FfT6uYBzZrS8
A1IXJXdprU2ITaHEYBoTuYVUjX7xyr/I/xrgjCjZ1laedEC3btssn0vfVAIz
s/1CTOufa8pu6pnzRb+87o+2Dv/t6yc+65pJXnlPOlMLKob5q19sjVJrdZMO
gZ0b9kqT7tevfm1/3jYc0XROIpnCAguAmhYs2CQs3HmOPiGGfvQ3skVLhPy5
EuOt09w0XUypPjZF7nIjUyifFuuYZIL8gKrkt3EWbk5+ffhOAKIC0PypNnYl
JieGOcNuZp7sUfE4l6pT00UEyldr/KVL/FWp8PttyXyNvVOIL4VAcNZGoPMJ
bTmecUbKXrH/khC6lWAcyUWmwHTKKDrX71qULFLXoX/4Oes8AuE8SpWvBeCb
FI9GBJY8CTEshkcf/7neI4COJIMwSZO/LXQFBZ/k2okapKM+9TOaGcVBjvXU
eB7pkPfOvsSFcxYUmYX7AvClNgTB/WsqXFrUEA611vfE0qkBtrYjhuvD9ICZ
Sm5t47ukq//q4htypZJuH8BwTx58pYplcjfc2Avffn0SC+ftzC+9HGSdX8pt
0dpcs0SXOEh+pb1U0bD0harI5t9sjTMHYTzQd5fEir9tOqnNBt4UlicTBVfy
BVHRV5u58EEFVG3KyhRn5bOFFuDvaBKQ5ZOvcc7ITkT1PjjNi8GQwMMBTEN2
oizHkXR7wn2UgAEh4Zc61xUgEgmUSxeTUcPgotjkiLBERU4OR9oNzKAaa2x/
MwiBFkTjbW0t+To8F6OADFcPqWwsMlLo9VrjoZ14ON68rTettMisVMksK4Hc
eOk7L+us3HzBoFbigBWo0b53tTx/EgnvxPEYs9K4t9CIdxDbNmKGCZosANmG
iKZg5Y5ZTq5IHWHnorDDkSSxWxopZw7ca0CPUNf5i+bolJ5Xtg9mjSPGYa84
5QYmyIgiWz0iSwepPdH6f+D5/FspvV9jltzDV7EFJ/yWQbjQOOm7lsIdq4LA
cMbYxn2M3LG5tiqE5d+842AWG3Mt6ahpOm7jCQvBd2SWhtYSmIVAhAApqiiC
pgTCrvrQnQTYHLwD+bmM9QFv4qtWDnElxFpgZWL4cgP6Nw+CPtZLw633Sj5T
4xCoUUcBtOdRyIJfG1eMYME2ieDrOOsjQtlGrjsjBrnEIYRv9Sp34hDQGB2K
KNdmlnh6xMRbZol1uOF432BjL7OEiAnYtFkahLzAwBWokIuqCpHLokpamlbs
NfaTb4Jm8RQSfOdUW9NKHQb7TLjUeLCswT6BREoQGRuCRtxa8eC2ichCVlA2
oEyT/AzF5LEVENsoLb+xRraNEwuReYzDQB1S67LZJ3KHkTS4ZARejx1/tt1H
RA/2a+wyHsCk4mBiyuq0VpCzGcK0UGCdslhjRuJf1f76ikjjWsQ/MYnarx3i
gy+Pdk7sFGizh4LCWKKsMgA5YSO1n85psrZJymps3P/Qo3kMDen5YgIUtH+h
vxliCwlp0EaFT+2+6BSna2tVZPzqmz4PgzSrAmaBwtS5yKw535wMZYJaLdB1
8v9yzD4ZoMMQtDwtPvn0a6kVwKNJ8kh60gbD9w9kphsB06rtrObh04fOLe2h
M63X1L6jCSLkl0QwiteujcnmjNS5VpuiSYDcU4PJCXGSh9sWtYGyYIkTcD1t
FXArLbcAcCHmPjFZYf0/box5MruzyNN0rmuhgJIUJ9dKf48w/HXtVDRORJ8n
HA8tf0RXjHFFia/h40qhoxDua0QnbAHX+Am4QB4Yt4nIqrTyRWz+iet3A+Ky
WitSIr6K7PMrKWkQoue8hWtBuZTocY7Vh8I5Hx57NuL4N7YQhe+Ko0+wRFgZ
BQEvoJzbhbmEjiaKFJtUyXGhs19Z10nNPu/FE0hkqZl/fxGr/CUiEpBVQUSv
6QbS/y9hYQpWQECzA2ccyzEKWCsOC6csk2ql9U4+ZAcroKds8P3wSEGkaFw/
/LVOIx0YgFIni6+HeiE4A937SDAmaGi0UfC8hWvxi+pgju3qhfjv9jJLY1BS
crjrwyqzfG8pXC25Q+1HIxQyYBhiuCroQJCWPKvkRhGyFizzZPvULm5X5TjD
2LHN5swd/TyFiAZhJcmdx5TWkZ9uDlYF9xGmiqEm8Y7WyQ0j2UU2ELQOKJ7I
rasFl/jQhrr5m+cdZtAWRGwValFnJ6WpguTaY3/3p43Shw68rVxLPOlvEbFc
Y/rYEqXNJmAEuFLXF9PncbSYAwuWyO1vMVMFapJQiHLOIKUlfgcCl/Q55H5V
3SckCNqTSs1EyJeN5MaQU8HE4U4Yb+yaupoqD9v4XD1fyelOhmC7Rk2oItp3
aKijYFR7YWZ6uw+pMk+W5ZA4UdxrqAZxOaTMByqgNCD9HUHyRPN177zidXvj
5bd92DEaPgHrhEvpK4e3i8UnFyJBBcdfivDsRMeleesUCWD7YkhFzBBMEqS0
dGQX2V34OTm8U38u+zY3ZDPh971TSXvOGBwqGYMYyeG+j3/m/naNgG/GtUlW
tSslUyEE7TnhtzPcpAgT1Az6vOfqSUy0bDkYRDdRIHY96S6bkznIjqB4Q55+
d2JtsE8d8LJ36fKBt8Y2Z0H/eWIF2p0yFYy80CLxWjTRYy3VjT39sUZkSYFf
J4O4dbfc8bUWaIuHFUmLIszjVXZhSuzi6FXiyjaPPbneaE29SS4cD2kjiJbH
3f60p4hg19zMd+Jk+xJ2+LI6VficcM0OTK/B/qA+ROKKuR+J6xSwxDCNuESf
JUn6uyShOYxY6jVJ0V39kexLtQJAzjVxP+QHfhaZqT3hb2zgoQMXb121/0D+
22wub5Ye3BuOpA/+bA4oYU/MBC+Rd6dDpedIN8q7nDrgTqHlXqjTF3eiOYLc
5l9pDvcResVtUezRI8Xx41hVmiemrORWuT9b261xniN+7b6pntsM0H0hA4QM
fXOBZO+gxPc8nP2sOBMFA8J4oeQmc8h5RAK6V2gZ48iJ5PaEsIWerPPf9VE7
jDn5hF9IbqNvkjnSYO+tiKBKCM1R62F6ryyi5D/TWTT0y2ndE/4G6/z9rV9u
f1snv0rFIAphYFeMiHbFt9xxfxwrwYq6Vt7IhmOAwM4Jnp5mP5VlG3Xlca7v
vhrYktBJsWRJT+izgpPHThxYnFxwh6Q90cqsYyebqllSipiRnJh2TdbAPJa8
xNX+ugySHdwR7Ms6hkgK3xr68QKFSTjcmCxKcqLnX/ox+YtEE1ET5t67gAuv
vk2LZzTY4jhLjQsYVDTspTioRBCiiP8Tg5tm5UCSeEc7Jv7vYOEnzdnlx9Cl
KHmI75nP8hoxKiqr8EwlGb5BHZ9cx101klFif1l1BSUZwAbz6HPyJJdULdym
rdYynSPJ3oxCeRzDXsrIeEcdKiXVcDjch8NfeDACZhJjocKMD4/iGEV1x93f
zrI1Jv+oY0EGTHHFwfj2dG4FQbZExnjNd0CXCq/XZBkFoYbDBHZ53yVv2bro
7e/e+lBaf3qO0WZEXjbASiRARsQvJATJ/iSyRn0FE1CkGY2RiuXeJDgGD74L
eJ8VPt5QmQFpzmgEh53HiCN4xDSRgvjbAiX4/YifikjSqMoyKf3hwxJ1nWHw
v7XWFZ3Btt2VTG1/ghA9mMQ1cYVkMPp00rSqJ68hpaxjO9NUnfF6x6dIX4pj
NHak71ev+vOtJw/+SfaTk/6QvmyXnHzkSw+d2y4X3wtxl+hbo+ENILREOZF5
jGqRqujqffVaRYZ3lViVEJzhEVLwCQ2jnz09pB7wLLhPqpKmh9+eDRk4YtPj
LMfSeRSGDtjFAlUJMX8rKdbkFGkywT+UZkXKxdmCMTWGNOZfXkMaOP75zFIO
4Pn9pRqwXcO8/coDsd9mM9+37/J/yfgFDFDoInMj12W7D4l2UgdJ6oyZc8IC
HRzofYTi0Fxkf0qUcRVjPnD2v971wBpgQIR6dS4igIHuGQfH3jf3m44GFOJt
n3ug9a+xRKTwtTfelQ/hPc5/WZXEB+c27ju8/olKH58bRw76foI6Vtx6Laq4
F0vHHhqJiJQzHQn78HRyJ1HqlvGzfdYo8eenkmVT0mHPqDkp6uLnqC0sWxr8
3AQ+AglF+M5rkNyxwdKRrDEnFEP0FSMdifFjdMQQMILPkW9eI7kmvoh7hu3p
dNsIXmQfR3ptHBfJESMT/PhPjrlYDA3R+9z1K8IQOqkYJw/6dsJjti38/qlo
BCrpiNDjXuLBZLuUJaTZLUb0FJJCuKM6Fu0UljZaHkkEPhkhcf4tpuaXv/FI
+35ODNmUZOfUVF4jIKxkjDWWiLDT2Ndaq/CR9/lYFINjBuQ3FvvG6vTnlqxT
XUZAGlCE+seVvDROSQxiE0zgGUQG9obfzmQVyDaiGb0UEvq8dcJt5JzElXVi
WtLc0o6pCwYLNIeN+fcjttHgiLHZEu20fo1/oHjS6t0g+BG1x2QTbyU4i7GM
nE63VkCnQr9sNCVKNSpxpGaAf0wWW5v2hGvEktORbD6YrZui7uPcuTCaxqgI
4fjG2jLTgO40hdqz9R8HCEY31gqFM025hm+fvsXOD8kmXhDmX+zOEa/Rb8PU
Q1riNs6GzBDxKO6HFqU0w8OHYZGE6Tye12iGawUxk+QdYPZyciTUUuCqE+jA
ePGh1CKginj/g//1Y2NjlB6/JXlt2NCJSaVY6ag4OnwVOmAAEV8VXAyc2bib
cWqgFOMex4ycCYqhppQdUgzhJ1q91/CkTfPFzI/4ij4PalkFYUgCsU/xHHuB
BuF+yUY60Vlh7jBeOqF4fIzETXsb2RBGaKUIAGKXNFWHVv5yzBBIuDrJK1Im
8v2e+AuH6o3i2aIcsvr+n6fzCXMvmaTE/TG2x0gSVFcHd92dy+8oDY77SwZo
nKdZkgG2UXsNb4RGOv4VbbkXQ8NYIRMnDtBgGa+t13Ut1ztAQ3vnFKDw4sPJ
jiT4ndbgrVaZ9OroImuRkriNaVl7GvlqADqsfbN1y3uiqa61WYc9IRNOERR/
6+mlzXyCiSz4t6SY217yDpIonQeLsWjFkovHaNLQlNamV9FlPo9AKvo50ouP
tlq7GVJJ8iEB4/NISn/j6tfgdg25+ZmGREQEGZFeVAw4dibiRjofThrGSoVI
QwK5De4zy5On8rqj9uAMa4D35Ot3Gp3ObdSDO+WyjvlzKpuY/A0qcCJOdAAN
bD3bN8gQkXvxkOO8IFQ4u0lT7wnryWVGz/y60e6JmiTBDumpoK18vP+7Rd6K
KBhlSS+BxYaSTpx1rrEPfvN2tPv3q/4M/tyRdoj8uZtuXwl4DLQjVu889FiM
QPS6YfOuClQOKawqo3wNR7fO8GmvrpbzQD5Mv5rDdbLHarelE+HXJTP0zrT4
i669jWCOJTQ4gPgjyLObbr/HuzkCiHvYMim+mNYi7keyNk7fEbfDa9gu7FRf
VsHtti4wBlu0SaQYmRm0ZvzMSLEYgzSIsJPExCF3LIiUQDvZkC3F8LjYha0g
MZGWDoZQOpqrYB+SBPM1LBsFi8nlNZw9TL4Xmg4rdgp+AUtPjPSHjWhHy1DB
sI8lb3fzJ+/NqRq0KSfFB2EZkBQg5JbsGLf+eC3/pDbcbcGgRrAR4vegwTUI
l5i15HF31ZKnCEH/popSI4kQ1JRBRLIB92AnUy/LiSV8L5WAEftPAjIL4NPT
8cqTtKe55bEHMX95pp9rxun2kHog+QX+QO2msQGeuAr6h/+Roa1IrncZIQFh
luiXI1731xE5fo91e8kAbr/ldBJfwQuRkgjbUTQXHQw1jocJdUdD/7JfRqbO
KbZew8zDgfj/UQjDwnavJq2S8UbOPe48dUqWnHgNimlsesRwA/S+DeV6xNa7
DEvUiZ2CH5VWGF4mpBMHSTNsU20NZrliuNS6SvcEfhMtv8WmEw9xMgiDex9m
HbSNdUt4GvYCeKrwHD0trpi0jzwdqxEsfo61H39Zpxn6DvSALrjXMOGdl7IT
peI13xGh2KUKwpGzE68hHTg3fK+Uir72TCn+y42At/SOYexCkvSdf8/KahJA
IvEgEGyJyFqIGZPm0OFErX+q6G7PSDG/ADcNhUtNXATOzlhLDz82uLtS1h1B
hMJPPYlZKjoc8u07yOxaMuYOo85+WKWL98UxtL6jVjcP1zClrLg5XYrlaRl1
LRGjHVsKTondf9+dRsxHN3sJ7ii05cWk1gW1LdLjRQkY54dsQ/o0jxdVPGQY
cPgxBpMnXJ3+IdePLo+oo9gQeF9gX0usOGnOzcAzxOoj5ebzrLXFIu7523Lk
IKqbmwfGX/7xzL6+A5WhsPcax5Wv5V+uD29DO+B0iRUn2kgEjtZsfyCGDdd6
X/Swl4jFf3gwSaq5fCJi1uepv8hnIa3gm6SjhXyx+ob+IXaabsezRmKRGJ9r
m+CeK2trUdRfuJtAw3sf8mwOYfNbLQJ/i6Hoh0cMeON6fhkuzjBleTVm5mIH
92xovlhiRdRgiYBM112P4A0wE/UxWkXRld4OuAcm1LWOmWuCep2pC7wTbgok
ohYA8OaXV2oW2JQjec/S+2thqdoGzTIXLGGo5Faf1g9anOQZgh52ywiwyZKY
m52wlvwtOQ8p4Q4Tlqtw2O3LWD3ai13yHbC55bOuDzv5QDXvT5diyGl4PlIM
jqKpKl6Lk/ui40w6gz3w2hJqRXWkh/cSYyKE2JGNOgYctaxSC/XF76mCSnqn
YnT5lUsNXLkMOMlOqhyb5jr6ZMOPj+kB7GAcr154/Z1WJO81NBT8FXcXKZ8H
oAUIDOqUdGx8B9Z/bftr64tNVadLLWwjbfQ4UR3hH6/F/IvXzNPQTb8TteCm
EXOqZPU9117DasUrgtulFu9AUvL7Hz3+81rFG/tp4X0K+trUFap46ziuqLpy
IXewRwgCE7CKFe2OnPtBwAwkEOwOubvwmm150XLXxXbHsfj1imIPAbbLS6HW
0pBzJJiWpteIQiA3YtA0uslKzSWQh1iK73vtNUOGuT58y8trgaXDGOBY7mN0
8K6RVCief6ijrNwKvGMsyFhMguJiCXEOC0ZtATs7NhjsRiVi9sZYnOIX5eaB
kVSIGJ1Qr8FoiEYOoFmj6OjGmNY/ToXjS6Ti4MM6/Ms9iNmYCOE5m4TRId6J
VLGMPra2a9DHb0Pk3Xz43lJvUCtu3/ruw9PMK44krnAEYOFYCtQSlRXlBzOy
jzC7MSqIUEZE+FuU0nwAOHgX1Cij9znkG7GxZKRLJRLdOrFLI2v8Ld0XFK9F
KiEE5MqYKPfQui8w+9xjEk2nJTy32E6pgxy/zYSm60MxZTv83oel0nO/eX6q
d0eWXlBbnaMxnKexJ501DgD/RJalTU8kCwHp1jNyxTtS0/tbWF5UEzeUyMHM
aqS553QIlq26QwLF47ETgeI114ckEp3Fjacnw6lzs2EeOwycHA9TLRHIKiE6
TIyW7A1rkUmjT8/+MaSjFl/5WEuXHwyToqAnZi/C0Mf+qhZp4YZFhUXEGVDa
mOGYjTe7XjmbSjd40nlrUQIYQnLpGEsaYHF0pNt9umTBSZfMbneReOMZiYap
18gwHqmByaUOfr8DTYAsitO3fljDPmiCWjm12vU7/Rs6CQ==\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"decoder", "=", 
  RowBox[{"Drop", "[", 
   RowBox[{"trained", ",", "3"}], "]"}]}], "\n", 
 RowBox[{"encoder", "=", 
  RowBox[{"Take", "[", 
   RowBox[{"trained", ",", "3"}], "]"}]}]}], "Input"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["4", 
              GrayLevel[0.5]], {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"25"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "4"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["5", 
              GrayLevel[0.5]], {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "5"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"25"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "5"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["6", 
              GrayLevel[0.5]], {"Layers", "6"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "6"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "6"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Outputs", "Output"}, "Mouse"], 
            "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "4" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {25, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {25}]], "Parameters" -> 
             Association["Size" -> 25, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {25}]]], "5" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Ramp, "$Dimensions" -> {25}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {25}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {25}]]], "6" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {2, 25}], "Biases" -> 
               NeuralNetworks`TensorT[1, {2}]], "Parameters" -> 
             Association["Size" -> 2, "$InputSize" -> 25], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {25}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]]], 
         "Connections" -> {
          NetPort["Layers", "4", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "5", "Inputs", "Input"] -> 
           NetPort["Layers", "4", "Outputs", "Output"], 
           NetPort["Layers", "6", "Inputs", "Input"] -> 
           NetPort["Layers", "5", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "6", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {1}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`TensorT[1, {2}]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{232., {33., 38.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.753359065711043*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"25"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"25"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Outputs", "Output"}, "Mouse"], 
            "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {25, 2}], "Biases" -> 
               NeuralNetworks`TensorT[1, {25}]], "Parameters" -> 
             Association["Size" -> 25, "$InputSize" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {25}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Ramp, "$Dimensions" -> {25}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {25}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {25}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 25}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 25], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {25}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "3", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`TensorT[1, {1}]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{232., {33., 38.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.7533590657298717`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"min", ",", "max"}], "}"}], "=", 
  RowBox[{"MinMax", "[", 
   RowBox[{"encoder", "[", "manifold", "]"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "0.1964808851480484`"}], ",", "1.3576006889343262`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.753359067284481*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"plot", ",", 
   RowBox[{"ListLinePlot", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"decoder", "[", "x", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "min", ",", "max", ",", ".01"}], "}"}]}], "]"}], 
    "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{{}, {{}, 
     {RGBColor[1, 0.5, 0], PointSize[0.004583333333333334], AbsoluteThickness[
      1.6], PointBox[CompressedData["
1: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
       
       "]]}, {}}, {}, {}, {{}, {}}}, {{}, {{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.01388888888888889], 
      AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJwt1gtQFVUYB/CtMJ8B2mBKjiwRDpggmUY+8q6UVy1yjBAhkVYMuyKE+IgZ
r+EKiBXxSK0IhRZRXpIgXR4i4EFABEERFPEBd3k/DGSK1FCc3P8HM8yZ337n
fN/Zc3fPWWvfIDe/FzmOO/78X23Vv9x8fw1atuvC80YuskyFE66Gol0wZFBb
6d6sX9RWSPIoVVsWsy0FHjxUprb8WdMc9HOoL1db+Qd9Pq4HzrgEf9lbrLZK
iq4K48yaMU52ly4jn1ZbCY+Lr0aeUAOui6f6yF3LazFuZRL5pPEa8ne5wcLb
7DryR4yHWVxcI7zXBXn4TbU30GZ9gPpSddpNuOVDzI9/N7wJ92tK85BO+NzC
dc2qCrRmS5rR7liN+5P0Frfh5DUXUadnCBYaPsJ9Se61d+CXXBnylqXdxbx0
CaW0TuH30NYcL6b19mmB5/1ehPt+eUkrrXNyIerssjDi+iwJ6yqWXIbZBDv8
Pvx2KwX1/r12FusY8jnMyh+cQf6In2HlmCYTdeLqqf+e2FOIJ05uQ/9PjDLy
Z2hhoW5BPK5P1cNSTMSPuD5ThrkRbTDy8pVkG/036nMk2fVT/8TZsap5J7N2
5Gna/5tq5rwQVhwLk1ULGi+Y35mTqlrRhsJyXvpp1eLaFBq/b10O8nlchqWk
2lw8t5sGyGx1HvL5TevAPNsrCpAvwBnmTFYUYX67vWFmW1Ksmtt3gPqvWnwB
+cJTKW64w5Av6gosVc64iPkfHoLFJo9y5Euw6MT4nqMVyHdiCflxQyXyZXwB
K37eVbQeQbC8zLoa4ysCKf5qdw3iXgEU78+sxf0P+JPLgq4if9g2WHS1rEd8
ug5mBU9hlrmV6tsYryOfxo/yx5Q1oF7jFho/ktKIfDrfsflF3kD8qUjx67qb
WL+4sfkv+7gJ62HrQ/nTHW6h3jnvsfmbNyO+diON3/83LLd7Ubz/xm3UC/GE
eY+CO6g3eQPMRcbcRb54F+ovbLmH+DF78hPnFjjJnNYjf0or6iU/wu/BB7eR
T7aS5+UbUS+tkn6vXSsV3E9GFqzUZ8Ms6wjFHS3bkD97LyxHRZBzN1P/3kFY
yFtN/bVe7XDhfOqfUg5z56fT8/SCYwfqlYzS8+wTD8usExZNHsIsvIKe/2HX
TuSbK9P70ZECs3o99d86DCvjNsCcpU0X5tc9n3z1U5irmkD1DkiwnNZG7+Oi
bFj4roje774WmOmO0PubOKUb+dYE0H6wbinMz11J4038KT5pNiwWxsPC/YfY
T/iAKli5co32G6uH1D8rHZYb3+zB/KIPwOKhz2AWSPuVsDSsh973d2j8YA7F
HafQfnbCCCuza2g/9DDtRT5FDwuT3ofFZAeYL90OS75G7KdKcAIs2/wEi7bV
MOt0Id9+BPOpw9iP+eg5fcj3VWoLPY/rYdnOk/br4XBy30RYTM+F+dPnsb8L
3m3kgEBYMTPvhx2sYLl8OSwP1uN8kEMCydlhMP/WcZgLXkg21pAXdON8UQ7/
B4v//ArLWrv7GG9YQ+fPiAd5zxM6r84chAXnP2C22UB+7EO26IClc+Z0nlVP
/Qvj916k8+9bAVaW7oaZUxAsjNrCcmcizJfewvnJFtbB0p/RsDTyDOaOucMy
cxpAPOx1ikf6woJ/O85j3vUozLtl0Pk87RL1X7yD4s2PyNbO5CT7QeSf+Azn
u7JlI6wMVcCyfTQsNUeRH5TCPHODxbwhmKXNpLj+jQeYT6yC7wdxhTvMhaSR
x0fCzOdr+r6oK4Al7SLykT7q7/gU3yNi1itDmI9FOSzEzoHl0e/JOzUw17WO
vN6TXPcazL8XDEuG1gbN/7szUIk=
       "]]}}, {}, {}, {{}, {}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1.050191838276312, 
   0.2358477917652017}, {-0.00030141568614634235`, 0.7528387197038202}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.753359069021875*^9},ImageCache->GraphicsData["CompressedBitmap", "\<\
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
XlA=\
\>"]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:65e0\:76d1\:7763\:5b66\:4e60", "Section",
 CellChangeTimes->{{3.7533572713434477`*^9, 3.753357273101139*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"resource", " ", "=", " ", 
   RowBox[{"ResourceObject", "[", "\"\<MNIST\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"ResourceData", "[", 
    RowBox[{"resource", ",", "\"\<TrainingData\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testData", "=", 
   RowBox[{"ResourceData", "[", 
    RowBox[{"resource", ",", "\"\<TestData\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trainingSubset", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"trainingData", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"Last", "[", "#", "]"}], "\[LessEqual]", "4"}], "&"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testSubset", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"testData", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"Last", "[", "#", "]"}], "\[LessEqual]", "4"}], "&"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"RandomSample", "[", 
  RowBox[{"trainingSubset", ",", "8"}], "]"}]}], "Input"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.7533603433627787`*^9, 3.753362253630093*^9}],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.7533603433627787`*^9, 3.75336225432442*^9}],

Cell[BoxData[
 TemplateBox[{
  "Select","normal",
   "\"Nonatomic expression expected at position \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \\!\\(\\*RowBox[{\\\"Select\\\", \
\\\"[\\\", RowBox[{\\\"$Failed\\\", \\\",\\\", \
RowBox[{RowBox[{RowBox[{\\\"Last\\\", \\\"[\\\", \\\"#1\\\", \\\"]\\\"}], \
\\\"\[LessEqual]\\\", \\\"4\\\"}], \\\"&\\\"}]}], \\\"]\\\"}]\\).\"",2,769,53,
   24729296611159780272,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.753360273000581*^9, 3.753362254418063*^9}],

Cell[BoxData[
 TemplateBox[{
  "Select","normal",
   "\"Nonatomic expression expected at position \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \\!\\(\\*RowBox[{\\\"Select\\\", \
\\\"[\\\", \
RowBox[{RowBox[{\\\"\\\\\\\"\\\\\\\\\\\\\\\"1:eJzsvQd4FUX3+H/\
nTHrvIQmkAAkpdBCQGkCK9I4CUqR3CL1GVEREQEARRAUbCoiICIp0pAgihN4NHQw9BAiBsP+\
Z3b27U/a+f/N78qLv97mHh2T3frL17tmZOXNK3Kt\\\\\\\"\\\", \\\"\[Ellipsis]\\\", \\\
\"\\\\\\\"6InomJjmalryCrFLO+BwNUnp1WyP0B62664skBHh4RUy4ytoT7A9Lv5Jx+\
RMhshp6UBMYCOuLMgrAyZYxDTKS2bVET8KV6obYhPUIlTBIleoDBqNIVKz/+3y34/wCnAJGQ\\\\\\\
\\\\\\\\\"\\\\\\\"\\\"}], \\\",\\\", RowBox[{RowBox[{\\\"\[LeftSkeleton]\\\", \
\\\"1\\\", \\\"\[RightSkeleton]\\\"}], \\\"&\\\"}]}], \\\"]\\\"}]\\).\"",2,
   770,54,24729296611159780272,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.753360273000581*^9, 3.75336225449369*^9}],

Cell[BoxData[
 TemplateBox[{
  "RandomSample","lrwl",
   "\"The set of items to sample from, \\!\\(\\*RowBox[{\\\"Select\\\", \\\"[\
\\\", RowBox[{\\\"$Failed\\\", \\\",\\\", \
RowBox[{RowBox[{RowBox[{\\\"Last\\\", \\\"[\\\", \\\"#1\\\", \\\"]\\\"}], \
\\\"\[LessEqual]\\\", \\\"4\\\"}], \\\"&\\\"}]}], \\\"]\\\"}]\\), should be a \
non-empty list or a rule weights -> choices.\"",2,771,55,24729296611159780272,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.753360273000581*^9, 3.75336225450261*^9}],

Cell[BoxData[
 RowBox[{"RandomSample", "[", 
  RowBox[{
   RowBox[{"Select", "[", 
    RowBox[{"$Failed", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"Last", "[", "#1", "]"}], "\[LessEqual]", "4"}], "&"}]}], 
    "]"}], ",", "8"}], "]"}]], "Output",
 CellChangeTimes->{3.7533603433627787`*^9, 3.7533622545042543`*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingImages", "=", 
   RowBox[{"Keys", "[", "trainingSubset", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"meanImage", "=", 
  RowBox[{"Image", "[", 
   RowBox[{"Mean", "@", 
    RowBox[{"Map", "[", 
     RowBox[{"ImageData", ",", "trainingImages"}], "]"}]}], "]"}]}]}], "Input"],

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"FlattenLayer", "[", "]"}], ",", "50", ",", "Ramp", ",", "784", 
      ",", "Tanh", ",", 
      RowBox[{"ReshapeLayer", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "28", ",", "28"}], "}"}], "]"}], ",", 
      RowBox[{"MeanSquaredLossLayer", "[", "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", 
       RowBox[{"2", "\[Rule]", 
        RowBox[{"3", "\[Rule]", 
         RowBox[{"4", "\[Rule]", 
          RowBox[{"5", "\[Rule]", 
           RowBox[{"6", "\[Rule]", 
            RowBox[{"NetPort", "[", "\"\<Output\>\"", "]"}]}]}]}]}]}]}], ",", 
      
      RowBox[{"6", "\[Rule]", 
       RowBox[{"NetPort", "[", 
        RowBox[{"7", ",", "\"\<Input\>\""}], "]"}]}], ",", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", 
       RowBox[{"NetPort", "[", 
        RowBox[{"7", ",", "\"\<Target\>\""}], "]"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"28", ",", "28"}], "}"}], ",", "\"\<Grayscale\>\"", ",", 
        RowBox[{"\"\<MeanImage\>\"", "\[Rule]", "meanImage"}]}], "}"}], 
      "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", "\"\<Grayscale\>\""}], "}"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"trained", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", 
    RowBox[{"<|", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", "trainingImages"}], "|>"}], ",", 
    "\"\<Loss\>\""}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"reconstructor", "=", 
  RowBox[{"Take", "[", 
   RowBox[{"trained", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], ",", 
      RowBox[{"NetPort", "[", "\"\<Output\>\"", "]"}]}], "}"}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ImageAdd", "[", 
    RowBox[{
     RowBox[{"reconstructor", "[", "#", "]"}], ",", "meanImage"}], "]"}], 
   "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9A8CWTyfQBDrlbLCxMU7BLvbLCKTfRkQUoFzbpIBY5JhaQHAuL8hkM
KU8GJiAQVQQS6FIHlED6cjYdrGdhmYYqdV8CaJxy2df//x9IsvD0/UJ3vvNr
MHMSUNUdNDmzhxDmA3N0OYQL7psyMEUjyxWzsMCYGGaqweReHQC6SvIhVrl8
oE+UDv3HJuepBJTzRvWfKhPTtm3STEzgwEGV+t8HDkoIkYMmBwwNiJyk052v
aHL/DxZC5LDH3/ZAlqAd2x9ilaMPAABwyokL
       "], {{0, 28}, {28, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28, 28},
     PlotRange->{{0, 28}, {0, 28}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9gcJNxEk65FcxrccpV8OGUusSdiVNuNeMBnHKmCl9wSd1nVMepbQGj
DU65YsZNuKSOCRl9xyXXzBCF08gQxnW4pJ6La+DU1s6YgFMug7EQp5w0415c
UodYcMsVMRr9wSH1VYOxDZe2X5b+X3E6hS4AAAjL8xI=
       "], {{0, 28}, {28, 0}}, {
       0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28, 28},
     PlotRange->{{0, 28}, {0, 28}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/6cp6G4KYWDIXIRNKowJDFQfYpfSKvRnYmrFkDrNyqR7//P/n4ZMxRhy
m1h0nwGpVnamfZhmPngLIvWYsMmBQRcHk+VX7FKbOZgkDuDQVs/ElI9Dyp+T
KeEzdqlnokxid3Bos2RiKsIhtZGdyQmHiW/McWurZGIKwqHtPzsT0zMcUiC5
K6+B4Nf/X69f38rMzMz5iiwHBuEFkVBWC1wukAkB2Dg4wrq6jiEM7WxpaQFp
SWlpuYbL4gEEADLRqO8=
       "], {{0, 28}, {28, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28, 28},
     PlotRange->{{0, 28}, {0, 28}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x8Q8Plabu55HFJ1TExMrDFvsclVMYGB1E4scrOYmPNmThFi4qj/iiHn
xRQBJA+JMDHF/EKXY2C6AqKO2jExRf9Gk3Nhug+mTwgzMa1Ek8sFys12XLFi
RQ4TUwua3EKmjdfZIW5lUlj9AUXu4+LPd/iZYIB7Gbprt8T5wGX1rqC79s/7
9zduvn+fx8PE5IYagK+PwlhH9ZiYPJClNilxbICxP6kw8W9HklvKwcR8DMY5
xcLkgKyxm4npCIw9h5kpD8UfzkxKiTdBrAk6nEyocv8/K3EysbABAcgX5m/Q
PLHAQxriP5vmF+ge/P//+a3SrY3Lb/3AlKEHAAAeUY84
       "], {{0, 28}, {28, 0}}, {
       0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28, 28},
     PlotRange->{{0, 28}, {0, 28}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+U4Kw8lLHzEYZcmwSUkR2OLvXbBiY3X/cLmtwu5kooq5f5FarUJWG1
z1CmPbpcOMcpKOstAxOq3GpeHRiziMnpF4pcGPNUKOu+OOteFKkPcswwZiWz
DorU/5fM0QgTIlDlvhnrvYWqYmKagioHVG2xCgjqom2Y4TbDwLVQLmYgEJdg
YWb+9h8dnFsNBP//xzEzY0jBQAMz8yVccvVMTPj04ZSrYObGKScuPAGnnM9e
nFJUAQDVl858
       "], {{0, 28}, {28, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28, 28},
     PlotRange->{{0, 28}, {0, 28}}]}], "}"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"encoder", "=", 
  RowBox[{"Take", "[", 
   RowBox[{"trained", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], ",", "4"}], "}"}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"testImages", " ", "=", " ", 
   RowBox[{"Keys", "[", "testSubset", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"features", " ", "=", " ", 
   RowBox[{"encoder", "[", "testImages", "]"}]}], ";"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"components", "=", 
   RowBox[{"ClusteringComponents", "[", 
    RowBox[{"features", ",", "5", ",", "1"}], "]"}]}], ";"}], "\n", 
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Part", "[", 
     RowBox[{"testImages", ",", 
      RowBox[{"RandomSample", "[", 
       RowBox[{"#", ",", "10"}], "]"}]}], "]"}], "&"}], ",", 
   RowBox[{"PositionIndex", "[", "components", "]"}]}], "]"}]}], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"representatives", "=", 
   RowBox[{"Catenate", "@", 
    RowBox[{"GroupBy", "[", 
     RowBox[{"testSubset", ",", 
      RowBox[{"Last", "\[Rule]", "First"}], ",", 
      RowBox[{
       RowBox[{"RandomSample", "[", 
        RowBox[{"#", ",", "6"}], "]"}], "&"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{"ClusteringTree", "[", 
  RowBox[{
   RowBox[{"encoder", "[", "representatives", "]"}], "\[Rule]", 
   RowBox[{"Map", "[", 
    RowBox[{"ImageCrop", ",", "representatives"}], "]"}]}], "]"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:56fe\:50cf\:5206\:7c7b", "Section",
 CellChangeTimes->{{3.753357409550392*^9, 3.753357410718936*^9}}],

Cell[BoxData[
 RowBox[{"resource", " ", "=", " ", 
  RowBox[{"ResourceObject", "[", "\"\<MNIST\>\"", "]"}]}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"ResourceData", "[", 
    RowBox[{"resource", ",", "\"\<TrainingData\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testData", "=", 
   RowBox[{"ResourceData", "[", 
    RowBox[{"resource", ",", "\"\<TestData\>\""}], "]"}]}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{"lenet", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"20", ",", 
        RowBox[{"{", 
         RowBox[{"5", ",", "5"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"50", ",", 
        RowBox[{"{", 
         RowBox[{"5", ",", "5"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"FlattenLayer", "[", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"DotPlusLayer", "[", "500", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"DotPlusLayer", "[", "10", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", 
        RowBox[{"Range", "[", 
         RowBox[{"0", ",", "9"}], "]"}]}], "}"}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"28", ",", "28"}], "}"}], ",", "\"\<Grayscale\>\""}], "}"}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"lenet", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"lenet", ",", "trainingData", ",", 
    RowBox[{"ValidationSet", "\[Rule]", "testData"}], ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", " ", "3"}]}], "]"}]}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"imgs", "=", 
   RowBox[{"Keys", " ", "@", " ", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"testData", ",", "5"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Thread", "[", 
  RowBox[{"imgs", "->", 
   RowBox[{"lenet", "[", "imgs", "]"}]}], "]"}]}], "Input"],

Cell[BoxData[
 RowBox[{"cm", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"lenet", ",", "testData"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<Accuracy\>\"", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:56fe\:50cf\:8bc6\:522b", "Section",
 CellChangeTimes->{{3.7533575174855003`*^9, 3.753357518815763*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"obj", "=", 
   RowBox[{"ResourceObject", "[", "\"\<CIFAR-10\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"ResourceData", "[", 
    RowBox[{"obj", ",", "\"\<TrainingData\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"RandomSample", "[", 
  RowBox[{"trainingData", ",", "5"}], "]"}]}], "Input"],

Cell[BoxData[
 RowBox[{"classes", "=", 
  RowBox[{"Union", "@", 
   RowBox[{"Values", "[", "trainingData", "]"}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{"lenet", "=", 
  RowBox[{"NetChain", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"20", ",", "5"}], "]"}], ",", "Ramp", ",", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"50", ",", "5"}], "]"}], ",", "Ramp", ",", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", 
      RowBox[{"FlattenLayer", "[", "]"}], ",", "500", ",", "Ramp", ",", "10", 
      ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", "classes"}], "}"}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"32", ",", "32"}], "}"}]}], "}"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"trained", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"lenet", ",", "trainingData", ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "4"}]}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"trained", "[", 
  RowBox[{"{", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJylkglQU1kWhruma1qrHRQhiLIIKCKyiQKKSlS2gIiEAMoi+2ID4sYiChbt
LqiIYqugKKDYYiubrIEIhMgWQkKWlxVM2EkAQUhIINtcwJpyqnqmempO/e/k
5VXd7/z3v9cg/IzXib/98MMPCStB8wpLto+PD7vorQr+HD2dEPPL6ajIQ6cT
o36JircN/xF81P/2LL53f3hDrCym1JVAjRWc1rr+rsaRHtwYtX2cQfjaRxH1
0+eH2bLRPtlY3wK/b2GcKxXwZAKelM9dGO0T8znicY6EzxYO0ma5lJle8iSz
exzCj0NdfCB61xitE/BJVW9p6FJ64wfAHyA0jZJxfFoH4H9hk2a5NPEAQzrE
ko/1ycY/Syd5oMsES++CXsnEosRjLNEgJOqnCT9Tp9mkKRYRaHJJANJd8Tvg
Q/Vly3zgf5jUAvzzgQ0GYYrTA0bM9zMkg8xF/xPchYk+6eSiFgB5nCPks4TD
kHCAKuLRRFzabB8FjJjm9Ez3koGAQ+C/p/od1FC+zOd2Yga7m0fIrWBrAnrX
BLMbpDT3mSbk0oSDDNEoa07AlEwwJZMsIKGA+XUYmhmkAb6QRwX+gWZ6e0BQ
M5+pYCEYAcxTat8zMBX0pj/hgy1Mc8iAL+IBk/TZYYZwDBKNQ3PjdNBn+PTp
IdrXAeosjzLL/cYHW5gFHeyFSwNTSDXvyIvhV9KbKpf5Q0Qsn9I6AY4Awgug
rik2eaGfPsvpGV0c2v6FQxJyqfMjDPEXtmiSLZngzI2xxSPs2SHmFI8GyIA5
xaNM91NnBugiLkRCl5IbyqGmKga2GvB5+I+AL6C2TUEdE3T8OJP49TPEp3RQ
MRVtZUUNr3IbCp5/Kv6dWFXKJTRPcyl8JoHV3jhEIUzzGHOjbNkwSzrKEk+w
RXzWzDBTNMAg15dRP36gN1ezcLW9bejl+ymgtU/QO/mMrjFWD6sL115b0kto
EbB76K2YyhfPinN/+/3B7aLzSUWXUmM9PfzhB1KDo16l3/lYlI8vK+5Bl9Db
agQsomSYNTfCAuYBn4Gt4bSil8MZJX8SQB0COn6I0knBYTBlf0B43GgvJOAx
x3rB0qqMtJT7F5MKw2Pi9znbqOvu0dh0UMcMaWl/3AkV4+X/a2xs3s2rdY+y
hpurpSN0CqaC1ljJwALz9cA84AP/XyD8NIOEeV1Q+vQJq6ONB1HARYDwHa3o
2jdPck4HBEYedHyIOn4Ipr/tJ5j1av3tK3VM/2FoDDOzM95z+cS5gouXX4QG
UbOuiTvrgHnAZ7bU9raiQfjg8vNp7V+ZRHZD3YPExMKb6YQaAP2jMPu3m8kX
z4ZHBrt7um+xOLPL4TrymPkKFXMVTbNVWmardIxX6liobjpmBX8UEvlHWFR3
ctLU/Wvsq2ep6AoIU0kH/tvr+zsx/WBKYzWvurz2xo17ISF3gkKS3D3CXQ9H
unuGuyFDXI5429ghtY3yAmOSD3sizCx3amy0VtNx0TONsoE/DQ1rTjnPSk0a
TDo9khTXG+TViXKk1lQw0JVsbB21srg1L7s561Zr+jVS+k367XTanVuEq5fq
zsYWRv3yOCg0yz840R4RtMXk6n6XNxEng4xNYw44JTi5ZaGOVkXHdp9P+Jya
yI2JgFBuJMfdXfZWBDcEK9iXWFfOwHxoz3tUEhP9ISIMHRv1KTG2J+UsMy2p
99algd9uTTzLVrzIF+bmDN+73ZWSgA4P46SkfQqLyndwIiaeYyaeYp8Mo/gf
xiHs6nftarSwwJqZEuG2nSjPN84unJMnSA1lFQ+uP3B1emXv2IDyavX2xPsh
SSFe9BMBQ+fj+DcvDd+9MpR+cSQjWXA7afxW/OyV5LnzSQMBASRHR+IBW6yZ
AXrLOvQWVbSJbpOVDWm/fR/Ksz887O4eZxcV2BtXx5YXjzI8EJnbthbZ2ryz
tUFbWmJ3WLY72EFHkYMBfpyj3t2+SFqc/8DZkMGwoxwPRCfcGmu2tdlAD6On
g9HXxZkY4Xdtpzja0lEurOO+vSGBnOgIbMjxZCdUNAJ1125fQWjwXVOTx/q6
eZu0ivS0S3UN3hsZF+zY/srGutrEAm+zi+PpxnRzwlntfL9x88t1uu82alXp
bcBuMyTstSa7ODJRSLbfUdZxP3qoPyXcnxIWSDl54iXSrSDtavOr9zk+vg/h
9llr1uWugxXBVpeuVs1X08y0MH/o45HtYF9pu4/pimixNH6vqZmhDvP/WcV9
jdpjk609Lg60I65UXyQ5AEUP9mWGB9LDghgRgcyIAFZEMOtkTMFhl6qc+8yG
pqrL1zL32j1S0y6EaZWsVa9UUStar5tjb/fp6gV8dGSbvUOVnt5bDdV8A/1j
sA27VXVMVTRDNm5u8zxC90YR/bwpQT6MED9m0DFGgA/T14OFcmJ4IaiRQcXB
gXwykfEJh6+rTt60OX21+nMNzZcwWKn6+hqdzTU7rZuOuDbs31NruLnBcFOb
7c5cC/MkV2TuxdvhDkiPdbpoF3uurzd0zLvHw6HTeW+rgy3uoG2rE7zjkAPR
5wguIuxJUCi+urq5soJMaE8xNkldsfK55trMDWo3VNfkq2uU6mpXm29tg+/G
W23H7zZvhG/PtLV5cC6BjSMU3roXarSt3gVOR7pi4fvaD1h3udh1HkFg3d0+
uLrl2dk/sXO4BkcE7rTLvnzldW5Ofy8z29/niqZmgbr6fc0N8StW3VNb+1Jf
87n2WrSpIc7UkGxv1XxoT7aX56OrvxIxjQ9S0xL3H6xwgXciD2EcnRvd3d4h
XDN27I7VNfGF6Xlr6h833Bm8y9kH7nrh1BlMdbVUIn57Ky3Pw+OBruET2JZc
daOX2ltKjU0K9bTLTQxxO8w69+8sO2jVcDdzhAPNDHDLnz5LRHg8Qzg+PWif
YGAcDNM+tEbLdYORl8X+OA/fh8mpdYXve5rxDBL1M5sjEc0pFcrCyyk50dGp
cMc4XaMYNa2EdTrXdA0eGhm9tTRH77Bs2mOdY7G1JCOzC4vhEdp60OgAK8cA
LX3U+o0eeubRcMT1qJOv7z1sqa7lMWjCLwKpRCqXyRWKBaVSqQC/csWjxIQL
vn6hdgcRBoa716jvXaXq8LOqh4pG8FqdOM3NiXrbgtfrn/P0y7yQWvu8oOD6
bXcT21PO7o8vpKFfl7DxxOnRMalIpJRKlIp5hUIqlwMkaAsKxSIc+H+blXn3
VNxZ9yMBVntd9U3sYBttVDS3/7zeeIXW1p82GP19veGPGuZrNpzy9E8Lj4tD
+tU9fyVg9cqFQqVSrlyqRSZ4FArlnxUDW9dRXlyfn/P2TkZ2fOKlwODTSM8o
V/dIN6/TPkGXwk9ejo1PiTlzIyn14bWM1tqPilmxUiZXyqRS2YJMLlP+B+y/
appHHud0j7MJYxBhmITv62hhtGCgT82srq4hBn1qaFA0OSmc+iqcmpkXSZQy
BRBIGASxAAL+7+ilkk4PiKd4kq8D89PD8plx5dyUUjylnJ9VysRK+VKq8nnF
Uqzf+lIuMrAQnOBf4CslX2TzkzL5tEIGjkmsWBArpBK5fF4mX5ArpIpF0r9h
5EtS/EX44gKxXCaSyefAoS8f1XKk8u9Q39f/QF4ucGXFQtm8SCZbkH9Xsu/0
/9Q/Aart9CQ=
       "], {{0, 32}, {32, 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
/RWiBK0ssqHSq5LimxTp6rxlHQ4XUM1hfHP9i4cPbn9z7fLSwjwEokyG8ibk
wLeCj09/JJbIggcHSO2mmA4zqctM6GlNryuL9nd2cn57HaskUiogtKjI7TqK
WZuvkUc3VnlIOKGUNExM0Oa8TOI/T/SfPXPw+ICiv0f1zdefAxarnaYdHIn2
Pzx/brRFqYxtNUS1GxMHenMPdWb1d1Ep2eHbNqx3Wr8uNgIjEWQe6W9UiSlN
Ddnm5jR5o3+nNvpAFTYdtyF5j5eQVSbn5rc2FyrltIPdmke/PIDslPKCfq1X
vjpmNuV3mdNUB2K6jfkHO2hyUQ4R7xni67cnKCQmwp9ZmtZYV0gvTOHQMxtZ
MQp++GBHglbgnxe7juTzbug2p6IErE5KFgsyteq6r69cAtH2gZEXHxj/8Uut
iqKWJbNLAqk5vhW0qESib1jQ+9TCIrPB3GE2tpnUrUZlX5f5/KljpuYqQS3B
0Jyok+Kr8nfuDdse7PRWHgnLr46r52QoZNU3r19D64MqoBccvDw/2dPGE9bF
MQtD/V3/kRSNZdDz6CWU4eHh2dmn8/Pzc3NP5+ZnFxfmAav13t1vDVpuRRmh
lhVVVxqeH+ceuO2NTGJQUW5sXlYUh00f+fDMs2UL9Jv4Ueodv3W5SZgvqklN
iNiJD8KcONZ3+/a/n87NQgjkKCQ6WWhDW9HegJBbt27qWqTM8sxyKpFFiYrb
7UzEB6WRk1Uy/sipkyeGT01MTK3JqucEBgLLIx8dPdgpVEoKCnKCDRrWzasj
K89+RdUgaBdPCLpeUMoGV1UUAACTkxNjY5+0mtRcDiM3K7mwYJ/ZbP7p3rjV
YnkyM7u0tPxcljjCX52MmZnHH314qN1cIxbsNaipcl7e0KDm4cQPsF1E2b3Q
MOw5w3aphl5RRTozM3Pp0uW+vr7R0dHp6WmHjkXW7KWsQiFAu8p7cP/W2TO9
TTKqmJ/dUE0uKozsH9IuLj1+jvwbc8hh9MZqtc7NzaFbMWhPDnbo5BdfeUVi
oR+CgOmp8YFDyuyMYAaNJBYXagw1N7+97FCn/1PyOer8O7RX7IWototw69LN
6xfLS9LTE8OrqrJULbVnR08sLs6jcaJlfynj/z9Dwf8DjJrXkg==
       "], {{0, 32}, {32,
        0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
o9HSMumMLYy3sjbveHfbpi2Zuw9kt7fJYe2o32qIus2k15ycwxcDWCpoWY3Y
1+KeCKrxm5QOcFI19O2NG5fbLrSVn6wXtcobP26+e+tzcLzHMNlHaPox1UCt
TMRhH8zNO/C7Nzbt3btr+ztvb9m2tUCYrxi9G7DOBBB1AFUF8OmwDUi44KQP
XQoSK1GXA1ZoprpvfnO1qfPk4fZjsvajkvajxW3Npa2N9aeaTl4+efoPp25/
dQWe6lX2XQfH/jz87RdtR6vv3L5RWiHhy4rO//H8V3euTYzcdUBTIXwmYgOo
w4k7oXmPKRmwLoWdXTcvN59vLT/RUHKiqbiDMjeUtNRLjtdLWuSyjoaKU42l
rTWVrXWfdp1RK74xq78zTH430HvjYtc5+cct9Z3tTedPNp/rOPPZmZvfXNOp
hnB40oEq4y54yYss+4mVsKe0tU7S0SBqr+c313CPVglb6opajhS3yEta5eLW
ellHo7TtSHHbEVlb7fHTjWcvnTh94YT842ZZO1W6qfqTtppzp+QXTzf+4czx
K5+cv3bx6q3Pb969NqnsMxunbKjabddvP7Rzt+Cj3UV5O7kH32Pt/72Yl1dW
xK2TFdTJ2NUSXq00V1qYWynmHpGKGktLj5eJj5eL26qLqb+isaLsRENlZ2vV
+ZO1n55p+OyT5iudrVc6O66ea/n01OWvu/7UffPb4e483q6DnOwDrA/2/v69
nTnbdua8s+/Q+4cK9n7E278vL/tAXvZ7u97atmtb1r6sd/dnZR/c9f6HO/fn
f7jnYHaVXCys4BbVCOs+bqg5UX+4tbrmZF1ZU5mwSpgv41SfqC0/XnHsYktD
44d1dfuqqnIqKnJk0l0SyQdSaXapeJdUspvKEtH7JaIPCgU7Obz3uNwd+ezt
bG5WAW8HtyDrWBNfVn6gqGSPvFlQJWdX1eYeOcqRN7KlZXvEZTkVdbkVcnZF
Q4GoNF1QnM4XpvFEDG4RnSei80VMoXCTUPAKYaZQ9FpR0dZCwZZCwRsC4eu8
ks188RvCki1FxVtLxNtKS3dIyrNkh7dXV2ZVVW+vq8uqP7JDfuTdhobsjhMf
njp9qKycKZYwRCK6oCiDL2Bw+TReIZ3Hp3O56QUUBek8Do3LphWw0tl5aSxW
ei6blstOz89nFOQzuQUZAn4mX5ghKM4QipgCEV1UQqdspVJmWUVmdV1GdUNm
aTGzuJAp5DL5BUweh8HNp1NwKAMrjYKdl87Kpf9Gbh7tECv9Nz5ipeexaWwO
LZ9L5/LofB5dKKSLRIySErpEwpDKGLIyenklraJuk1TIFPMzijhMIZspYDMK
WYyNZKfzWWlU8lg0DouRn8fIZzHycmkf5dHz2IxcFp3FpnEKaDw+g1/IKCpk
iAsZ0iJmWQmzXMw4LGVWlTEry+jVlZuqa35XJ8usLNlULswo52WWczOl+Uwp
hynhMCT5dGlBhpTDkObTS9k0CYsmZtFFucwSVoaYvamUk1HGZRwWZFSJNtUU
Z8olrzXIXm8se/3o4deaa95oqdvcKt/S3vBWx9G3/g145Pw2
       "], {{0, 32}, {32, 
       0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJyllnlMVEcYwE37T/8xaZr0SIxWghgjlBKbttQWKdUieBAB8eCSJd4cBtAi
SMDaUkWstVHEArZQaMGjtlJARVkFFBSoRcFlUTTh3MXl2N333pxvod9DsEtq
ccHJ7OTtezO/75vvmrEL3+G3+aVp06bFvQKDnyreIzZWleD/KvwJiI7btiV6
00bv6J2btmyKdQ1/GV7OHv0pz5RSSZIQNBgkIkl0rBMBC2ZkNiMkICogpkyS
lLnSZJrFYqH/NjbWOSEwSEyWGIcnRgijU2qyLJPxDWMMcinFg/1dWk1Dq6bR
PNjHCYYPZPJtPB/YCEZZ5j3dHYfTkgN8PHyXeeRlHePITMmL8jEWKZO6u9tr
aqtTUhLed5493+41u7emuy2YX1VewhnFk9+CFZ8igjmT2tq0ufl5fr7Lnee8
4ThruqPd6/Pt3owOX6vvaaeKCIoJtV3MUz6sEsAb2EywqB8wpR9I9fzYyd1l
hovj7K1bVEGr3EuKC2QLR4gjIiObJVjx2QhfIFhCfKjqSmnIyoV+n84LCfYv
U1eEBq5MSYpgFL4yRDiiU9FffMIHP8hDXS11x2J8ftuvenD78vXaytU+7qtX
LGysU1u44gRQZgp8iXKORXhAlOsby8u/cL211+1WXsKeiAB/97lL3pu5OzJI
367hDEQA36Y9WPMRYRyMA7pRqq8tup/kqImbcWy9fehnc4I97Ncscli92Ck/
64Bo7seYT4EPnREoEpxSYqwrHDy4oG+fQ3aoQ7i3U7zKa/sq10BPp4gw77u3
a2U+bGOoWvEJYkgZicyY2Nd8rj9niXTcpTLJOXalfVzo8sStvoeSVPER/rkn
0kfcJEoEIaV0wIbRc/mgvsQFCeZjC2fm/u7Kx2WhUpFrX96HZ3c7b1w2d/O6
Twqzkr//entEiFdLw2VGBwUiilxZDl77v+y2yi+MmIjA9MSixKGoETTp+HqI
+YL3/dNex3e7BHrNjAh0jQ52C/Z2St+j6u3SQJwKlI7wJWIDHyJoxGtQMUXG
dLj/mtSaIdXvNNZuay5Vpe5wW7f47aDP54YunRe24p0rxbkYDYhKyYIFNthH
QT/JS4opwkyQUK+x86bYeprczxEeZDZdPXI0eUOw57v+i+zXLrbPTNvZp3uI
sIQnTAZrPoeZSlhgRCHXIAuY0aB72Hit416J7lGxsaOirf7C4T2x6zw/WPbR
rJgwr+YGNVbyZaLSPY4PeTXKZ5DLsAuCBG3TX2Wlv1y49KO6LEf9R2FBRmZC
5OaApe/5uDkc3BujbbkjiFCy0Ij5n5ER4+yDR2couQAHDEGiqR8NGjraWmuq
r54/nZdx6JuC7BPFpwqKcjOO7I+PjQhO/XLXrRvl5kG9IgFDEI0BnsW3bk/U
Meg6ux5omMnMBPxIey8747v6G1eR0WDu79F1ttRUluxNjIqLCisq+KGvT0eh
8v3H0RPwKWOm/t5z+Se1f9cjk7FKfTn/p+zmxoYhKFSSkeEB0aRvbqw9cuir
0GDfo8dT2zs1YNeR1cwWPgiQiZiXefjXkxnV6ksXS4vLSop7ujpkBpaDQm2C
zoh5oE939szPQaHeKfti9L3tjDElwp/PB/uz4SGmLjm1K3JDxcXf6+tqa2pq
KH0qH6IMrixQKOCOIdXcvJSWnqzV3uWcUxv0H/E2H7bQ8vMFIQFLzhRmVV5T
P35sUN6Peo8+7UqOUWQ0DQiCGRSglNrAB1fh4SFa/mfReh/31KSoe013KNTv
0SijY+FGR19CwNHRom2Fn4APWSAyC22+27BDFfBt4naDrouyCTKVPjPJJtQf
DltuMOhSEyPjVD51NdWcy5O9okxkfywjYhGROTcrLTFqzY2qign1nywfGpeI
TDhraqy+eC5H1w33H2btuxfjKxEIxw0EnygOiANdGIk2nrm28qkJTkyBcgTB
IQlKESOTviL+A/g9nZk=
       "], {{0, 32}, {32, 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxFVQk0Ve0aNs8yz/N4ijJn/GWIkCIziRCODOFQIeGXWWSex4OQIQ2/oZAk
lELKnByd+Zx95mNIde/d/v/eddd69rvevdfaz/O+z/fstVVCYt3D2VhYWBJ4
wOIefNsGBgtO9hAGb7xuJFyH3ggLdbqRGAYNg5mGsIMPlf97HfX03/+mHP6i
/vxN+fmb/OM36eBfeOZvDP0Xiv4LzfgNAkn7iaAdHoF6+JW8v0phVrS2qmiq
Oft5z3xDfcIx5tGUBQx1Hkubx9PnsNR3aNIsEphGECe/A59wFJCZuHcA7P8A
9g+Iez/wzEMM9QeKfICkHKDAhnrU7FD2EWQQe1ukvWVg/9WLoZqMeBcH6+HZ
j5/xtHkUsIgmLWLJC1jyRwzwAQ3MIQnvdgjTSGAJR6L9+hdITjo4BCtx7xDH
+AHyo8n7KNIuiryLJu9hqPsYGqi1h6LsIUi7Wzjm6sz0zqtnNdnps0sry3jq
Egb4giUt4ymf8eQlLAnkXEQT51HEOSxplfj/+fG7+3jmPp5xgKUdYqmHWMou
hsxAEWgogI6mgFoMFImOAGhrGMLK2kpHY1Xy7dgNDHYZR1nGklZw5FUCZZlA
+YInH1UcCRRawFM2SVTa4S/S7gGwu49lHqDIlK0dxJdNxNLazqeV1Y/LK9+2
ASSZ+R1gooh0JI4ManUPjfgFBZ3QOq6gIvf45dg6gb6CA9aJpA2AsgHQ14n/
gLZ6pEX5RqZRD34CzH0iYw9g7iLwxKzCYmhwoP952wt25sZmxqFQ2PQacoe4
h8AztrH070RmSlYumAo2NlawpuTkbxDpy1jiGoG4QSRvAoz/4UhiBU/dJtMo
+4cgOYG+S2fQ3nxY0DWzttZWynA9ddVExu6UvKIwr9NFt4XlrW3C7jqWuYoE
LgeHsLCycHNxsbCzZhSWbOJpq2jCOo6wSSB9JdC3iIxtEvMbifn170W+kxkg
P0iOpzFpDPrg6GtTc+vAs0Y1QaY3LRUCDRQDTORlOFnjY2I3keDrexMzC7p6
uuDkHGzsnDx8de09WzjaOoqwgcF/xQJbOOo2gbED7O4AzC0CbZNARx/x/yTQ
97AUJpG2O/PxkzYEYqYscdVIzllZzJCfI0BP8pKupqa0WH1j29IG2u9KkIyU
uI7WcU52Dml55dG3H7cwlDUkfgON30QTNzEUUA5BYCDARXCUTRwNDdApP36B
mcHRDkjUvQ9rmzr6BieEeBzVxXWFuV2PS951VC8OsXM7rfKHvkFUNAxyXPW8
vaW9tQU7O7url+/Gd+wGkrCOJm2AwJDWsSAn9StoO3iyGOAbDswegwp+VjQa
gUbBk5g7RFKQzyVTeSELVXGICJ/bSYmGEJP+FM+aaB+ItKiRgU5cuH9qYpSP
p6uHp7v9+QtLWzvrGGADA6yhQYsABJH2DU8F6xYW2D7ip4L8DOYvgMQgEMko
wh4CjU665uGko2BrrO3hcNZWQzzdGVIWbH/DyVpFRtTewdbXxbm0IIfJpExO
TsgrKmbeL61ohpdUVgyOjb559z75bprn5YCW7r5tHGkbQ9zCHvEjsDgUgYIF
mDjq/gYScfmivZWWEiwqpDAv10xT0c9A3k5NSp2PR46b9ayJQQw0bGX5M41G
efLksaKivICQqJSYKERG+IKViaeLk7ycFBsHm5aewYs3M9/xlC0sBUVi3CtO
LKkvaO1pG387+m51wcPHz+GMRUtT9fDL8ZPqqurHuCS5OPRE+VzkBIKM1YM8
naprK6Nirj/saMvNypQUEVYV5HGESJrL8esqSFqZ6YsIC7Kwcabey8GQ6P/M
/1d/3kN4WlV5/P28yOrq9MzshISkiKcjvfDOdllpKX5WFjleTm+ITKa1Yr63
kY6i9DEhAfuLNk/6egnI77k3w82FuUL0FNy0BCD8Ag5mOsZGuiysvMHQiO8A
GcwSksBAfh7YnOtYnWlYniifHsga789+2pk50JmdngLlFzzGxcKmI8ILs9C4
+Yf8TSftP9RkBDi5jmuppyVCn3eWdeRAI3QkA1UFIi3ETnFzWEOUHc6YsbDy
eAZe/oLaXkKitnDE1bdtS2OVK2MlG69LN6cq1qeqlierNqYqi9ICuXj4uFi4
DcT57JVEtIS4TkoJpUYGmZsbCguwR9iq3PfWTnPUTDur6iHFEWkiZiMucOoY
n7K4MOiPur5mXNatuJyUgrry7Q8dX15XL7x88HH0wdxo8dzL4tnhwsXRktKM
a8KCfJysnGKcbNIC3OI83CqS0pWlReZWphL8XCmO6gUOytbHOH10ZR1khfx1
xB2VxFV4OGRFBdi4OEXkBfTP6pg4G3uHeiEX29dnGz+9qV56U7n0qnj+Rf7c
4L13Q/eLU8PUxfi4WY9+iwJ83BBxIVMNVdiNaGUFteOyEEslQRM5XhEWbg0J
QU0h4T8URME1ZQV5Thue4ODm0DWFRN0ODIx0jU8K35pp2JyqXRkvXRwrWBzN
WxrJW3yR834wpyrBJcBAVl1UwMRIT1NdSYybXVVK5NQJDRVZeQt9QzkRfk0l
CTCcnOxsgjw8qmKiElxsUiKCjucsuXjZrc+ZDwyUvRyqnproWwSdGcxbHM6b
G8p4//zO+4HUqf5UeGFAQYB+rodWbpTLcGduY0mSioK0hopcfNila142qfFX
7sIul+dHXvayYmPhkZeV8nc/Azovws9vYWbMw8vueN786cCDV8NVC+/+Whgr
mhvK+TB4b+ZZymRv3Otu2LNmWJCrbuAZuY4Mj4m+zJfdNyd7M4yNtQ30NZ80
Jg40xA603h7sTBnsvFVWeFVcSFpGWiI1yc3BUpeXg42Pl1dG6ljm3ZDHffnP
+wumxrvG+lNe9adM9N560hLxpDV86GE8LMJBT1si6bpdbw30ETxhAH59uPuW
leVJfV2lrtqI5+0xvU2R3XXh/c3Xe9punLM15OZk9/EyuRnrDFETA4/Lyd64
p/Vub/e954/zp151dtZF9DRe76m9VpByNjvFOi/tgrGehJfb6aayq+0Vfu21
QZ3V/vC6MFsr7dMGCi210J5m6KOmsK76sO76iEctkVl/+kiKC53Skk+74xQe
bi0tJ3ze3vjpw4ze7oxnj3PfvIJHhJkGBxkmRlneiTHLTnX0dFX3u6TVWBrS
XnsVXn25rfZyV/2V7oZrFx2M7G3VG8v9Goq8awovNpZ4tJZd6aoJaa4LNzSC
aKpIpic7Fd33d3M3NzPSaqiIb22E9XWlT040hEKNTW3Ej+vxmpyWsLNS0zkl
4u9rcjPGPiXeNu2W3Z8p9rmpDnWFPl7OJld9dRtLL9QUuJfnOpXm2JVk29cV
uVYU+Zubavi6m1QWeRUVXEpMcLUy1y4rDGusieqG3x58XjQ3fr+hOsrZVUdR
QUBBhl9DVUBNhUNBkU1GnkNFg0f9BL+aJp+ZqfQJiLzbpZO59+xKc91rH7g/
yLHNTbfISTsTEWxsZiiTknC2LM8p70+b1GRnKwtIdoZfXXlYW90N0CLEbMXc
SG4yzPWKt0VWkndVXkDGLUdoqKWDo5aJqdQFF21ff3MfvzNqCtKujicjg3Vj
Qg1vxxmlJ5nnpNlXlfheOnci2Ot0Y7l3XZFLRZ5DfpabpZlqxDXr0jy/ysKA
no478yP3pp+ldjbEddbHjnbffNt/a6g9+ll7wkBLYvOD4I6qsIc1kbDrDpes
9WqyQzrKg+uLAwsznRMjjaFXdCKCjM11ZHOTvDvrr8IrfBuK3WpKQ87Z6AT4
WLXWRLZVQh93Zox3xY13xw+3RU8PJL17mjzZCxtsgT5vgo7AY8cewgabox7X
QIuT3WqyfIfbY8d64l8+ShjtuQXGuC7fMy7YPDnKqb44uLbYu6HEvSLfuao4
wMfd7LSBUlNV6EBr1Iv+gqG26yMd0S8exow9ip3oi3/VG/eyK7qvLuhpE3QQ
HvWkMfxFR+x0350X8Oin9UEjbWFPW6F9jWF9TWGtpX7wyqsddaHNFVfg1QEd
dYHN5X7NVdfSk92goTYNtUEd9SGD/fmIz8/W5nq+zHYtz3auzXWv/o1PU22r
7x+tf+j9MtO5Od//benJ5mLfp+mW5fdti2/b5iZapkZq3gxXvx4ufz1S9nqk
cmKoanq06f1E2+xE+/xM3/vpnrdv4NOT8C8L4/8BwYKA+g==
       "], {{0, 32}, {32, 
       0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{32, 32},
     PlotRange->{{0, 32}, {0, 32}}]}], "}"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"trained", "[", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
9lOnTra1tQH+fwAN6ImN
      "], {{0, 32}, {32, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   RowBox[{"{", 
    RowBox[{"\"\<TopProbabilities\>\"", ",", "3"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"images", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"Keys", "[", "trainingData", "]"}], ",", "5000"}], "]"}]}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"entropies", "=", 
   RowBox[{"trained", "[", 
    RowBox[{"images", ",", "\"\<Entropy\>\""}], "]"}]}], ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{"Labeled", "[", 
  RowBox[{
   RowBox[{"images", "[", 
    RowBox[{"[", 
     RowBox[{"Ordering", "[", 
      RowBox[{"entropies", ",", 
       RowBox[{"-", "10"}]}], "]"}], "]"}], "]"}], ",", 
   "\"\<high entropy\>\""}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Labeled", "[", 
  RowBox[{
   RowBox[{"images", "[", 
    RowBox[{"[", 
     RowBox[{"Ordering", "[", 
      RowBox[{"entropies", ",", "10"}], "]"}], "]"}], "]"}], ",", 
   "\"\<low entropy\>\""}], "]"}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:591a\:4efb\:52a1\:5b66\:4e60", "Section",
 CellChangeTimes->{{3.753357607251933*^9, 3.7533576082501907`*^9}}],

Cell[BoxData[
 RowBox[{"obj", "=", 
  RowBox[{"ResourceObject", "[", "\"\<CIFAR-100\>\"", "]"}]}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"ResourceData", "[", 
    RowBox[{"obj", ",", "\"\<TrainingDataset\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{"RandomSample", "[", 
  RowBox[{"trainingData", ",", "5"}], "]"}]}], "Input"],

Cell[BoxData[
 RowBox[{"labels", "=", 
  RowBox[{"Union", "@", 
   RowBox[{"Normal", "@", 
    RowBox[{"trainingData", "[", 
     RowBox[{"All", ",", "\"\<Label\>\""}], "]"}]}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{"sublabels", "=", 
  RowBox[{"Union", "@", 
   RowBox[{"Normal", "@", 
    RowBox[{"trainingData", "[", 
     RowBox[{"All", ",", "\"\<SubLabel\>\""}], "]"}]}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{"convnet", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"20", ",", 
        RowBox[{"{", 
         RowBox[{"5", ",", "5"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"50", ",", 
        RowBox[{"{", 
         RowBox[{"5", ",", "5"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"FlattenLayer", "[", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"DotPlusLayer", "[", "500", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}]}], "\[IndentingNewLine]",
      "}"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"32", ",", "32"}], "}"}]}], "}"}], "]"}]}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"convnet", ",", "100", ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}], ",", "20", ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Image\>\"", "]"}], "\[Rule]", 
       RowBox[{"1", "\[Rule]", 
        RowBox[{"2", "\[Rule]", 
         RowBox[{"3", "\[Rule]", 
          RowBox[{"NetPort", "[", "\"\<SubLabel\>\"", "]"}]}]}]}]}], ",", 
      RowBox[{"2", "\[Rule]", 
       RowBox[{"4", "\[Rule]", 
        RowBox[{"5", "\[Rule]", 
         RowBox[{"NetPort", "[", "\"\<Label\>\"", "]"}]}]}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Label\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", "labels"}], "}"}], "]"}]}], ",", 
    RowBox[{"\"\<SubLabel\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", "sublabels"}], "}"}], "]"}]}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "trainingData"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"net", "[", 
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
     "], {{0, 32}, {32, 
     0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSizeRaw->{32, 32},
   PlotRange->{{0, 32}, {0, 32}}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"net", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
+dQM2CL26fhevVjOJP8baRQX/A==
        "], {{0, 32}, {32, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{32, 32},
      PlotRange->{{0, 32}, {0, 32}}], ",", 
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1:eJwtlHdQ01m7x3fu/ePdO2/ZdS1Ib2mUBAgQSiAJpAEJJJBiCkkgIYQUEtIo
BiT0qlIV1EXFq+jrYlvLigUVkVVYZFdZ6wICFooiAlJC8rt5Z+7M95x5zvnj
Oef5zme+nmJNSuZ/ffPNN/pv7VtKel6MTpdewPjefmCp9XKZWpoRrzZIZVJd
uPi/7Zce/7/+U8+uAR/XgM9rtg8rm+9WrLMrts9rwLIVmF8HJhetYwvA60/A
C7sWgdHPwB8fgZE5YGQWeDwDDM8Av723DEyu908Dd6aB25PArXGgZwy4+hq4
9Ao49xL46Tnw71FgcgmYWtycXbXNfLVNL1omP2+8XbS8W7a+ml//8+3Sszfz
zyfnX8+tvZy3Pp0Ffp+zjczYnnwAfp+2DI59ujYw3H37wcDrxQcTtrvjttvj
mzfGrNdeWy+/sl18aTv/3PbTqO3tMjC1sD6zZFlYtc4vb84uW959WZtaWL39
8I+T3ZeaDrQeO9HRN/Tb2Nzqi4/A04+Wp3OWP99v9j+ZPvpTd1tHa+uhlku9
94fGVwbebN57Y+mdsNwc37w+Zr3yl/XnV9aLL2x2cz593Vxc21z5urG6alnd
sK5YgXdzs11dJ5qbalVKYUFBVmW9eWDk2bOZldGF5ecfV+6OjHVdvF7fUtXc
uKe1qbSpff+V+48eTSwNfrAOvLfdmbTemLD8Mr559S/rlVd2t61LG9Y1AFi3
bC5/WVpfW19b25iaeN26t6SiWFNSpCgxqxRKQWNTfdeFS3+8+/Rs9uvZqz0H
DjfW1JvKzDl11caikpzSuqrua3eHXs0Nz1j73lp7JzduTVhvjtt6XgOf162f
Vi2fN6wLK+tDI0+GRx733rnZdaK9pd602yjW5wjy8zIKTSpJ+q4MhbL/6ZvR
d8vtnZ2V1fkGvTRLyskzSvTGzDRp2p6K+u4bj/onVn79APRNrd+dtPVOALfG
7PDY5lYssyuWua+2Y2cuFJaaq+vNlRX6/TXGipJsnVaYKWOpsgW8VBaVwa1s
On7/yfjJ7u5Ck9aoy0wTJOYaxCq1mMllMtMza4+ev/NyvufPmYG36/1vbX1T
tntvgLk1wE7mzFernZ/jZ382lRQXFuWUlWi06lQ+N0GnlzHZFBQKgcbhCFQm
ky81Ve3b19xabMpVy4UVJZpcg4SaSPKGgcJi8XnV+6rbO8sOnb794uOvby0D
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
I9UjQ9WPHpQN9Jn/D3Y/x6I=
        "], {{0, 32}, {32, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{32, 32},
      PlotRange->{{0, 32}, {0, 32}}], ",", 
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1:eJyNVglYU1cW9uvUTwUUCBCykAZI2CIhgIBEIqtsQtgREUH2RWSVIhaXIigW
xKoVKwqIVVsVEKHwiXVBWQRlBwGBsId9MaBAtpfMfYmlzowz05Pzzrv35r7/
nHve+d75VQJj3EK/Wrdu3eGNwLgFHLGIjw846i4DJp7RhyPCokOC7aMTQsJC
4o0D/wEWlT9d8Fj4l0ACIf8/VQgrJBTwIYjH53NXV5eBBVNYhQLhl0QgegZY
geDflr+oEOxawOfxOCPDg+cyf3i/MPd/8SHxf9CXN3xhu4DPYa8cTUpURMqX
Pnzwd/CFfxcf3gfxuU+ePCYSVLAYVER4KCRO0X/BF7kQnf3zBH2ekj+nAkgA
8eFrenrS1mYXSlEBp4QxM6Utshb+Jz7AhbMK8TgCgQCC4NMI+AIBF+Jz+AIe
bHmrXIgLrZ0zLTVFQR4BFI1CqqsR2ttaePCzkFjEIMDy+Xx4DH4iLCHEFaxt
4vF5bA6PzYXxYBfcuanpvu6eupqa3Nxrqir4LZslZaQ3yyFkMGjFght5IEUg
a2v4PB6oLngqcgHjrywvlhbdE+Pz4cpbAXHyOCtjw4MVZSW5OT/HRUXutrai
aJOUsBgpyU0bN6yXlNiIkJWWl0NEHTrIZq/w+TyBSDgcDpfLBVY8FVUy+3ZB
HklNVYwPe+esjAz0Ft+9nRATuX+Pm6eLo6uj3XZ9HU01lW9wWBA5wJfYtAG4
UMKic6/ngFMCfK5I1vIOcMS56H3XCR5Ey0mL8Vks1tPHv8ceCnF2sPJyc7Cg
GW7VwGup4TQIWAIeg1SQA/ggP2J8WZktIP6y0pJxJlMcW0dHR2Fh4ejoqDhd
HPZqQny0jNRGFYwicMpiLVy4cN5yp5GpMdnOyngbmairTTDUVdfTVjHUUzOg
qOtTSPoUbQ2ishIGqYRVQMhKymzeqIzDujjTs7MvnUk/bWFhQSQS4uNjV1eW
QbFVv6zC41BYpCwRq7j8celM2nEMWl5O4ivSN1s8HalbCWgbs+1WNB09EsbW
QodmRDSi4E0Ntc23U6j6Gro6ODJJUYugQMDISW1YJyO98ev16ySlJNFIJNWA
sjA7ufpxydXJUVLyayWkFAGFeFB8V5OAUZCTpOmpuliSQ/bbGOkQjCjqljRt
miHRwVrPjKpiZYqzNFF1sqU4WGuTtVG21mSaoaqxtoqmCkpdVRGluAUIYotU
bIT/NHPgTv71b9BIBXkpvOJmNQzC28vVxFCLRtU5FOC218k4KtTV0ZZKUsNY
m1Gc7Kl2lnoONjpe7ls9nMnW5qp++6hkMhbU1G5rPTtT/e0UjR0GJJ2tqjgM
Gqsoa2dpuNfVjkRQVkLKyctK4JGbiRgE1WCr625aiL9nQqRPRCDdjb4jOMDV
hW5mZUah7zbxcLHcZUZxo2/zcjVzc6SFB7t47bF3dd5pvkPTyYa6c5uWNY2i
o6lEIWnsMNy6TQeLlFkvvXE9HoVEymzCIjZp4JHmVLK9GSX0gPOJI2FJhw/4
+9q50E0c7I1dnHYe2O8U5O/h5W4b7Ovu6+kWuM87ISo8Ljo0NMgjwHe3n5dd
uC/d29nExlTbxIBEM1Lf67HT09nciKJhSCapoORwiE32VtS9zlZ0S92DQS6/
5Gf9eutiasqhiHB3Z6cdLs60uJgDiQlhoUFehw8FBO/3DvPbnxQXGRrgfTjm
gI+X1f491omR7lGBu+IPOoUHOFmbk+j2Ol5uZuZUXaoemYTH4OUkEmJCvosL
PhTg9NO5pOqqBw2vKlJToiPCXP39bHx9bLIyktJSYpOTAq5ciEmIdk+M9cpI
jUiMCchKT/D3sY6N3Hsszi3UxzA/O/ZUsp+dlZaHi9HBEDcjXeJOQ4qBFpGI
ksk6+32AN/18WtyzR7fbW19czT576kTUqRMhkWGO38Z5g0FBblrmmbDbebGZ
qb4nEl3v3UxOjvO5cj4hKtTh6qVjx+PdQnz0TiY5p504EOJvExZETzkWoUtS
Iqvj8AoyqopbkuLC007GX8767tXLB8+eFGdfOF1wLaPoTmZBzrHSwh9/vhhX
UZJVVnT64ul9jwrTK+6mA5tzLupRUcaNK4k3c1JOHdlXXpiamx17Ky+ltDC7
tqqovCTfw8lUUxUpv3kDAS1tb2lcUlzw683z1S+Ka1+WN7ysvP9Ldt3Tm91N
xU01d+qeXX1emfm8Ir04/0hpwam3Nb/Vll96V59fVZb+tuGX+zfSKosuMTor
xhgvRhn18xO9nI+TzMHWzNMJ2ygq8jKbCGgZfS3lkpJb9TWldbW/93Q2vKn+
o/xe/umjflczD968klDz+Hxr/aWaP75vfna2vuLsm8osRuP14ZbrjX+kNz+/
3NVwf/zdq7mx9sWZ3oXJocWZ8cnhdz3tNSePhu8w1gCfAxW0NEVNaW5urLW5
qrHxeVtzTVP1s85XT/fYUsz1Efpq0pGBFt3NOV2vM9peJLVXn+iqSxtuvTDS
eq3vdQ6z6+GHiZYPUwPLs6MrC+OLs1NzkxP9XW193U0/ZiZbWeghZCVwClIk
PBJ8Uz8szb+sflpWen+ot4s1OXDueHCIhyEZL0nEyXbU3x9ozOuqPd5Wl/ym
6lhn7bne5t/eNZfPjXQvTjGXZsaXZsdmxvunx/tbmmqmp8aEAs7LF4/sbU1R
MtJErAJFHSsQteCVlZUx5mBb02vmwNvGqrsXTwa6WFL27aEzextnuiqH2wo6
Gi+3v84Z6SwbZ9QyGe3zExPzUzOs2cmZiYHRwY6nlYVXsn9gc5bA13p5mfXT
xUxlJAolLamlglzrv5CAMzc72dP2eqyvYaDzyavnJX29bYvTjCVm2/RQ49hQ
7dRI4/vR7gVm9+xo3/zk6Ozk0PT4YH9367071z1dbTzc7VmLs3DngtgL81NZ
Z85qqxOUsQjBn8IXcCAhl/2RBcIbZzTNT/RNzzDnpwaXphhL72enZ4Zmp4ZZ
zNEFZv88c2BipHdkqLWvpyUsyFdTDYdCSmhpKrW0vhEFy2WzP3BWOM8eP6bv
3rXW9LkCNg/iwMSGv7rCGh9hdHZ2tbe31Pe/bWIM9Q9PMIYGOzobqnpaq/u7
GhnvWmemehfmx4P8fdCK0ppqGCIR83v5Qxidu8rjrUJ8uF0ymcNr8fNA8wTU
BLR60E8htgBif1xdZjIBJXzb0fOm6GHet/E+B/1sK8uuvZ9lLH+YFUDLQojT
87bdw9VBFa+IU5KvqCgTMQguj88GIYObmCB9yo8Q+ARvAiYXQphU8Xifmjab
x1+oqys1MUCH7DG+dSOZvQrqhAsIL1DAOIaH+i//lJWRkcocHxXTB8CKIRGB
43/G32CKKcIXfnIJH5EPcyVABTl8Dis1KTwpzPlGbsLgYAMci5hWw7UBMxSg
IhosZn7Q50zwM3oopugwvRPHAQ/AAheOd7S3L+/cqatXDk9OdAJYmOFCIiII
UgpxQNnAdAj6F3xw+yenOs7Y
        "], {{0, 32}, {32, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{32, 32},
      PlotRange->{{0, 32}, {0, 32}}], ",", 
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
kc5Qfldwf2fwYEfwPxqYqSw=
        "], {{0, 32}, {32, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{32, 32},
      PlotRange->{{0, 32}, {0, 32}}], ",", 
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
87P1RhROlv8AFBA8CA==
        "], {{0, 32}, {32, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{32, 32},
      PlotRange->{{0, 32}, {0, 32}}]}], "}"}], ",", "\"\<SubLabel\>\""}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"net", "[", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
      "], {{0, 32}, {32, 
      0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{32, 32},
    PlotRange->{{0, 32}, {0, 32}}], ",", 
   RowBox[{"\"\<SubLabel\>\"", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<TopProbabilities\>\"", ",", "3"}], "}"}]}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"images", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Normal", "[", "trainingData", "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "\"\<Image\>\""}], "]"}], "]"}], ",", "5000"}], 
    "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"entropies", "=", 
   RowBox[{"net", "[", 
    RowBox[{"images", ",", 
     RowBox[{"\"\<Label\>\"", "->", "\"\<Entropy\>\""}]}], "]"}]}], 
  ";"}]], "Input"],

Cell[BoxData[{
 RowBox[{"Labeled", "[", 
  RowBox[{
   RowBox[{"images", "[", 
    RowBox[{"[", 
     RowBox[{"Ordering", "[", 
      RowBox[{"entropies", ",", 
       RowBox[{"-", "10"}]}], "]"}], "]"}], "]"}], ",", 
   "\"\<high entropy\>\""}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Labeled", "[", 
  RowBox[{
   RowBox[{"images", "[", 
    RowBox[{"[", 
     RowBox[{"Ordering", "[", 
      RowBox[{"entropies", ",", "10"}], "]"}], "]"}], "]"}], ",", 
   "\"\<low entropy\>\""}], "]"}]}], "Input"],

Cell[BoxData[
 RowBox[{"subnet", "=", 
  RowBox[{"Take", "[", 
   RowBox[{"net", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NetPort", "[", "\"\<Image\>\"", "]"}], ",", 
      RowBox[{"NetPort", "[", "\"\<SubLabel\>\"", "]"}]}], "}"}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"subnet", "[", 
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
mXbs1iRneyJtf4S1O8T4Pw3y1i0=
     "], {{0, 32}, {32, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSizeRaw->{32, 32},
   PlotRange->{{0, 32}, {0, 32}}], "]"}]], "Input"]
}, Open  ]]
},
WindowSize->{738, 602},
WindowMargins->{{Automatic, 90}, {48, Automatic}},
FrontEndVersion->"11.0 for Linux x86 (64-bit) (July 28, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 123, 1, 65, "Section"],
Cell[706, 25, 376, 9, 32, "Input"],
Cell[CellGroupData[{
Cell[1107, 38, 95, 1, 30, "Input"],
Cell[1205, 41, 22323, 513, 158, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23565, 559, 485, 12, 56, "Input"],
Cell[24053, 573, 20781, 414, 65, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44871, 992, 731, 21, 60, "Input"],
Cell[45605, 1015, 3174, 65, 240, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[48828, 1086, 125, 1, 65, "Section"],
Cell[48956, 1089, 635, 18, 52, "Input"],
Cell[CellGroupData[{
Cell[49616, 1111, 329, 9, 32, "Input"],
Cell[49948, 1122, 6163, 129, 94, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56148, 1256, 316, 8, 56, "Input"],
Cell[56467, 1266, 383, 9, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56887, 1280, 269, 8, 36, "Input"],
Cell[57159, 1290, 2877, 60, 234, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[60085, 1356, 317, 10, 67, "Section"],
Cell[CellGroupData[{
Cell[60427, 1370, 289, 8, 32, "Input"],
Cell[60719, 1380, 7224, 150, 108, "Output"]
}, Open  ]],
Cell[67958, 1533, 508, 16, 52, "Input"],
Cell[CellGroupData[{
Cell[68491, 1553, 175, 4, 35, "Input"],
Cell[68669, 1559, 7113, 148, 108, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[75819, 1712, 495, 14, 80, "Input"],
Cell[76317, 1728, 90567, 1715, 364, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[166933, 3449, 121, 1, 65, "Section"],
Cell[CellGroupData[{
Cell[167079, 3454, 2738, 71, 210, "Input"],
Cell[169820, 3527, 21858, 454, 128, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[191715, 3986, 963, 27, 84, "Input"],
Cell[192681, 4015, 3127, 65, 234, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[195857, 4086, 127, 1, 65, "Section"],
Cell[CellGroupData[{
Cell[196009, 4091, 650, 18, 72, "Input"],
Cell[196662, 4111, 20783, 414, 65, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[217482, 4530, 92, 2, 32, "Input"],
Cell[217577, 4534, 211, 5, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[217825, 4544, 156, 3, 32, "Input"],
Cell[217984, 4549, 13256, 316, 65, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[231277, 4870, 197, 5, 32, "Input"],
Cell[231477, 4877, 72, 1, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[231586, 4883, 200, 4, 32, "Input"],
Cell[231789, 4889, 20780, 414, 158, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[252606, 5308, 160, 3, 32, "Input"],
Cell[252769, 5313, 263, 6, 32, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[253081, 5325, 155, 2, 65, "Section"],
Cell[CellGroupData[{
Cell[253261, 5331, 475, 14, 52, "Input"],
Cell[253739, 5347, 5951, 124, 94, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[259727, 5476, 569, 18, 71, "Input"],
Cell[260299, 5496, 5910, 123, 94, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[266246, 5624, 209, 7, 32, "Input"],
Cell[266458, 5633, 126, 3, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[266621, 5641, 123, 3, 35, "Input"],
Cell[266747, 5646, 7800, 213, 122, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[274584, 5864, 1122, 36, 71, "Input"],
Cell[275709, 5902, 5908, 123, 94, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[281654, 6030, 209, 7, 32, "Input"],
Cell[281866, 6039, 124, 3, 32, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[282039, 6048, 19, 0, 51, "Section"],
Cell[CellGroupData[{
Cell[282083, 6052, 231, 6, 32, "Input"],
Cell[282317, 6060, 22267, 511, 70, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[304621, 6576, 339, 10, 32, "Input"],
Cell[304963, 6588, 22170, 466, 236, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[327170, 7059, 395, 11, 52, "Input"],
Cell[327568, 7072, 22128, 465, 192, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[349733, 7542, 119, 3, 32, "Input"],
Cell[349855, 7547, 20631, 412, 65, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[370523, 7964, 159, 3, 32, "Input"],
Cell[370685, 7969, 353, 8, 32, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[371087, 7983, 19, 0, 51, "Section"],
Cell[CellGroupData[{
Cell[371131, 7987, 870, 22, 92, "Input"],
Cell[372004, 8011, 41217, 853, 430, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[413258, 8869, 233, 6, 32, "Input"],
Cell[413494, 8877, 344, 7, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[413875, 8889, 136, 1, 44, "Subsection"],
Cell[CellGroupData[{
Cell[414036, 8894, 354, 10, 32, "Input"],
Cell[414393, 8906, 41096, 849, 272, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[455538, 9761, 136, 1, 44, "Subsection"],
Cell[CellGroupData[{
Cell[455699, 9766, 417, 12, 52, "Input"],
Cell[456119, 9780, 41096, 849, 272, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[497252, 10634, 272, 8, 35, "Input"],
Cell[497527, 10644, 22660, 473, 128, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[520224, 11122, 92, 2, 32, "Input"],
Cell[520319, 11126, 240, 5, 32, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[520620, 11138, 161, 2, 65, "Section"],
Cell[CellGroupData[{
Cell[520806, 11144, 885, 26, 76, "Input"],
Cell[521694, 11172, 5746, 119, 94, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[527489, 11297, 165, 2, 51, "Section"],
Cell[CellGroupData[{
Cell[527679, 11303, 746, 23, 76, "Input"],
Cell[528428, 11328, 5744, 119, 94, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[534221, 11453, 165, 2, 51, "Section"],
Cell[CellGroupData[{
Cell[534411, 11459, 245, 6, 32, "Input"],
Cell[534659, 11467, 22267, 511, 70, "Output"]
}, Open  ]],
Cell[556941, 11981, 275, 8, 32, "Input"],
Cell[CellGroupData[{
Cell[557241, 11993, 201, 5, 35, "Input"],
Cell[557445, 12000, 20781, 414, 65, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[578263, 12419, 125, 1, 44, "Subsection"],
Cell[CellGroupData[{
Cell[578413, 12424, 316, 8, 60, "Input"],
Cell[578732, 12434, 20781, 414, 65, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[599562, 12854, 126, 1, 44, "Subsection"],
Cell[CellGroupData[{
Cell[599713, 12859, 584, 16, 82, "Input"],
Cell[600300, 12877, 20780, 414, 65, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[621141, 13298, 204, 3, 65, "Section"],
Cell[CellGroupData[{
Cell[621370, 13305, 758, 22, 83, "Input"],
Cell[622131, 13329, 1934, 44, 242, "Output"]
}, Open  ]],
Cell[624080, 13376, 557, 16, 72, "Input"],
Cell[CellGroupData[{
Cell[624662, 13396, 263, 9, 32, "Input"],
Cell[624928, 13407, 28093, 475, 238, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[653058, 13887, 287, 8, 36, "Input"],
Cell[653348, 13897, 9744, 204, 138, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[663129, 14106, 263, 9, 32, "Input"],
Cell[663395, 14117, 8384, 152, 238, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[671828, 14275, 192, 2, 51, "Section"],
Cell[CellGroupData[{
Cell[672045, 14281, 751, 23, 76, "Input"],
Cell[672799, 14306, 4850, 128, 66, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[677698, 14440, 190, 2, 65, "Section"],
Cell[CellGroupData[{
Cell[677913, 14446, 758, 22, 83, "Input"],
Cell[678674, 14470, 1938, 44, 241, "Output"]
}, Open  ]],
Cell[680627, 14517, 557, 16, 72, "Input"],
Cell[CellGroupData[{
Cell[681209, 14537, 263, 9, 32, "Input"],
Cell[681475, 14548, 28256, 478, 244, "Output"]
}, Open  ]],
Cell[709746, 15029, 304, 9, 57, "Input"],
Cell[710053, 15040, 240, 7, 35, "Input"],
Cell[CellGroupData[{
Cell[710318, 15051, 263, 9, 32, "Input"],
Cell[710584, 15062, 8760, 158, 238, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[719393, 15226, 72, 1, 65, "Section"],
Cell[719468, 15229, 791, 23, 78, "Input"],
Cell[CellGroupData[{
Cell[720284, 15256, 242, 7, 32, "Input"],
Cell[720529, 15265, 14698, 261, 239, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[735264, 15531, 554, 15, 52, "Input"],
Cell[735821, 15548, 8267, 171, 124, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[744125, 15724, 674, 19, 76, "Input"],
Cell[744802, 15745, 1640, 50, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[746479, 15800, 127, 3, 35, "Input"],
Cell[746609, 15805, 8181, 169, 124, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[754827, 15979, 1623, 47, 224, "Input"],
Cell[756453, 16028, 325270, 5312, 304, 247581, 4037, "CachedBoxData", \
"BoxData", "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1081772, 21346, 93, 1, 65, "Section"],
Cell[1081868, 21349, 513, 14, 85, "Input"],
Cell[CellGroupData[{
Cell[1082406, 21367, 131, 3, 35, "Input"],
Cell[1082540, 21372, 175, 4, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1082752, 21381, 412, 12, 52, "Input"],
Cell[1083167, 21395, 6008, 126, 94, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1089212, 21526, 123, 3, 35, "Input"],
Cell[1089338, 21531, 5965, 125, 94, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1095340, 21661, 88, 1, 44, "Subsection"],
Cell[1095431, 21664, 152, 4, 32, "Input"],
Cell[CellGroupData[{
Cell[1095608, 21672, 70, 1, 32, "Input"],
Cell[1095681, 21675, 88, 1, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1095806, 21681, 81, 1, 35, "Input"],
Cell[1095890, 21684, 16919, 441, 319, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1112870, 22132, 244, 3, 65, "Section"],
Cell[1113117, 22137, 507, 14, 61, "Input"],
Cell[CellGroupData[{
Cell[1113649, 22155, 131, 3, 35, "Input"],
Cell[1113783, 22160, 143, 3, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1113963, 22168, 418, 11, 59, "Input"],
Cell[1114384, 22181, 160, 4, 32, "Output"],
Cell[1114547, 22187, 141, 3, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1114725, 22195, 407, 11, 61, "Input"],
Cell[1115135, 22208, 5548, 122, 90, "Output"],
Cell[1120686, 22332, 5522, 122, 90, "Output"]
}, Open  ]],
Cell[1126223, 22457, 328, 9, 56, "Input"],
Cell[1126554, 22468, 820, 23, 101, "Input"],
Cell[CellGroupData[{
Cell[1127399, 22495, 1133, 30, 108, "Input"],
Cell[1128535, 22527, 30421, 634, 268, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1158993, 23166, 236, 5, 35, "Input"],
Cell[1159232, 23173, 30358, 632, 268, "Output"]
}, Open  ]],
Cell[1189605, 23808, 484, 14, 60, "Input"],
Cell[CellGroupData[{
Cell[1190114, 23826, 1045, 27, 121, "Input"],
Cell[1191162, 23855, 24241, 481, 248, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1215452, 24342, 210, 3, 65, "Section"],
Cell[CellGroupData[{
Cell[1215687, 24349, 717, 21, 104, "Input"],
Cell[1216407, 24372, 22157, 376, 242, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1238601, 24753, 258, 7, 32, "Input"],
Cell[1238862, 24762, 10462, 215, 154, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1249361, 24982, 466, 14, 52, "Input"],
Cell[1249830, 24998, 24631, 510, 192, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1274498, 25513, 401, 11, 56, "Input"],
Cell[1274902, 25526, 10290, 211, 154, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1285229, 25742, 787, 25, 86, "Input"],
Cell[1286019, 25769, 215350, 3740, 242, 163838, 2894, "CachedBoxData", \
"BoxData", "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1501406, 29514, 218, 6, 59, "Input"],
Cell[1501627, 29522, 6856, 142, 108, "Output"],
Cell[1508486, 29666, 6858, 142, 108, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1515381, 29813, 175, 5, 36, "Input"],
Cell[1515559, 29820, 173, 5, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1515769, 29830, 307, 9, 36, "Input"],
Cell[1516079, 29841, 34762, 585, 242, 24164, 409, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1550890, 30432, 117, 1, 65, "Section"],
Cell[CellGroupData[{
Cell[1551032, 30437, 1077, 32, 146, "Input"],
Cell[1552112, 30471, 101, 1, 30, "Output"],
Cell[1552216, 30474, 100, 1, 30, "Output"],
Cell[1552319, 30477, 512, 10, 23, "Message"],
Cell[1552834, 30489, 849, 15, 113, "Message"],
Cell[1553686, 30506, 528, 10, 41, "Message"],
Cell[1554217, 30518, 323, 9, 32, "Output"]
}, Open  ]],
Cell[1554555, 30530, 326, 9, 59, "Input"],
Cell[1554884, 30541, 1668, 43, 192, "Input"],
Cell[1556555, 30586, 226, 6, 35, "Input"],
Cell[1556784, 30594, 278, 8, 35, "Input"],
Cell[1557065, 30604, 3637, 89, 45, "Input"],
Cell[1560705, 30695, 221, 7, 35, "Input"],
Cell[1560929, 30704, 241, 6, 52, "Input"],
Cell[1561173, 30712, 440, 12, 56, "Input"],
Cell[1561616, 30726, 537, 14, 80, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1562190, 30745, 109, 1, 65, "Section"],
Cell[1562302, 30748, 119, 2, 32, "Input"],
Cell[1562424, 30752, 336, 9, 56, "Input"],
Cell[1562763, 30763, 2065, 53, 326, "Input"],
Cell[1564831, 30818, 249, 5, 59, "Input"],
Cell[1565083, 30825, 309, 9, 56, "Input"],
Cell[1565395, 30836, 134, 3, 32, "Input"],
Cell[1565532, 30841, 70, 1, 32, "Input"],
Cell[1565605, 30844, 81, 1, 35, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1565723, 30850, 111, 1, 65, "Section"],
Cell[1565837, 30853, 399, 11, 80, "Input"],
Cell[1566239, 30866, 127, 3, 35, "Input"],
Cell[1566369, 30871, 1121, 28, 149, "Input"],
Cell[1567493, 30901, 186, 4, 35, "Input"],
Cell[1567682, 30907, 19284, 339, 49, "Input"],
Cell[1586969, 31248, 4223, 75, 49, "Input"],
Cell[1591195, 31325, 188, 6, 35, "Input"],
Cell[1591386, 31333, 154, 4, 35, "Input"],
Cell[1591543, 31339, 503, 15, 59, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1592083, 31359, 117, 1, 65, "Section"],
Cell[1592203, 31362, 108, 2, 32, "Input"],
Cell[1592314, 31366, 252, 6, 59, "Input"],
Cell[1592569, 31374, 191, 5, 32, "Input"],
Cell[1592763, 31381, 197, 5, 32, "Input"],
Cell[1592963, 31388, 1609, 44, 241, "Input"],
Cell[1594575, 31434, 1096, 29, 112, "Input"],
Cell[1595674, 31465, 123, 3, 35, "Input"],
Cell[1595800, 31470, 4637, 81, 49, "Input"],
Cell[1600440, 31553, 19894, 348, 49, "Input"],
Cell[1620337, 31903, 4792, 86, 49, "Input"],
Cell[1625132, 31991, 293, 9, 35, "Input"],
Cell[1625428, 32002, 192, 6, 35, "Input"],
Cell[1625623, 32010, 503, 15, 59, "Input"],
Cell[1626129, 32027, 269, 8, 32, "Input"],
Cell[1626401, 32037, 4614, 80, 49, "Input"]
}, Open  ]]
}
]
*)

